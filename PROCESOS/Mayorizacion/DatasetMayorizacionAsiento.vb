'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DatasetMayorizacionAsiento
    Inherits DataSet
    
    Private tableAsientosContables As AsientosContablesDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("AsientosContables")) Is Nothing) Then
                Me.Tables.Add(New AsientosContablesDataTable(ds.Tables("AsientosContables")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AsientosContables As AsientosContablesDataTable
        Get
            Return Me.tableAsientosContables
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DatasetMayorizacionAsiento = CType(MyBase.Clone,DatasetMayorizacionAsiento)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("AsientosContables")) Is Nothing) Then
            Me.Tables.Add(New AsientosContablesDataTable(ds.Tables("AsientosContables")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableAsientosContables = CType(Me.Tables("AsientosContables"),AsientosContablesDataTable)
        If (Not (Me.tableAsientosContables) Is Nothing) Then
            Me.tableAsientosContables.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DatasetMayorizacionAsiento"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DatasetMayorizacionAsiento.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableAsientosContables = New AsientosContablesDataTable
        Me.Tables.Add(Me.tableAsientosContables)
    End Sub
    
    Private Function ShouldSerializeAsientosContables() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub AsientosContablesRowChangeEventHandler(ByVal sender As Object, ByVal e As AsientosContablesRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AsientosContablesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnNumAsiento As DataColumn
        
        Private columnFecha As DataColumn
        
        Private columnNumDoc As DataColumn
        
        Private columnBeneficiario As DataColumn
        
        Private columnTipoDoc As DataColumn
        
        Private columnAccion As DataColumn
        
        Private columnAnulado As DataColumn
        
        Private columnFechaEntrada As DataColumn
        
        Private columnMayorizado As DataColumn
        
        Private columnPeriodo As DataColumn
        
        Private columnNumMayorizado As DataColumn
        
        Private columnModulo As DataColumn
        
        Private columnObservaciones As DataColumn
        
        Private columnNombreUsuario As DataColumn
        
        Private columnTotalDebe As DataColumn
        
        Private columnTotalHaber As DataColumn
        
        Friend Sub New()
            MyBase.New("AsientosContables")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property NumAsientoColumn As DataColumn
            Get
                Return Me.columnNumAsiento
            End Get
        End Property
        
        Friend ReadOnly Property FechaColumn As DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        Friend ReadOnly Property NumDocColumn As DataColumn
            Get
                Return Me.columnNumDoc
            End Get
        End Property
        
        Friend ReadOnly Property BeneficiarioColumn As DataColumn
            Get
                Return Me.columnBeneficiario
            End Get
        End Property
        
        Friend ReadOnly Property TipoDocColumn As DataColumn
            Get
                Return Me.columnTipoDoc
            End Get
        End Property
        
        Friend ReadOnly Property AccionColumn As DataColumn
            Get
                Return Me.columnAccion
            End Get
        End Property
        
        Friend ReadOnly Property AnuladoColumn As DataColumn
            Get
                Return Me.columnAnulado
            End Get
        End Property
        
        Friend ReadOnly Property FechaEntradaColumn As DataColumn
            Get
                Return Me.columnFechaEntrada
            End Get
        End Property
        
        Friend ReadOnly Property MayorizadoColumn As DataColumn
            Get
                Return Me.columnMayorizado
            End Get
        End Property
        
        Friend ReadOnly Property PeriodoColumn As DataColumn
            Get
                Return Me.columnPeriodo
            End Get
        End Property
        
        Friend ReadOnly Property NumMayorizadoColumn As DataColumn
            Get
                Return Me.columnNumMayorizado
            End Get
        End Property
        
        Friend ReadOnly Property ModuloColumn As DataColumn
            Get
                Return Me.columnModulo
            End Get
        End Property
        
        Friend ReadOnly Property ObservacionesColumn As DataColumn
            Get
                Return Me.columnObservaciones
            End Get
        End Property
        
        Friend ReadOnly Property NombreUsuarioColumn() As DataColumn
            Get
                Return Me.columnNombreUsuario
            End Get
        End Property

        Friend ReadOnly Property TotalDebeColumn() As DataColumn
            Get
                Return Me.columnTotalDebe
            End Get
        End Property

        Friend ReadOnly Property TotalHaberColumn() As DataColumn
            Get
                Return Me.columnTotalHaber
            End Get
        End Property

        Default Public ReadOnly Property Item(ByVal index As Integer) As AsientosContablesRow
            Get
                Return CType(Me.Rows(index), AsientosContablesRow)
            End Get
        End Property

        Public Event AsientosContablesRowChanged As AsientosContablesRowChangeEventHandler

        Public Event AsientosContablesRowChanging As AsientosContablesRowChangeEventHandler

        Public Event AsientosContablesRowDeleted As AsientosContablesRowChangeEventHandler

        Public Event AsientosContablesRowDeleting As AsientosContablesRowChangeEventHandler

        Public Overloads Sub AddAsientosContablesRow(ByVal row As AsientosContablesRow)
            Me.Rows.Add(row)
        End Sub

        Public Overloads Function AddAsientosContablesRow( _
                    ByVal Fecha As Date, _
                    ByVal NumDoc As Decimal, _
                    ByVal Beneficiario As String, _
                    ByVal TipoDoc As Integer, _
                    ByVal Accion As String, _
                    ByVal Anulado As Boolean, _
                    ByVal FechaEntrada As Date, _
                    ByVal Mayorizado As Boolean, _
                    ByVal Periodo As String, _
                    ByVal NumMayorizado As Decimal, _
                    ByVal Modulo As String, _
                    ByVal Observaciones As String, _
                    ByVal CedUsuario As String, _
                    ByVal NombreUsuario As String, _
                    ByVal TotalDebe As Double, _
                    ByVal TotalHaber As Double) As AsientosContablesRow
            Dim rowAsientosContablesRow As AsientosContablesRow = CType(Me.NewRow, AsientosContablesRow)
            rowAsientosContablesRow.ItemArray = New Object() {Nothing, Fecha, NumDoc, Beneficiario, TipoDoc, Accion, Anulado, FechaEntrada, Mayorizado, Periodo, NumMayorizado, Modulo, Observaciones, CedUsuario, NombreUsuario, TotalDebe, TotalHaber}
            Me.Rows.Add(rowAsientosContablesRow)
            Return rowAsientosContablesRow
        End Function

        Public Function FindByNumAsiento(ByVal NumAsiento As Long) As AsientosContablesRow
            Return CType(Me.Rows.Find(New Object() {NumAsiento}), AsientosContablesRow)
        End Function

        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        Public Overrides Function Clone() As DataTable
            Dim cln As AsientosContablesDataTable = CType(MyBase.Clone, AsientosContablesDataTable)
            cln.InitVars()
            Return cln
        End Function

        Protected Overrides Function CreateInstance() As DataTable
            Return New AsientosContablesDataTable
        End Function

        Friend Sub InitVars()
            Me.columnNumAsiento = Me.Columns("NumAsiento")
            Me.columnFecha = Me.Columns("Fecha")
            Me.columnNumDoc = Me.Columns("NumDoc")
            Me.columnBeneficiario = Me.Columns("Beneficiario")
            Me.columnTipoDoc = Me.Columns("TipoDoc")
            Me.columnAccion = Me.Columns("Accion")
            Me.columnAnulado = Me.Columns("Anulado")
            Me.columnFechaEntrada = Me.Columns("FechaEntrada")
            Me.columnMayorizado = Me.Columns("Mayorizado")
            Me.columnPeriodo = Me.Columns("Periodo")
            Me.columnNumMayorizado = Me.Columns("NumMayorizado")
            Me.columnModulo = Me.Columns("Modulo")
            Me.columnObservaciones = Me.Columns("Observaciones")
            Me.columnNombreUsuario = Me.Columns("NombreUsuario")
            Me.columnTotalDebe = Me.Columns("TotalDebe")
            Me.columnTotalHaber = Me.Columns("TotalHaber")
        End Sub

        Private Sub InitClass()
            Me.columnNumAsiento = New DataColumn("NumAsiento", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNumAsiento)
            Me.columnFecha = New DataColumn("Fecha", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha)
            Me.columnNumDoc = New DataColumn("NumDoc", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNumDoc)
            Me.columnBeneficiario = New DataColumn("Beneficiario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBeneficiario)
            Me.columnTipoDoc = New DataColumn("TipoDoc", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipoDoc)
            Me.columnAccion = New DataColumn("Accion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAccion)
            Me.columnAnulado = New DataColumn("Anulado", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAnulado)
            Me.columnFechaEntrada = New DataColumn("FechaEntrada", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaEntrada)
            Me.columnMayorizado = New DataColumn("Mayorizado", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMayorizado)
            Me.columnPeriodo = New DataColumn("Periodo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPeriodo)
            Me.columnNumMayorizado = New DataColumn("NumMayorizado", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNumMayorizado)
            Me.columnModulo = New DataColumn("Modulo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModulo)
            Me.columnObservaciones = New DataColumn("Observaciones", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnObservaciones)
            Me.columnNombreUsuario = New DataColumn("NombreUsuario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombreUsuario)
            Me.columnTotalDebe = New DataColumn("TotalDebe", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotalDebe)
            Me.columnTotalHaber = New DataColumn("TotalHaber", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotalHaber)
            Me.Constraints.Add(New UniqueConstraint("DatasetMayorizacionAsientoKey1", New DataColumn() {Me.columnNumAsiento}, True))
            Me.columnNumAsiento.AutoIncrement = True
            Me.columnNumAsiento.AllowDBNull = False
            Me.columnNumAsiento.ReadOnly = True
            Me.columnNumAsiento.Unique = True
            Me.columnFecha.AllowDBNull = False
            Me.columnNumDoc.AllowDBNull = False
            Me.columnBeneficiario.AllowDBNull = False
            Me.columnTipoDoc.AllowDBNull = False
            Me.columnAccion.AllowDBNull = False
            Me.columnAnulado.AllowDBNull = False
            Me.columnFechaEntrada.AllowDBNull = False
            Me.columnMayorizado.AllowDBNull = False
            Me.columnPeriodo.AllowDBNull = False
            Me.columnNumMayorizado.AllowDBNull = False
            Me.columnModulo.AllowDBNull = False
            Me.columnObservaciones.AllowDBNull = False
            Me.columnNombreUsuario.AllowDBNull = False
            Me.columnTotalDebe.AllowDBNull = False
            Me.columnTotalHaber.AllowDBNull = False
        End Sub

        Public Function NewAsientosContablesRow() As AsientosContablesRow
            Return CType(Me.NewRow, AsientosContablesRow)
        End Function

        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AsientosContablesRow(builder)
        End Function

        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AsientosContablesRow)
        End Function

        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AsientosContablesRowChangedEvent) Is Nothing) Then
                RaiseEvent AsientosContablesRowChanged(Me, New AsientosContablesRowChangeEvent(CType(e.Row, AsientosContablesRow), e.Action))
            End If
        End Sub

        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AsientosContablesRowChangingEvent) Is Nothing) Then
                RaiseEvent AsientosContablesRowChanging(Me, New AsientosContablesRowChangeEvent(CType(e.Row, AsientosContablesRow), e.Action))
            End If
        End Sub

        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AsientosContablesRowDeletedEvent) Is Nothing) Then
                RaiseEvent AsientosContablesRowDeleted(Me, New AsientosContablesRowChangeEvent(CType(e.Row, AsientosContablesRow), e.Action))
            End If
        End Sub

        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AsientosContablesRowDeletingEvent) Is Nothing) Then
                RaiseEvent AsientosContablesRowDeleting(Me, New AsientosContablesRowChangeEvent(CType(e.Row, AsientosContablesRow), e.Action))
            End If
        End Sub

        Public Sub RemoveAsientosContablesRow(ByVal row As AsientosContablesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AsientosContablesRow
        Inherits DataRow
        
        Private tableAsientosContables As AsientosContablesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAsientosContables = CType(Me.Table,AsientosContablesDataTable)
        End Sub
        
        Public Property NumAsiento As Long
            Get
                Return CType(Me(Me.tableAsientosContables.NumAsientoColumn),Long)
            End Get
            Set
                Me(Me.tableAsientosContables.NumAsientoColumn) = value
            End Set
        End Property
        
        Public Property Fecha As Date
            Get
                Return CType(Me(Me.tableAsientosContables.FechaColumn),Date)
            End Get
            Set
                Me(Me.tableAsientosContables.FechaColumn) = value
            End Set
        End Property
        
        Public Property NumDoc As Decimal
            Get
                Return CType(Me(Me.tableAsientosContables.NumDocColumn),Decimal)
            End Get
            Set
                Me(Me.tableAsientosContables.NumDocColumn) = value
            End Set
        End Property
        
        Public Property Beneficiario As String
            Get
                Return CType(Me(Me.tableAsientosContables.BeneficiarioColumn),String)
            End Get
            Set
                Me(Me.tableAsientosContables.BeneficiarioColumn) = value
            End Set
        End Property
        
        Public Property TipoDoc As Integer
            Get
                Return CType(Me(Me.tableAsientosContables.TipoDocColumn),Integer)
            End Get
            Set
                Me(Me.tableAsientosContables.TipoDocColumn) = value
            End Set
        End Property
        
        Public Property Accion As String
            Get
                Return CType(Me(Me.tableAsientosContables.AccionColumn),String)
            End Get
            Set
                Me(Me.tableAsientosContables.AccionColumn) = value
            End Set
        End Property
        
        Public Property Anulado As Boolean
            Get
                Return CType(Me(Me.tableAsientosContables.AnuladoColumn),Boolean)
            End Get
            Set
                Me(Me.tableAsientosContables.AnuladoColumn) = value
            End Set
        End Property
        
        Public Property FechaEntrada As Date
            Get
                Return CType(Me(Me.tableAsientosContables.FechaEntradaColumn),Date)
            End Get
            Set
                Me(Me.tableAsientosContables.FechaEntradaColumn) = value
            End Set
        End Property
        
        Public Property Mayorizado As Boolean
            Get
                Return CType(Me(Me.tableAsientosContables.MayorizadoColumn),Boolean)
            End Get
            Set
                Me(Me.tableAsientosContables.MayorizadoColumn) = value
            End Set
        End Property
        
        Public Property Periodo As String
            Get
                Return CType(Me(Me.tableAsientosContables.PeriodoColumn),String)
            End Get
            Set
                Me(Me.tableAsientosContables.PeriodoColumn) = value
            End Set
        End Property
        
        Public Property NumMayorizado As Decimal
            Get
                Return CType(Me(Me.tableAsientosContables.NumMayorizadoColumn),Decimal)
            End Get
            Set
                Me(Me.tableAsientosContables.NumMayorizadoColumn) = value
            End Set
        End Property
        
        Public Property Modulo As String
            Get
                Return CType(Me(Me.tableAsientosContables.ModuloColumn),String)
            End Get
            Set
                Me(Me.tableAsientosContables.ModuloColumn) = value
            End Set
        End Property
        
        Public Property Observaciones As String
            Get
                Return CType(Me(Me.tableAsientosContables.ObservacionesColumn),String)
            End Get
            Set
                Me(Me.tableAsientosContables.ObservacionesColumn) = value
            End Set
        End Property
        

        Public Property NombreUsuario As String
            Get
                Return CType(Me(Me.tableAsientosContables.NombreUsuarioColumn),String)
            End Get
            Set
                Me(Me.tableAsientosContables.NombreUsuarioColumn) = value
            End Set
        End Property
        
        Public Property TotalDebe As Double
            Get
                Return CType(Me(Me.tableAsientosContables.TotalDebeColumn),Double)
            End Get
            Set
                Me(Me.tableAsientosContables.TotalDebeColumn) = value
            End Set
        End Property
        
        Public Property TotalHaber As Double
            Get
                Return CType(Me(Me.tableAsientosContables.TotalHaberColumn),Double)
            End Get
            Set
                Me(Me.tableAsientosContables.TotalHaberColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AsientosContablesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AsientosContablesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AsientosContablesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AsientosContablesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
