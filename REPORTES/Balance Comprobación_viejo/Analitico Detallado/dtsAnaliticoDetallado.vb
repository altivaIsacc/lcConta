'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dtsAnaliticoDetallado
    Inherits DataSet
    
    Private tableTemporalAnaliticoDetallado As TemporalAnaliticoDetalladoDataTable
    
    Private tableMoneda As MonedaDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("TemporalAnaliticoDetallado")) Is Nothing) Then
                Me.Tables.Add(New TemporalAnaliticoDetalladoDataTable(ds.Tables("TemporalAnaliticoDetallado")))
            End If
            If (Not (ds.Tables("Moneda")) Is Nothing) Then
                Me.Tables.Add(New MonedaDataTable(ds.Tables("Moneda")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TemporalAnaliticoDetallado As TemporalAnaliticoDetalladoDataTable
        Get
            Return Me.tableTemporalAnaliticoDetallado
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Moneda As MonedaDataTable
        Get
            Return Me.tableMoneda
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dtsAnaliticoDetallado = CType(MyBase.Clone,dtsAnaliticoDetallado)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("TemporalAnaliticoDetallado")) Is Nothing) Then
            Me.Tables.Add(New TemporalAnaliticoDetalladoDataTable(ds.Tables("TemporalAnaliticoDetallado")))
        End If
        If (Not (ds.Tables("Moneda")) Is Nothing) Then
            Me.Tables.Add(New MonedaDataTable(ds.Tables("Moneda")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableTemporalAnaliticoDetallado = CType(Me.Tables("TemporalAnaliticoDetallado"),TemporalAnaliticoDetalladoDataTable)
        If (Not (Me.tableTemporalAnaliticoDetallado) Is Nothing) Then
            Me.tableTemporalAnaliticoDetallado.InitVars
        End If
        Me.tableMoneda = CType(Me.Tables("Moneda"),MonedaDataTable)
        If (Not (Me.tableMoneda) Is Nothing) Then
            Me.tableMoneda.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dtsAnaliticoDetallado"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/dtsAnaliticoDetallado.xsd"
        Me.Locale = New System.Globalization.CultureInfo("es-ES")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableTemporalAnaliticoDetallado = New TemporalAnaliticoDetalladoDataTable
        Me.Tables.Add(Me.tableTemporalAnaliticoDetallado)
        Me.tableMoneda = New MonedaDataTable
        Me.Tables.Add(Me.tableMoneda)
    End Sub
    
    Private Function ShouldSerializeTemporalAnaliticoDetallado() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeMoneda() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub TemporalAnaliticoDetalladoRowChangeEventHandler(ByVal sender As Object, ByVal e As TemporalAnaliticoDetalladoRowChangeEvent)
    
    Public Delegate Sub MonedaRowChangeEventHandler(ByVal sender As Object, ByVal e As MonedaRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TemporalAnaliticoDetalladoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFecha As DataColumn
        
        Private columnNumAsiento As DataColumn
        
        Private columnMoneda As DataColumn
        
        Private columnTipoCambio As DataColumn
        
        Private columnObservaciones As DataColumn
        
        Private columnTipoDoc As DataColumn
        
        Private columnNumDoc As DataColumn
        
        Private columnDebitos As DataColumn
        
        Private columnCreditos As DataColumn
        
        Private columnSaldoAnterior As DataColumn
        
        Private columnSaldoActual As DataColumn
        
        Private columnCuentaContable As DataColumn
        
        Private columnNombreCuenta As DataColumn
        
        Private columnBeneficiario As DataColumn
        
        Friend Sub New()
            MyBase.New("TemporalAnaliticoDetallado")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property FechaColumn As DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        Friend ReadOnly Property NumAsientoColumn As DataColumn
            Get
                Return Me.columnNumAsiento
            End Get
        End Property
        
        Friend ReadOnly Property MonedaColumn As DataColumn
            Get
                Return Me.columnMoneda
            End Get
        End Property
        
        Friend ReadOnly Property TipoCambioColumn As DataColumn
            Get
                Return Me.columnTipoCambio
            End Get
        End Property
        
        Friend ReadOnly Property ObservacionesColumn As DataColumn
            Get
                Return Me.columnObservaciones
            End Get
        End Property
        
        Friend ReadOnly Property TipoDocColumn As DataColumn
            Get
                Return Me.columnTipoDoc
            End Get
        End Property
        
        Friend ReadOnly Property NumDocColumn As DataColumn
            Get
                Return Me.columnNumDoc
            End Get
        End Property
        
        Friend ReadOnly Property DebitosColumn As DataColumn
            Get
                Return Me.columnDebitos
            End Get
        End Property
        
        Friend ReadOnly Property CreditosColumn As DataColumn
            Get
                Return Me.columnCreditos
            End Get
        End Property
        
        Friend ReadOnly Property SaldoAnteriorColumn As DataColumn
            Get
                Return Me.columnSaldoAnterior
            End Get
        End Property
        
        Friend ReadOnly Property SaldoActualColumn As DataColumn
            Get
                Return Me.columnSaldoActual
            End Get
        End Property
        
        Friend ReadOnly Property CuentaContableColumn As DataColumn
            Get
                Return Me.columnCuentaContable
            End Get
        End Property
        
        Friend ReadOnly Property NombreCuentaColumn As DataColumn
            Get
                Return Me.columnNombreCuenta
            End Get
        End Property
        
        Friend ReadOnly Property BeneficiarioColumn As DataColumn
            Get
                Return Me.columnBeneficiario
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TemporalAnaliticoDetalladoRow
            Get
                Return CType(Me.Rows(index),TemporalAnaliticoDetalladoRow)
            End Get
        End Property
        
        Public Event TemporalAnaliticoDetalladoRowChanged As TemporalAnaliticoDetalladoRowChangeEventHandler
        
        Public Event TemporalAnaliticoDetalladoRowChanging As TemporalAnaliticoDetalladoRowChangeEventHandler
        
        Public Event TemporalAnaliticoDetalladoRowDeleted As TemporalAnaliticoDetalladoRowChangeEventHandler
        
        Public Event TemporalAnaliticoDetalladoRowDeleting As TemporalAnaliticoDetalladoRowChangeEventHandler
        
        Public Overloads Sub AddTemporalAnaliticoDetalladoRow(ByVal row As TemporalAnaliticoDetalladoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTemporalAnaliticoDetalladoRow(ByVal Fecha As Date, ByVal NumAsiento As String, ByVal Moneda As Integer, ByVal TipoCambio As Double, ByVal Observaciones As String, ByVal TipoDoc As Integer, ByVal NumDoc As String, ByVal Debitos As Double, ByVal Creditos As Double, ByVal SaldoAnterior As Double, ByVal SaldoActual As Double, ByVal CuentaContable As String, ByVal NombreCuenta As String, ByVal Beneficiario As String) As TemporalAnaliticoDetalladoRow
            Dim rowTemporalAnaliticoDetalladoRow As TemporalAnaliticoDetalladoRow = CType(Me.NewRow,TemporalAnaliticoDetalladoRow)
            rowTemporalAnaliticoDetalladoRow.ItemArray = New Object() {Fecha, NumAsiento, Moneda, TipoCambio, Observaciones, TipoDoc, NumDoc, Debitos, Creditos, SaldoAnterior, SaldoActual, CuentaContable, NombreCuenta, Beneficiario}
            Me.Rows.Add(rowTemporalAnaliticoDetalladoRow)
            Return rowTemporalAnaliticoDetalladoRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TemporalAnaliticoDetalladoDataTable = CType(MyBase.Clone,TemporalAnaliticoDetalladoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TemporalAnaliticoDetalladoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnFecha = Me.Columns("Fecha")
            Me.columnNumAsiento = Me.Columns("NumAsiento")
            Me.columnMoneda = Me.Columns("Moneda")
            Me.columnTipoCambio = Me.Columns("TipoCambio")
            Me.columnObservaciones = Me.Columns("Observaciones")
            Me.columnTipoDoc = Me.Columns("TipoDoc")
            Me.columnNumDoc = Me.Columns("NumDoc")
            Me.columnDebitos = Me.Columns("Debitos")
            Me.columnCreditos = Me.Columns("Creditos")
            Me.columnSaldoAnterior = Me.Columns("SaldoAnterior")
            Me.columnSaldoActual = Me.Columns("SaldoActual")
            Me.columnCuentaContable = Me.Columns("CuentaContable")
            Me.columnNombreCuenta = Me.Columns("NombreCuenta")
            Me.columnBeneficiario = Me.Columns("Beneficiario")
        End Sub
        
        Private Sub InitClass()
            Me.columnFecha = New DataColumn("Fecha", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha)
            Me.columnNumAsiento = New DataColumn("NumAsiento", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNumAsiento)
            Me.columnMoneda = New DataColumn("Moneda", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMoneda)
            Me.columnTipoCambio = New DataColumn("TipoCambio", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipoCambio)
            Me.columnObservaciones = New DataColumn("Observaciones", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnObservaciones)
            Me.columnTipoDoc = New DataColumn("TipoDoc", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipoDoc)
            Me.columnNumDoc = New DataColumn("NumDoc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNumDoc)
            Me.columnDebitos = New DataColumn("Debitos", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDebitos)
            Me.columnCreditos = New DataColumn("Creditos", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCreditos)
            Me.columnSaldoAnterior = New DataColumn("SaldoAnterior", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldoAnterior)
            Me.columnSaldoActual = New DataColumn("SaldoActual", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldoActual)
            Me.columnCuentaContable = New DataColumn("CuentaContable", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuentaContable)
            Me.columnNombreCuenta = New DataColumn("NombreCuenta", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombreCuenta)
            Me.columnBeneficiario = New DataColumn("Beneficiario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBeneficiario)
            Me.columnFecha.AllowDBNull = false
            Me.columnNumAsiento.AllowDBNull = false
            Me.columnMoneda.AllowDBNull = false
            Me.columnTipoCambio.AllowDBNull = false
            Me.columnObservaciones.AllowDBNull = false
            Me.columnTipoDoc.AllowDBNull = false
            Me.columnNumDoc.AllowDBNull = false
            Me.columnDebitos.AllowDBNull = false
            Me.columnCreditos.AllowDBNull = false
            Me.columnSaldoAnterior.AllowDBNull = false
            Me.columnSaldoActual.AllowDBNull = false
            Me.columnCuentaContable.AllowDBNull = false
            Me.columnNombreCuenta.AllowDBNull = false
            Me.columnBeneficiario.AllowDBNull = false
        End Sub
        
        Public Function NewTemporalAnaliticoDetalladoRow() As TemporalAnaliticoDetalladoRow
            Return CType(Me.NewRow,TemporalAnaliticoDetalladoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TemporalAnaliticoDetalladoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TemporalAnaliticoDetalladoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TemporalAnaliticoDetalladoRowChangedEvent) Is Nothing) Then
                RaiseEvent TemporalAnaliticoDetalladoRowChanged(Me, New TemporalAnaliticoDetalladoRowChangeEvent(CType(e.Row,TemporalAnaliticoDetalladoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TemporalAnaliticoDetalladoRowChangingEvent) Is Nothing) Then
                RaiseEvent TemporalAnaliticoDetalladoRowChanging(Me, New TemporalAnaliticoDetalladoRowChangeEvent(CType(e.Row,TemporalAnaliticoDetalladoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TemporalAnaliticoDetalladoRowDeletedEvent) Is Nothing) Then
                RaiseEvent TemporalAnaliticoDetalladoRowDeleted(Me, New TemporalAnaliticoDetalladoRowChangeEvent(CType(e.Row,TemporalAnaliticoDetalladoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TemporalAnaliticoDetalladoRowDeletingEvent) Is Nothing) Then
                RaiseEvent TemporalAnaliticoDetalladoRowDeleting(Me, New TemporalAnaliticoDetalladoRowChangeEvent(CType(e.Row,TemporalAnaliticoDetalladoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTemporalAnaliticoDetalladoRow(ByVal row As TemporalAnaliticoDetalladoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TemporalAnaliticoDetalladoRow
        Inherits DataRow
        
        Private tableTemporalAnaliticoDetallado As TemporalAnaliticoDetalladoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTemporalAnaliticoDetallado = CType(Me.Table,TemporalAnaliticoDetalladoDataTable)
        End Sub
        
        Public Property Fecha As Date
            Get
                Return CType(Me(Me.tableTemporalAnaliticoDetallado.FechaColumn),Date)
            End Get
            Set
                Me(Me.tableTemporalAnaliticoDetallado.FechaColumn) = value
            End Set
        End Property
        
        Public Property NumAsiento As String
            Get
                Return CType(Me(Me.tableTemporalAnaliticoDetallado.NumAsientoColumn),String)
            End Get
            Set
                Me(Me.tableTemporalAnaliticoDetallado.NumAsientoColumn) = value
            End Set
        End Property
        
        Public Property Moneda As Integer
            Get
                Return CType(Me(Me.tableTemporalAnaliticoDetallado.MonedaColumn),Integer)
            End Get
            Set
                Me(Me.tableTemporalAnaliticoDetallado.MonedaColumn) = value
            End Set
        End Property
        
        Public Property TipoCambio As Double
            Get
                Return CType(Me(Me.tableTemporalAnaliticoDetallado.TipoCambioColumn),Double)
            End Get
            Set
                Me(Me.tableTemporalAnaliticoDetallado.TipoCambioColumn) = value
            End Set
        End Property
        
        Public Property Observaciones As String
            Get
                Return CType(Me(Me.tableTemporalAnaliticoDetallado.ObservacionesColumn),String)
            End Get
            Set
                Me(Me.tableTemporalAnaliticoDetallado.ObservacionesColumn) = value
            End Set
        End Property
        
        Public Property TipoDoc As Integer
            Get
                Return CType(Me(Me.tableTemporalAnaliticoDetallado.TipoDocColumn),Integer)
            End Get
            Set
                Me(Me.tableTemporalAnaliticoDetallado.TipoDocColumn) = value
            End Set
        End Property
        
        Public Property NumDoc As String
            Get
                Return CType(Me(Me.tableTemporalAnaliticoDetallado.NumDocColumn),String)
            End Get
            Set
                Me(Me.tableTemporalAnaliticoDetallado.NumDocColumn) = value
            End Set
        End Property
        
        Public Property Debitos As Double
            Get
                Return CType(Me(Me.tableTemporalAnaliticoDetallado.DebitosColumn),Double)
            End Get
            Set
                Me(Me.tableTemporalAnaliticoDetallado.DebitosColumn) = value
            End Set
        End Property
        
        Public Property Creditos As Double
            Get
                Return CType(Me(Me.tableTemporalAnaliticoDetallado.CreditosColumn),Double)
            End Get
            Set
                Me(Me.tableTemporalAnaliticoDetallado.CreditosColumn) = value
            End Set
        End Property
        
        Public Property SaldoAnterior As Double
            Get
                Return CType(Me(Me.tableTemporalAnaliticoDetallado.SaldoAnteriorColumn),Double)
            End Get
            Set
                Me(Me.tableTemporalAnaliticoDetallado.SaldoAnteriorColumn) = value
            End Set
        End Property
        
        Public Property SaldoActual As Double
            Get
                Return CType(Me(Me.tableTemporalAnaliticoDetallado.SaldoActualColumn),Double)
            End Get
            Set
                Me(Me.tableTemporalAnaliticoDetallado.SaldoActualColumn) = value
            End Set
        End Property
        
        Public Property CuentaContable As String
            Get
                Return CType(Me(Me.tableTemporalAnaliticoDetallado.CuentaContableColumn),String)
            End Get
            Set
                Me(Me.tableTemporalAnaliticoDetallado.CuentaContableColumn) = value
            End Set
        End Property
        
        Public Property NombreCuenta As String
            Get
                Return CType(Me(Me.tableTemporalAnaliticoDetallado.NombreCuentaColumn),String)
            End Get
            Set
                Me(Me.tableTemporalAnaliticoDetallado.NombreCuentaColumn) = value
            End Set
        End Property
        
        Public Property Beneficiario As String
            Get
                Return CType(Me(Me.tableTemporalAnaliticoDetallado.BeneficiarioColumn),String)
            End Get
            Set
                Me(Me.tableTemporalAnaliticoDetallado.BeneficiarioColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TemporalAnaliticoDetalladoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TemporalAnaliticoDetalladoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TemporalAnaliticoDetalladoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TemporalAnaliticoDetalladoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MonedaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCodMoneda As DataColumn
        
        Private columnMonedaNombre As DataColumn
        
        Private columnValorCompra As DataColumn
        
        Private columnValorVenta As DataColumn
        
        Private columnSimbolo As DataColumn
        
        Private columnCuentaContable As DataColumn
        
        Friend Sub New()
            MyBase.New("Moneda")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CodMonedaColumn As DataColumn
            Get
                Return Me.columnCodMoneda
            End Get
        End Property
        
        Friend ReadOnly Property MonedaNombreColumn As DataColumn
            Get
                Return Me.columnMonedaNombre
            End Get
        End Property
        
        Friend ReadOnly Property ValorCompraColumn As DataColumn
            Get
                Return Me.columnValorCompra
            End Get
        End Property
        
        Friend ReadOnly Property ValorVentaColumn As DataColumn
            Get
                Return Me.columnValorVenta
            End Get
        End Property
        
        Friend ReadOnly Property SimboloColumn As DataColumn
            Get
                Return Me.columnSimbolo
            End Get
        End Property
        
        Friend ReadOnly Property CuentaContableColumn As DataColumn
            Get
                Return Me.columnCuentaContable
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MonedaRow
            Get
                Return CType(Me.Rows(index),MonedaRow)
            End Get
        End Property
        
        Public Event MonedaRowChanged As MonedaRowChangeEventHandler
        
        Public Event MonedaRowChanging As MonedaRowChangeEventHandler
        
        Public Event MonedaRowDeleted As MonedaRowChangeEventHandler
        
        Public Event MonedaRowDeleting As MonedaRowChangeEventHandler
        
        Public Overloads Sub AddMonedaRow(ByVal row As MonedaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMonedaRow(ByVal CodMoneda As Integer, ByVal MonedaNombre As String, ByVal ValorCompra As Double, ByVal ValorVenta As Double, ByVal Simbolo As String, ByVal CuentaContable As String) As MonedaRow
            Dim rowMonedaRow As MonedaRow = CType(Me.NewRow,MonedaRow)
            rowMonedaRow.ItemArray = New Object() {CodMoneda, MonedaNombre, ValorCompra, ValorVenta, Simbolo, CuentaContable}
            Me.Rows.Add(rowMonedaRow)
            Return rowMonedaRow
        End Function
        
        Public Function FindByCodMoneda(ByVal CodMoneda As Integer) As MonedaRow
            Return CType(Me.Rows.Find(New Object() {CodMoneda}),MonedaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MonedaDataTable = CType(MyBase.Clone,MonedaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MonedaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCodMoneda = Me.Columns("CodMoneda")
            Me.columnMonedaNombre = Me.Columns("MonedaNombre")
            Me.columnValorCompra = Me.Columns("ValorCompra")
            Me.columnValorVenta = Me.Columns("ValorVenta")
            Me.columnSimbolo = Me.Columns("Simbolo")
            Me.columnCuentaContable = Me.Columns("CuentaContable")
        End Sub
        
        Private Sub InitClass()
            Me.columnCodMoneda = New DataColumn("CodMoneda", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodMoneda)
            Me.columnMonedaNombre = New DataColumn("MonedaNombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonedaNombre)
            Me.columnValorCompra = New DataColumn("ValorCompra", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValorCompra)
            Me.columnValorVenta = New DataColumn("ValorVenta", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValorVenta)
            Me.columnSimbolo = New DataColumn("Simbolo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSimbolo)
            Me.columnCuentaContable = New DataColumn("CuentaContable", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuentaContable)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCodMoneda}, true))
            Me.columnCodMoneda.AllowDBNull = false
            Me.columnCodMoneda.Unique = true
            Me.columnMonedaNombre.AllowDBNull = false
            Me.columnValorCompra.AllowDBNull = false
            Me.columnValorVenta.AllowDBNull = false
            Me.columnSimbolo.AllowDBNull = false
            Me.columnCuentaContable.AllowDBNull = false
        End Sub
        
        Public Function NewMonedaRow() As MonedaRow
            Return CType(Me.NewRow,MonedaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MonedaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MonedaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MonedaRowChangedEvent) Is Nothing) Then
                RaiseEvent MonedaRowChanged(Me, New MonedaRowChangeEvent(CType(e.Row,MonedaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MonedaRowChangingEvent) Is Nothing) Then
                RaiseEvent MonedaRowChanging(Me, New MonedaRowChangeEvent(CType(e.Row,MonedaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MonedaRowDeletedEvent) Is Nothing) Then
                RaiseEvent MonedaRowDeleted(Me, New MonedaRowChangeEvent(CType(e.Row,MonedaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MonedaRowDeletingEvent) Is Nothing) Then
                RaiseEvent MonedaRowDeleting(Me, New MonedaRowChangeEvent(CType(e.Row,MonedaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMonedaRow(ByVal row As MonedaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MonedaRow
        Inherits DataRow
        
        Private tableMoneda As MonedaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMoneda = CType(Me.Table,MonedaDataTable)
        End Sub
        
        Public Property CodMoneda As Integer
            Get
                Return CType(Me(Me.tableMoneda.CodMonedaColumn),Integer)
            End Get
            Set
                Me(Me.tableMoneda.CodMonedaColumn) = value
            End Set
        End Property
        
        Public Property MonedaNombre As String
            Get
                Return CType(Me(Me.tableMoneda.MonedaNombreColumn),String)
            End Get
            Set
                Me(Me.tableMoneda.MonedaNombreColumn) = value
            End Set
        End Property
        
        Public Property ValorCompra As Double
            Get
                Return CType(Me(Me.tableMoneda.ValorCompraColumn),Double)
            End Get
            Set
                Me(Me.tableMoneda.ValorCompraColumn) = value
            End Set
        End Property
        
        Public Property ValorVenta As Double
            Get
                Return CType(Me(Me.tableMoneda.ValorVentaColumn),Double)
            End Get
            Set
                Me(Me.tableMoneda.ValorVentaColumn) = value
            End Set
        End Property
        
        Public Property Simbolo As String
            Get
                Return CType(Me(Me.tableMoneda.SimboloColumn),String)
            End Get
            Set
                Me(Me.tableMoneda.SimboloColumn) = value
            End Set
        End Property
        
        Public Property CuentaContable As String
            Get
                Return CType(Me(Me.tableMoneda.CuentaContableColumn),String)
            End Get
            Set
                Me(Me.tableMoneda.CuentaContableColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MonedaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MonedaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MonedaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MonedaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
