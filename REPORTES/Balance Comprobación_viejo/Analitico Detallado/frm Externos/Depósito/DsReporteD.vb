'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2470
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DsReporteD
    Inherits DataSet
    
    Private tableCuentas_bancarias As Cuentas_bancariasDataTable
    
    Private tableBancos As BancosDataTable
    
    Private tableCliente As ClienteDataTable
    
    Private tablePagoDep As PagoDepDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Cuentas_bancarias")) Is Nothing) Then
                Me.Tables.Add(New Cuentas_bancariasDataTable(ds.Tables("Cuentas_bancarias")))
            End If
            If (Not (ds.Tables("Bancos")) Is Nothing) Then
                Me.Tables.Add(New BancosDataTable(ds.Tables("Bancos")))
            End If
            If (Not (ds.Tables("Cliente")) Is Nothing) Then
                Me.Tables.Add(New ClienteDataTable(ds.Tables("Cliente")))
            End If
            If (Not (ds.Tables("PagoDep")) Is Nothing) Then
                Me.Tables.Add(New PagoDepDataTable(ds.Tables("PagoDep")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Cuentas_bancarias As Cuentas_bancariasDataTable
        Get
            Return Me.tableCuentas_bancarias
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Bancos As BancosDataTable
        Get
            Return Me.tableBancos
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Cliente As ClienteDataTable
        Get
            Return Me.tableCliente
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PagoDep As PagoDepDataTable
        Get
            Return Me.tablePagoDep
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DsReporteD = CType(MyBase.Clone,DsReporteD)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Cuentas_bancarias")) Is Nothing) Then
            Me.Tables.Add(New Cuentas_bancariasDataTable(ds.Tables("Cuentas_bancarias")))
        End If
        If (Not (ds.Tables("Bancos")) Is Nothing) Then
            Me.Tables.Add(New BancosDataTable(ds.Tables("Bancos")))
        End If
        If (Not (ds.Tables("Cliente")) Is Nothing) Then
            Me.Tables.Add(New ClienteDataTable(ds.Tables("Cliente")))
        End If
        If (Not (ds.Tables("PagoDep")) Is Nothing) Then
            Me.Tables.Add(New PagoDepDataTable(ds.Tables("PagoDep")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableCuentas_bancarias = CType(Me.Tables("Cuentas_bancarias"),Cuentas_bancariasDataTable)
        If (Not (Me.tableCuentas_bancarias) Is Nothing) Then
            Me.tableCuentas_bancarias.InitVars
        End If
        Me.tableBancos = CType(Me.Tables("Bancos"),BancosDataTable)
        If (Not (Me.tableBancos) Is Nothing) Then
            Me.tableBancos.InitVars
        End If
        Me.tableCliente = CType(Me.Tables("Cliente"),ClienteDataTable)
        If (Not (Me.tableCliente) Is Nothing) Then
            Me.tableCliente.InitVars
        End If
        Me.tablePagoDep = CType(Me.Tables("PagoDep"),PagoDepDataTable)
        If (Not (Me.tablePagoDep) Is Nothing) Then
            Me.tablePagoDep.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DsReporteD"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DsReporteD.xsd"
        Me.Locale = New System.Globalization.CultureInfo("es-CR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableCuentas_bancarias = New Cuentas_bancariasDataTable
        Me.Tables.Add(Me.tableCuentas_bancarias)
        Me.tableBancos = New BancosDataTable
        Me.Tables.Add(Me.tableBancos)
        Me.tableCliente = New ClienteDataTable
        Me.Tables.Add(Me.tableCliente)
        Me.tablePagoDep = New PagoDepDataTable
        Me.Tables.Add(Me.tablePagoDep)
    End Sub
    
    Private Function ShouldSerializeCuentas_bancarias() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBancos() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCliente() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePagoDep() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub Cuentas_bancariasRowChangeEventHandler(ByVal sender As Object, ByVal e As Cuentas_bancariasRowChangeEvent)
    
    Public Delegate Sub BancosRowChangeEventHandler(ByVal sender As Object, ByVal e As BancosRowChangeEvent)
    
    Public Delegate Sub ClienteRowChangeEventHandler(ByVal sender As Object, ByVal e As ClienteRowChangeEvent)
    
    Public Delegate Sub PagoDepRowChangeEventHandler(ByVal sender As Object, ByVal e As PagoDepRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Cuentas_bancariasDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCuenta As DataColumn
        
        Private columnCodigo_banco As DataColumn
        
        Private columnNombreCuenta As DataColumn
        
        Private columnId_CuentaBancaria As DataColumn
        
        Private columnDescripcion As DataColumn
        
        Private columnMonedaNombre As DataColumn
        
        Private columnSaldo As DataColumn
        
        Private columntipoCuenta As DataColumn
        
        Friend Sub New()
            MyBase.New("Cuentas_bancarias")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CuentaColumn As DataColumn
            Get
                Return Me.columnCuenta
            End Get
        End Property
        
        Friend ReadOnly Property Codigo_bancoColumn As DataColumn
            Get
                Return Me.columnCodigo_banco
            End Get
        End Property
        
        Friend ReadOnly Property NombreCuentaColumn As DataColumn
            Get
                Return Me.columnNombreCuenta
            End Get
        End Property
        
        Friend ReadOnly Property Id_CuentaBancariaColumn As DataColumn
            Get
                Return Me.columnId_CuentaBancaria
            End Get
        End Property
        
        Friend ReadOnly Property DescripcionColumn As DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        Friend ReadOnly Property MonedaNombreColumn As DataColumn
            Get
                Return Me.columnMonedaNombre
            End Get
        End Property
        
        Friend ReadOnly Property SaldoColumn As DataColumn
            Get
                Return Me.columnSaldo
            End Get
        End Property
        
        Friend ReadOnly Property tipoCuentaColumn As DataColumn
            Get
                Return Me.columntipoCuenta
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Cuentas_bancariasRow
            Get
                Return CType(Me.Rows(index),Cuentas_bancariasRow)
            End Get
        End Property
        
        Public Event Cuentas_bancariasRowChanged As Cuentas_bancariasRowChangeEventHandler
        
        Public Event Cuentas_bancariasRowChanging As Cuentas_bancariasRowChangeEventHandler
        
        Public Event Cuentas_bancariasRowDeleted As Cuentas_bancariasRowChangeEventHandler
        
        Public Event Cuentas_bancariasRowDeleting As Cuentas_bancariasRowChangeEventHandler
        
        Public Overloads Sub AddCuentas_bancariasRow(ByVal row As Cuentas_bancariasRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCuentas_bancariasRow(ByVal Cuenta As String, ByVal Codigo_banco As Long, ByVal NombreCuenta As String, ByVal Descripcion As String, ByVal MonedaNombre As String, ByVal Saldo As Double, ByVal tipoCuenta As String) As Cuentas_bancariasRow
            Dim rowCuentas_bancariasRow As Cuentas_bancariasRow = CType(Me.NewRow,Cuentas_bancariasRow)
            rowCuentas_bancariasRow.ItemArray = New Object() {Cuenta, Codigo_banco, NombreCuenta, Nothing, Descripcion, MonedaNombre, Saldo, tipoCuenta}
            Me.Rows.Add(rowCuentas_bancariasRow)
            Return rowCuentas_bancariasRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Cuentas_bancariasDataTable = CType(MyBase.Clone,Cuentas_bancariasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Cuentas_bancariasDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCuenta = Me.Columns("Cuenta")
            Me.columnCodigo_banco = Me.Columns("Codigo_banco")
            Me.columnNombreCuenta = Me.Columns("NombreCuenta")
            Me.columnId_CuentaBancaria = Me.Columns("Id_CuentaBancaria")
            Me.columnDescripcion = Me.Columns("Descripcion")
            Me.columnMonedaNombre = Me.Columns("MonedaNombre")
            Me.columnSaldo = Me.Columns("Saldo")
            Me.columntipoCuenta = Me.Columns("tipoCuenta")
        End Sub
        
        Private Sub InitClass()
            Me.columnCuenta = New DataColumn("Cuenta", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuenta)
            Me.columnCodigo_banco = New DataColumn("Codigo_banco", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodigo_banco)
            Me.columnNombreCuenta = New DataColumn("NombreCuenta", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombreCuenta)
            Me.columnId_CuentaBancaria = New DataColumn("Id_CuentaBancaria", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_CuentaBancaria)
            Me.columnDescripcion = New DataColumn("Descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcion)
            Me.columnMonedaNombre = New DataColumn("MonedaNombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonedaNombre)
            Me.columnSaldo = New DataColumn("Saldo", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldo)
            Me.columntipoCuenta = New DataColumn("tipoCuenta", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntipoCuenta)
            Me.columnCuenta.AllowDBNull = false
            Me.columnCodigo_banco.AllowDBNull = false
            Me.columnNombreCuenta.AllowDBNull = false
            Me.columnId_CuentaBancaria.AutoIncrement = true
            Me.columnId_CuentaBancaria.AllowDBNull = false
            Me.columnId_CuentaBancaria.ReadOnly = true
            Me.columnDescripcion.AllowDBNull = false
            Me.columnMonedaNombre.AllowDBNull = false
            Me.columnSaldo.ReadOnly = true
            Me.columntipoCuenta.AllowDBNull = false
        End Sub
        
        Public Function NewCuentas_bancariasRow() As Cuentas_bancariasRow
            Return CType(Me.NewRow,Cuentas_bancariasRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Cuentas_bancariasRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Cuentas_bancariasRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Cuentas_bancariasRowChangedEvent) Is Nothing) Then
                RaiseEvent Cuentas_bancariasRowChanged(Me, New Cuentas_bancariasRowChangeEvent(CType(e.Row,Cuentas_bancariasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Cuentas_bancariasRowChangingEvent) Is Nothing) Then
                RaiseEvent Cuentas_bancariasRowChanging(Me, New Cuentas_bancariasRowChangeEvent(CType(e.Row,Cuentas_bancariasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Cuentas_bancariasRowDeletedEvent) Is Nothing) Then
                RaiseEvent Cuentas_bancariasRowDeleted(Me, New Cuentas_bancariasRowChangeEvent(CType(e.Row,Cuentas_bancariasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Cuentas_bancariasRowDeletingEvent) Is Nothing) Then
                RaiseEvent Cuentas_bancariasRowDeleting(Me, New Cuentas_bancariasRowChangeEvent(CType(e.Row,Cuentas_bancariasRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCuentas_bancariasRow(ByVal row As Cuentas_bancariasRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Cuentas_bancariasRow
        Inherits DataRow
        
        Private tableCuentas_bancarias As Cuentas_bancariasDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCuentas_bancarias = CType(Me.Table,Cuentas_bancariasDataTable)
        End Sub
        
        Public Property Cuenta As String
            Get
                Return CType(Me(Me.tableCuentas_bancarias.CuentaColumn),String)
            End Get
            Set
                Me(Me.tableCuentas_bancarias.CuentaColumn) = value
            End Set
        End Property
        
        Public Property Codigo_banco As Long
            Get
                Return CType(Me(Me.tableCuentas_bancarias.Codigo_bancoColumn),Long)
            End Get
            Set
                Me(Me.tableCuentas_bancarias.Codigo_bancoColumn) = value
            End Set
        End Property
        
        Public Property NombreCuenta As String
            Get
                Return CType(Me(Me.tableCuentas_bancarias.NombreCuentaColumn),String)
            End Get
            Set
                Me(Me.tableCuentas_bancarias.NombreCuentaColumn) = value
            End Set
        End Property
        
        Public Property Id_CuentaBancaria As Integer
            Get
                Return CType(Me(Me.tableCuentas_bancarias.Id_CuentaBancariaColumn),Integer)
            End Get
            Set
                Me(Me.tableCuentas_bancarias.Id_CuentaBancariaColumn) = value
            End Set
        End Property
        
        Public Property Descripcion As String
            Get
                Return CType(Me(Me.tableCuentas_bancarias.DescripcionColumn),String)
            End Get
            Set
                Me(Me.tableCuentas_bancarias.DescripcionColumn) = value
            End Set
        End Property
        
        Public Property MonedaNombre As String
            Get
                Return CType(Me(Me.tableCuentas_bancarias.MonedaNombreColumn),String)
            End Get
            Set
                Me(Me.tableCuentas_bancarias.MonedaNombreColumn) = value
            End Set
        End Property
        
        Public Property Saldo As Double
            Get
                Try 
                    Return CType(Me(Me.tableCuentas_bancarias.SaldoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCuentas_bancarias.SaldoColumn) = value
            End Set
        End Property
        
        Public Property tipoCuenta As String
            Get
                Return CType(Me(Me.tableCuentas_bancarias.tipoCuentaColumn),String)
            End Get
            Set
                Me(Me.tableCuentas_bancarias.tipoCuentaColumn) = value
            End Set
        End Property
        
        Public Function IsSaldoNull() As Boolean
            Return Me.IsNull(Me.tableCuentas_bancarias.SaldoColumn)
        End Function
        
        Public Sub SetSaldoNull()
            Me(Me.tableCuentas_bancarias.SaldoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Cuentas_bancariasRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Cuentas_bancariasRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Cuentas_bancariasRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Cuentas_bancariasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BancosDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCodigo_banco As DataColumn
        
        Private columnDescripcion As DataColumn
        
        Friend Sub New()
            MyBase.New("Bancos")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Codigo_bancoColumn As DataColumn
            Get
                Return Me.columnCodigo_banco
            End Get
        End Property
        
        Friend ReadOnly Property DescripcionColumn As DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BancosRow
            Get
                Return CType(Me.Rows(index),BancosRow)
            End Get
        End Property
        
        Public Event BancosRowChanged As BancosRowChangeEventHandler
        
        Public Event BancosRowChanging As BancosRowChangeEventHandler
        
        Public Event BancosRowDeleted As BancosRowChangeEventHandler
        
        Public Event BancosRowDeleting As BancosRowChangeEventHandler
        
        Public Overloads Sub AddBancosRow(ByVal row As BancosRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBancosRow(ByVal Descripcion As String) As BancosRow
            Dim rowBancosRow As BancosRow = CType(Me.NewRow,BancosRow)
            rowBancosRow.ItemArray = New Object() {Nothing, Descripcion}
            Me.Rows.Add(rowBancosRow)
            Return rowBancosRow
        End Function
        
        Public Function FindByCodigo_banco(ByVal Codigo_banco As Long) As BancosRow
            Return CType(Me.Rows.Find(New Object() {Codigo_banco}),BancosRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BancosDataTable = CType(MyBase.Clone,BancosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BancosDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCodigo_banco = Me.Columns("Codigo_banco")
            Me.columnDescripcion = Me.Columns("Descripcion")
        End Sub
        
        Private Sub InitClass()
            Me.columnCodigo_banco = New DataColumn("Codigo_banco", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodigo_banco)
            Me.columnDescripcion = New DataColumn("Descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcion)
            Me.Constraints.Add(New UniqueConstraint("DsReporteDKey1", New DataColumn() {Me.columnCodigo_banco}, true))
            Me.columnCodigo_banco.AutoIncrement = true
            Me.columnCodigo_banco.AllowDBNull = false
            Me.columnCodigo_banco.ReadOnly = true
            Me.columnCodigo_banco.Unique = true
            Me.columnDescripcion.AllowDBNull = false
        End Sub
        
        Public Function NewBancosRow() As BancosRow
            Return CType(Me.NewRow,BancosRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BancosRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BancosRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BancosRowChangedEvent) Is Nothing) Then
                RaiseEvent BancosRowChanged(Me, New BancosRowChangeEvent(CType(e.Row,BancosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BancosRowChangingEvent) Is Nothing) Then
                RaiseEvent BancosRowChanging(Me, New BancosRowChangeEvent(CType(e.Row,BancosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BancosRowDeletedEvent) Is Nothing) Then
                RaiseEvent BancosRowDeleted(Me, New BancosRowChangeEvent(CType(e.Row,BancosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BancosRowDeletingEvent) Is Nothing) Then
                RaiseEvent BancosRowDeleting(Me, New BancosRowChangeEvent(CType(e.Row,BancosRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBancosRow(ByVal row As BancosRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BancosRow
        Inherits DataRow
        
        Private tableBancos As BancosDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBancos = CType(Me.Table,BancosDataTable)
        End Sub
        
        Public Property Codigo_banco As Long
            Get
                Return CType(Me(Me.tableBancos.Codigo_bancoColumn),Long)
            End Get
            Set
                Me(Me.tableBancos.Codigo_bancoColumn) = value
            End Set
        End Property
        
        Public Property Descripcion As String
            Get
                Return CType(Me(Me.tableBancos.DescripcionColumn),String)
            End Get
            Set
                Me(Me.tableBancos.DescripcionColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BancosRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BancosRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BancosRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BancosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ClienteDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnNombre As DataColumn
        
        Private columnObservaciones As DataColumn
        
        Private columnCedula As DataColumn
        
        Private columnAgencia As DataColumn
        
        Private columnContacto As DataColumn
        
        Private columnNacionalidad As DataColumn
        
        Private columnExento As DataColumn
        
        Private columnImpustoVentas As DataColumn
        
        Private columnCredito As DataColumn
        
        Private columnTelefono1 As DataColumn
        
        Private columnTelefono2 As DataColumn
        
        Private columnFax1 As DataColumn
        
        Private columnFax2 As DataColumn
        
        Private columnEmail As DataColumn
        
        Private columnDereccion As DataColumn
        
        Private columnLimite_Credito As DataColumn
        
        Private columnPlazo_Credito As DataColumn
        
        Private columnTipo_Precio As DataColumn
        
        Private columnUsuario As DataColumn
        
        Private columnRestriccion_Cuenta As DataColumn
        
        Private columnComicion As DataColumn
        
        Private columnCodMoneda As DataColumn
        
        Private columnCliente_Moroso As DataColumn
        
        Private columnNombreJuridico As DataColumn
        
        Private columnCodigoSeguridad As DataColumn
        
        Private columnNumeroTarjeta As DataColumn
        
        Private columnTipo As DataColumn
        
        Private columnVence As DataColumn
        
        Private columnId_Contrato As DataColumn
        
        Private columnContrato As DataColumn
        
        Private columnDesayunos As DataColumn
        
        Private columnTipoPrecio As DataColumn
        
        Private columnDescuento As DataColumn
        
        Private columnComisionServicios As DataColumn
        
        Private columnComisionPaquetes As DataColumn
        
        Private columnEsEmpleado As DataColumn
        
        Private columnId_Empleado As DataColumn
        
        Private columnEmpleado As DataColumn
        
        Private columnSaldoApartado As DataColumn
        
        Private columnSaldoCanjeReal As DataColumn
        
        Private columnIDInternet As DataColumn
        
        Private columnPassInternet As DataColumn
        
        Private columnTipoFac As DataColumn
        
        Private columnDiasFac As DataColumn
        
        Private columnDia1 As DataColumn
        
        Private columnDiaF1 As DataColumn
        
        Private columnpara1 As DataColumn
        
        Private columnDia2 As DataColumn
        
        Private columnDiaF2 As DataColumn
        
        Private columnpara2 As DataColumn
        
        Private columnId_Viejo As DataColumn
        
        Friend Sub New()
            MyBase.New("Cliente")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property NombreColumn As DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        Friend ReadOnly Property ObservacionesColumn As DataColumn
            Get
                Return Me.columnObservaciones
            End Get
        End Property
        
        Friend ReadOnly Property CedulaColumn As DataColumn
            Get
                Return Me.columnCedula
            End Get
        End Property
        
        Friend ReadOnly Property AgenciaColumn As DataColumn
            Get
                Return Me.columnAgencia
            End Get
        End Property
        
        Friend ReadOnly Property ContactoColumn As DataColumn
            Get
                Return Me.columnContacto
            End Get
        End Property
        
        Friend ReadOnly Property NacionalidadColumn As DataColumn
            Get
                Return Me.columnNacionalidad
            End Get
        End Property
        
        Friend ReadOnly Property ExentoColumn As DataColumn
            Get
                Return Me.columnExento
            End Get
        End Property
        
        Friend ReadOnly Property ImpustoVentasColumn As DataColumn
            Get
                Return Me.columnImpustoVentas
            End Get
        End Property
        
        Friend ReadOnly Property CreditoColumn As DataColumn
            Get
                Return Me.columnCredito
            End Get
        End Property
        
        Friend ReadOnly Property Telefono1Column As DataColumn
            Get
                Return Me.columnTelefono1
            End Get
        End Property
        
        Friend ReadOnly Property Telefono2Column As DataColumn
            Get
                Return Me.columnTelefono2
            End Get
        End Property
        
        Friend ReadOnly Property Fax1Column As DataColumn
            Get
                Return Me.columnFax1
            End Get
        End Property
        
        Friend ReadOnly Property Fax2Column As DataColumn
            Get
                Return Me.columnFax2
            End Get
        End Property
        
        Friend ReadOnly Property EmailColumn As DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        Friend ReadOnly Property DereccionColumn As DataColumn
            Get
                Return Me.columnDereccion
            End Get
        End Property
        
        Friend ReadOnly Property Limite_CreditoColumn As DataColumn
            Get
                Return Me.columnLimite_Credito
            End Get
        End Property
        
        Friend ReadOnly Property Plazo_CreditoColumn As DataColumn
            Get
                Return Me.columnPlazo_Credito
            End Get
        End Property
        
        Friend ReadOnly Property Tipo_PrecioColumn As DataColumn
            Get
                Return Me.columnTipo_Precio
            End Get
        End Property
        
        Friend ReadOnly Property UsuarioColumn As DataColumn
            Get
                Return Me.columnUsuario
            End Get
        End Property
        
        Friend ReadOnly Property Restriccion_CuentaColumn As DataColumn
            Get
                Return Me.columnRestriccion_Cuenta
            End Get
        End Property
        
        Friend ReadOnly Property ComicionColumn As DataColumn
            Get
                Return Me.columnComicion
            End Get
        End Property
        
        Friend ReadOnly Property CodMonedaColumn As DataColumn
            Get
                Return Me.columnCodMoneda
            End Get
        End Property
        
        Friend ReadOnly Property Cliente_MorosoColumn As DataColumn
            Get
                Return Me.columnCliente_Moroso
            End Get
        End Property
        
        Friend ReadOnly Property NombreJuridicoColumn As DataColumn
            Get
                Return Me.columnNombreJuridico
            End Get
        End Property
        
        Friend ReadOnly Property CodigoSeguridadColumn As DataColumn
            Get
                Return Me.columnCodigoSeguridad
            End Get
        End Property
        
        Friend ReadOnly Property NumeroTarjetaColumn As DataColumn
            Get
                Return Me.columnNumeroTarjeta
            End Get
        End Property
        
        Friend ReadOnly Property TipoColumn As DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        Friend ReadOnly Property VenceColumn As DataColumn
            Get
                Return Me.columnVence
            End Get
        End Property
        
        Friend ReadOnly Property Id_ContratoColumn As DataColumn
            Get
                Return Me.columnId_Contrato
            End Get
        End Property
        
        Friend ReadOnly Property ContratoColumn As DataColumn
            Get
                Return Me.columnContrato
            End Get
        End Property
        
        Friend ReadOnly Property DesayunosColumn As DataColumn
            Get
                Return Me.columnDesayunos
            End Get
        End Property
        
        Friend ReadOnly Property TipoPrecioColumn As DataColumn
            Get
                Return Me.columnTipoPrecio
            End Get
        End Property
        
        Friend ReadOnly Property DescuentoColumn As DataColumn
            Get
                Return Me.columnDescuento
            End Get
        End Property
        
        Friend ReadOnly Property ComisionServiciosColumn As DataColumn
            Get
                Return Me.columnComisionServicios
            End Get
        End Property
        
        Friend ReadOnly Property ComisionPaquetesColumn As DataColumn
            Get
                Return Me.columnComisionPaquetes
            End Get
        End Property
        
        Friend ReadOnly Property EsEmpleadoColumn As DataColumn
            Get
                Return Me.columnEsEmpleado
            End Get
        End Property
        
        Friend ReadOnly Property Id_EmpleadoColumn As DataColumn
            Get
                Return Me.columnId_Empleado
            End Get
        End Property
        
        Friend ReadOnly Property EmpleadoColumn As DataColumn
            Get
                Return Me.columnEmpleado
            End Get
        End Property
        
        Friend ReadOnly Property SaldoApartadoColumn As DataColumn
            Get
                Return Me.columnSaldoApartado
            End Get
        End Property
        
        Friend ReadOnly Property SaldoCanjeRealColumn As DataColumn
            Get
                Return Me.columnSaldoCanjeReal
            End Get
        End Property
        
        Friend ReadOnly Property IDInternetColumn As DataColumn
            Get
                Return Me.columnIDInternet
            End Get
        End Property
        
        Friend ReadOnly Property PassInternetColumn As DataColumn
            Get
                Return Me.columnPassInternet
            End Get
        End Property
        
        Friend ReadOnly Property TipoFacColumn As DataColumn
            Get
                Return Me.columnTipoFac
            End Get
        End Property
        
        Friend ReadOnly Property DiasFacColumn As DataColumn
            Get
                Return Me.columnDiasFac
            End Get
        End Property
        
        Friend ReadOnly Property Dia1Column As DataColumn
            Get
                Return Me.columnDia1
            End Get
        End Property
        
        Friend ReadOnly Property DiaF1Column As DataColumn
            Get
                Return Me.columnDiaF1
            End Get
        End Property
        
        Friend ReadOnly Property para1Column As DataColumn
            Get
                Return Me.columnpara1
            End Get
        End Property
        
        Friend ReadOnly Property Dia2Column As DataColumn
            Get
                Return Me.columnDia2
            End Get
        End Property
        
        Friend ReadOnly Property DiaF2Column As DataColumn
            Get
                Return Me.columnDiaF2
            End Get
        End Property
        
        Friend ReadOnly Property para2Column As DataColumn
            Get
                Return Me.columnpara2
            End Get
        End Property
        
        Friend ReadOnly Property Id_ViejoColumn As DataColumn
            Get
                Return Me.columnId_Viejo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ClienteRow
            Get
                Return CType(Me.Rows(index),ClienteRow)
            End Get
        End Property
        
        Public Event ClienteRowChanged As ClienteRowChangeEventHandler
        
        Public Event ClienteRowChanging As ClienteRowChangeEventHandler
        
        Public Event ClienteRowDeleted As ClienteRowChangeEventHandler
        
        Public Event ClienteRowDeleting As ClienteRowChangeEventHandler
        
        Public Overloads Sub AddClienteRow(ByVal row As ClienteRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddClienteRow( _
                    ByVal Nombre As String,  _
                    ByVal Observaciones As String,  _
                    ByVal Cedula As String,  _
                    ByVal Agencia As Boolean,  _
                    ByVal Contacto As String,  _
                    ByVal Nacionalidad As Integer,  _
                    ByVal Exento As Boolean,  _
                    ByVal ImpustoVentas As Double,  _
                    ByVal Credito As String,  _
                    ByVal Telefono1 As String,  _
                    ByVal Telefono2 As String,  _
                    ByVal Fax1 As String,  _
                    ByVal Fax2 As String,  _
                    ByVal Email As String,  _
                    ByVal Dereccion As String,  _
                    ByVal Limite_Credito As Double,  _
                    ByVal Plazo_Credito As Integer,  _
                    ByVal Tipo_Precio As Integer,  _
                    ByVal Usuario As String,  _
                    ByVal Restriccion_Cuenta As Boolean,  _
                    ByVal Comicion As Double,  _
                    ByVal CodMoneda As Integer,  _
                    ByVal Cliente_Moroso As Boolean,  _
                    ByVal NombreJuridico As String,  _
                    ByVal CodigoSeguridad As String,  _
                    ByVal NumeroTarjeta As String,  _
                    ByVal Tipo As String,  _
                    ByVal Vence As String,  _
                    ByVal Id_Contrato As Long,  _
                    ByVal Contrato As Boolean,  _
                    ByVal Desayunos As Boolean,  _
                    ByVal TipoPrecio As String,  _
                    ByVal Descuento As Double,  _
                    ByVal ComisionServicios As Double,  _
                    ByVal ComisionPaquetes As Double,  _
                    ByVal EsEmpleado As Boolean,  _
                    ByVal Id_Empleado As String,  _
                    ByVal Empleado As String,  _
                    ByVal SaldoApartado As Double,  _
                    ByVal SaldoCanjeReal As Double,  _
                    ByVal IDInternet As Integer,  _
                    ByVal PassInternet As String,  _
                    ByVal TipoFac As Integer,  _
                    ByVal DiasFac As Integer,  _
                    ByVal Dia1 As Integer,  _
                    ByVal DiaF1 As Integer,  _
                    ByVal para1 As Integer,  _
                    ByVal Dia2 As Integer,  _
                    ByVal DiaF2 As Integer,  _
                    ByVal para2 As Integer,  _
                    ByVal Id_Viejo As Integer) As ClienteRow
            Dim rowClienteRow As ClienteRow = CType(Me.NewRow,ClienteRow)
            rowClienteRow.ItemArray = New Object() {Nothing, Nombre, Observaciones, Cedula, Agencia, Contacto, Nacionalidad, Exento, ImpustoVentas, Credito, Telefono1, Telefono2, Fax1, Fax2, Email, Dereccion, Limite_Credito, Plazo_Credito, Tipo_Precio, Usuario, Restriccion_Cuenta, Comicion, CodMoneda, Cliente_Moroso, NombreJuridico, CodigoSeguridad, NumeroTarjeta, Tipo, Vence, Id_Contrato, Contrato, Desayunos, TipoPrecio, Descuento, ComisionServicios, ComisionPaquetes, EsEmpleado, Id_Empleado, Empleado, SaldoApartado, SaldoCanjeReal, IDInternet, PassInternet, TipoFac, DiasFac, Dia1, DiaF1, para1, Dia2, DiaF2, para2, Id_Viejo}
            Me.Rows.Add(rowClienteRow)
            Return rowClienteRow
        End Function
        
        Public Function FindById(ByVal Id As Integer) As ClienteRow
            Return CType(Me.Rows.Find(New Object() {Id}),ClienteRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ClienteDataTable = CType(MyBase.Clone,ClienteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ClienteDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnNombre = Me.Columns("Nombre")
            Me.columnObservaciones = Me.Columns("Observaciones")
            Me.columnCedula = Me.Columns("Cedula")
            Me.columnAgencia = Me.Columns("Agencia")
            Me.columnContacto = Me.Columns("Contacto")
            Me.columnNacionalidad = Me.Columns("Nacionalidad")
            Me.columnExento = Me.Columns("Exento")
            Me.columnImpustoVentas = Me.Columns("ImpustoVentas")
            Me.columnCredito = Me.Columns("Credito")
            Me.columnTelefono1 = Me.Columns("Telefono1")
            Me.columnTelefono2 = Me.Columns("Telefono2")
            Me.columnFax1 = Me.Columns("Fax1")
            Me.columnFax2 = Me.Columns("Fax2")
            Me.columnEmail = Me.Columns("Email")
            Me.columnDereccion = Me.Columns("Dereccion")
            Me.columnLimite_Credito = Me.Columns("Limite_Credito")
            Me.columnPlazo_Credito = Me.Columns("Plazo_Credito")
            Me.columnTipo_Precio = Me.Columns("Tipo_Precio")
            Me.columnUsuario = Me.Columns("Usuario")
            Me.columnRestriccion_Cuenta = Me.Columns("Restriccion_Cuenta")
            Me.columnComicion = Me.Columns("Comicion")
            Me.columnCodMoneda = Me.Columns("CodMoneda")
            Me.columnCliente_Moroso = Me.Columns("Cliente_Moroso")
            Me.columnNombreJuridico = Me.Columns("NombreJuridico")
            Me.columnCodigoSeguridad = Me.Columns("CodigoSeguridad")
            Me.columnNumeroTarjeta = Me.Columns("NumeroTarjeta")
            Me.columnTipo = Me.Columns("Tipo")
            Me.columnVence = Me.Columns("Vence")
            Me.columnId_Contrato = Me.Columns("Id_Contrato")
            Me.columnContrato = Me.Columns("Contrato")
            Me.columnDesayunos = Me.Columns("Desayunos")
            Me.columnTipoPrecio = Me.Columns("TipoPrecio")
            Me.columnDescuento = Me.Columns("Descuento")
            Me.columnComisionServicios = Me.Columns("ComisionServicios")
            Me.columnComisionPaquetes = Me.Columns("ComisionPaquetes")
            Me.columnEsEmpleado = Me.Columns("EsEmpleado")
            Me.columnId_Empleado = Me.Columns("Id_Empleado")
            Me.columnEmpleado = Me.Columns("Empleado")
            Me.columnSaldoApartado = Me.Columns("SaldoApartado")
            Me.columnSaldoCanjeReal = Me.Columns("SaldoCanjeReal")
            Me.columnIDInternet = Me.Columns("IDInternet")
            Me.columnPassInternet = Me.Columns("PassInternet")
            Me.columnTipoFac = Me.Columns("TipoFac")
            Me.columnDiasFac = Me.Columns("DiasFac")
            Me.columnDia1 = Me.Columns("Dia1")
            Me.columnDiaF1 = Me.Columns("DiaF1")
            Me.columnpara1 = Me.Columns("para1")
            Me.columnDia2 = Me.Columns("Dia2")
            Me.columnDiaF2 = Me.Columns("DiaF2")
            Me.columnpara2 = Me.Columns("para2")
            Me.columnId_Viejo = Me.Columns("Id_Viejo")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnNombre = New DataColumn("Nombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombre)
            Me.columnObservaciones = New DataColumn("Observaciones", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnObservaciones)
            Me.columnCedula = New DataColumn("Cedula", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCedula)
            Me.columnAgencia = New DataColumn("Agencia", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAgencia)
            Me.columnContacto = New DataColumn("Contacto", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnContacto)
            Me.columnNacionalidad = New DataColumn("Nacionalidad", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNacionalidad)
            Me.columnExento = New DataColumn("Exento", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExento)
            Me.columnImpustoVentas = New DataColumn("ImpustoVentas", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnImpustoVentas)
            Me.columnCredito = New DataColumn("Credito", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCredito)
            Me.columnTelefono1 = New DataColumn("Telefono1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTelefono1)
            Me.columnTelefono2 = New DataColumn("Telefono2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTelefono2)
            Me.columnFax1 = New DataColumn("Fax1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFax1)
            Me.columnFax2 = New DataColumn("Fax2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFax2)
            Me.columnEmail = New DataColumn("Email", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmail)
            Me.columnDereccion = New DataColumn("Dereccion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDereccion)
            Me.columnLimite_Credito = New DataColumn("Limite_Credito", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLimite_Credito)
            Me.columnPlazo_Credito = New DataColumn("Plazo_Credito", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPlazo_Credito)
            Me.columnTipo_Precio = New DataColumn("Tipo_Precio", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipo_Precio)
            Me.columnUsuario = New DataColumn("Usuario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUsuario)
            Me.columnRestriccion_Cuenta = New DataColumn("Restriccion_Cuenta", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRestriccion_Cuenta)
            Me.columnComicion = New DataColumn("Comicion", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnComicion)
            Me.columnCodMoneda = New DataColumn("CodMoneda", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodMoneda)
            Me.columnCliente_Moroso = New DataColumn("Cliente_Moroso", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCliente_Moroso)
            Me.columnNombreJuridico = New DataColumn("NombreJuridico", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombreJuridico)
            Me.columnCodigoSeguridad = New DataColumn("CodigoSeguridad", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodigoSeguridad)
            Me.columnNumeroTarjeta = New DataColumn("NumeroTarjeta", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNumeroTarjeta)
            Me.columnTipo = New DataColumn("Tipo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipo)
            Me.columnVence = New DataColumn("Vence", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVence)
            Me.columnId_Contrato = New DataColumn("Id_Contrato", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Contrato)
            Me.columnContrato = New DataColumn("Contrato", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnContrato)
            Me.columnDesayunos = New DataColumn("Desayunos", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDesayunos)
            Me.columnTipoPrecio = New DataColumn("TipoPrecio", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipoPrecio)
            Me.columnDescuento = New DataColumn("Descuento", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescuento)
            Me.columnComisionServicios = New DataColumn("ComisionServicios", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnComisionServicios)
            Me.columnComisionPaquetes = New DataColumn("ComisionPaquetes", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnComisionPaquetes)
            Me.columnEsEmpleado = New DataColumn("EsEmpleado", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEsEmpleado)
            Me.columnId_Empleado = New DataColumn("Id_Empleado", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Empleado)
            Me.columnEmpleado = New DataColumn("Empleado", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmpleado)
            Me.columnSaldoApartado = New DataColumn("SaldoApartado", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldoApartado)
            Me.columnSaldoCanjeReal = New DataColumn("SaldoCanjeReal", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldoCanjeReal)
            Me.columnIDInternet = New DataColumn("IDInternet", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDInternet)
            Me.columnPassInternet = New DataColumn("PassInternet", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPassInternet)
            Me.columnTipoFac = New DataColumn("TipoFac", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipoFac)
            Me.columnDiasFac = New DataColumn("DiasFac", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDiasFac)
            Me.columnDia1 = New DataColumn("Dia1", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDia1)
            Me.columnDiaF1 = New DataColumn("DiaF1", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDiaF1)
            Me.columnpara1 = New DataColumn("para1", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpara1)
            Me.columnDia2 = New DataColumn("Dia2", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDia2)
            Me.columnDiaF2 = New DataColumn("DiaF2", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDiaF2)
            Me.columnpara2 = New DataColumn("para2", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpara2)
            Me.columnId_Viejo = New DataColumn("Id_Viejo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Viejo)
            Me.Constraints.Add(New UniqueConstraint("DsReporteDKey2", New DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
            Me.columnId.Unique = true
            Me.columnNombre.AllowDBNull = false
            Me.columnCedula.AllowDBNull = false
            Me.columnAgencia.AllowDBNull = false
            Me.columnNacionalidad.AllowDBNull = false
            Me.columnExento.AllowDBNull = false
            Me.columnImpustoVentas.AllowDBNull = false
            Me.columnCredito.AllowDBNull = false
            Me.columnTipo_Precio.AllowDBNull = false
            Me.columnRestriccion_Cuenta.AllowDBNull = false
            Me.columnComicion.AllowDBNull = false
            Me.columnCodMoneda.AllowDBNull = false
            Me.columnCliente_Moroso.AllowDBNull = false
            Me.columnContrato.AllowDBNull = false
            Me.columnTipoPrecio.AllowDBNull = false
            Me.columnDescuento.AllowDBNull = false
            Me.columnComisionServicios.AllowDBNull = false
            Me.columnComisionPaquetes.AllowDBNull = false
            Me.columnEsEmpleado.AllowDBNull = false
            Me.columnId_Empleado.AllowDBNull = false
            Me.columnEmpleado.AllowDBNull = false
            Me.columnIDInternet.AllowDBNull = false
            Me.columnPassInternet.AllowDBNull = false
            Me.columnTipoFac.AllowDBNull = false
            Me.columnDiasFac.AllowDBNull = false
            Me.columnDia1.AllowDBNull = false
            Me.columnDiaF1.AllowDBNull = false
            Me.columnpara1.AllowDBNull = false
            Me.columnDia2.AllowDBNull = false
            Me.columnDiaF2.AllowDBNull = false
            Me.columnpara2.AllowDBNull = false
            Me.columnId_Viejo.AllowDBNull = false
        End Sub
        
        Public Function NewClienteRow() As ClienteRow
            Return CType(Me.NewRow,ClienteRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ClienteRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ClienteRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ClienteRowChangedEvent) Is Nothing) Then
                RaiseEvent ClienteRowChanged(Me, New ClienteRowChangeEvent(CType(e.Row,ClienteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ClienteRowChangingEvent) Is Nothing) Then
                RaiseEvent ClienteRowChanging(Me, New ClienteRowChangeEvent(CType(e.Row,ClienteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ClienteRowDeletedEvent) Is Nothing) Then
                RaiseEvent ClienteRowDeleted(Me, New ClienteRowChangeEvent(CType(e.Row,ClienteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ClienteRowDeletingEvent) Is Nothing) Then
                RaiseEvent ClienteRowDeleting(Me, New ClienteRowChangeEvent(CType(e.Row,ClienteRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveClienteRow(ByVal row As ClienteRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ClienteRow
        Inherits DataRow
        
        Private tableCliente As ClienteDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCliente = CType(Me.Table,ClienteDataTable)
        End Sub
        
        Public Property Id As Integer
            Get
                Return CType(Me(Me.tableCliente.IdColumn),Integer)
            End Get
            Set
                Me(Me.tableCliente.IdColumn) = value
            End Set
        End Property
        
        Public Property Nombre As String
            Get
                Return CType(Me(Me.tableCliente.NombreColumn),String)
            End Get
            Set
                Me(Me.tableCliente.NombreColumn) = value
            End Set
        End Property
        
        Public Property Observaciones As String
            Get
                Try 
                    Return CType(Me(Me.tableCliente.ObservacionesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCliente.ObservacionesColumn) = value
            End Set
        End Property
        
        Public Property Cedula As String
            Get
                Return CType(Me(Me.tableCliente.CedulaColumn),String)
            End Get
            Set
                Me(Me.tableCliente.CedulaColumn) = value
            End Set
        End Property
        
        Public Property Agencia As Boolean
            Get
                Return CType(Me(Me.tableCliente.AgenciaColumn),Boolean)
            End Get
            Set
                Me(Me.tableCliente.AgenciaColumn) = value
            End Set
        End Property
        
        Public Property Contacto As String
            Get
                Try 
                    Return CType(Me(Me.tableCliente.ContactoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCliente.ContactoColumn) = value
            End Set
        End Property
        
        Public Property Nacionalidad As Integer
            Get
                Return CType(Me(Me.tableCliente.NacionalidadColumn),Integer)
            End Get
            Set
                Me(Me.tableCliente.NacionalidadColumn) = value
            End Set
        End Property
        
        Public Property Exento As Boolean
            Get
                Return CType(Me(Me.tableCliente.ExentoColumn),Boolean)
            End Get
            Set
                Me(Me.tableCliente.ExentoColumn) = value
            End Set
        End Property
        
        Public Property ImpustoVentas As Double
            Get
                Return CType(Me(Me.tableCliente.ImpustoVentasColumn),Double)
            End Get
            Set
                Me(Me.tableCliente.ImpustoVentasColumn) = value
            End Set
        End Property
        
        Public Property Credito As String
            Get
                Return CType(Me(Me.tableCliente.CreditoColumn),String)
            End Get
            Set
                Me(Me.tableCliente.CreditoColumn) = value
            End Set
        End Property
        
        Public Property Telefono1 As String
            Get
                Try 
                    Return CType(Me(Me.tableCliente.Telefono1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCliente.Telefono1Column) = value
            End Set
        End Property
        
        Public Property Telefono2 As String
            Get
                Try 
                    Return CType(Me(Me.tableCliente.Telefono2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCliente.Telefono2Column) = value
            End Set
        End Property
        
        Public Property Fax1 As String
            Get
                Try 
                    Return CType(Me(Me.tableCliente.Fax1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCliente.Fax1Column) = value
            End Set
        End Property
        
        Public Property Fax2 As String
            Get
                Try 
                    Return CType(Me(Me.tableCliente.Fax2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCliente.Fax2Column) = value
            End Set
        End Property
        
        Public Property Email As String
            Get
                Try 
                    Return CType(Me(Me.tableCliente.EmailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCliente.EmailColumn) = value
            End Set
        End Property
        
        Public Property Dereccion As String
            Get
                Try 
                    Return CType(Me(Me.tableCliente.DereccionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCliente.DereccionColumn) = value
            End Set
        End Property
        
        Public Property Limite_Credito As Double
            Get
                Try 
                    Return CType(Me(Me.tableCliente.Limite_CreditoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCliente.Limite_CreditoColumn) = value
            End Set
        End Property
        
        Public Property Plazo_Credito As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCliente.Plazo_CreditoColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCliente.Plazo_CreditoColumn) = value
            End Set
        End Property
        
        Public Property Tipo_Precio As Integer
            Get
                Return CType(Me(Me.tableCliente.Tipo_PrecioColumn),Integer)
            End Get
            Set
                Me(Me.tableCliente.Tipo_PrecioColumn) = value
            End Set
        End Property
        
        Public Property Usuario As String
            Get
                Try 
                    Return CType(Me(Me.tableCliente.UsuarioColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCliente.UsuarioColumn) = value
            End Set
        End Property
        
        Public Property Restriccion_Cuenta As Boolean
            Get
                Return CType(Me(Me.tableCliente.Restriccion_CuentaColumn),Boolean)
            End Get
            Set
                Me(Me.tableCliente.Restriccion_CuentaColumn) = value
            End Set
        End Property
        
        Public Property Comicion As Double
            Get
                Return CType(Me(Me.tableCliente.ComicionColumn),Double)
            End Get
            Set
                Me(Me.tableCliente.ComicionColumn) = value
            End Set
        End Property
        
        Public Property CodMoneda As Integer
            Get
                Return CType(Me(Me.tableCliente.CodMonedaColumn),Integer)
            End Get
            Set
                Me(Me.tableCliente.CodMonedaColumn) = value
            End Set
        End Property
        
        Public Property Cliente_Moroso As Boolean
            Get
                Return CType(Me(Me.tableCliente.Cliente_MorosoColumn),Boolean)
            End Get
            Set
                Me(Me.tableCliente.Cliente_MorosoColumn) = value
            End Set
        End Property
        
        Public Property NombreJuridico As String
            Get
                Try 
                    Return CType(Me(Me.tableCliente.NombreJuridicoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCliente.NombreJuridicoColumn) = value
            End Set
        End Property
        
        Public Property CodigoSeguridad As String
            Get
                Try 
                    Return CType(Me(Me.tableCliente.CodigoSeguridadColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCliente.CodigoSeguridadColumn) = value
            End Set
        End Property
        
        Public Property NumeroTarjeta As String
            Get
                Try 
                    Return CType(Me(Me.tableCliente.NumeroTarjetaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCliente.NumeroTarjetaColumn) = value
            End Set
        End Property
        
        Public Property Tipo As String
            Get
                Try 
                    Return CType(Me(Me.tableCliente.TipoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCliente.TipoColumn) = value
            End Set
        End Property
        
        Public Property Vence As String
            Get
                Try 
                    Return CType(Me(Me.tableCliente.VenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCliente.VenceColumn) = value
            End Set
        End Property
        
        Public Property Id_Contrato As Long
            Get
                Try 
                    Return CType(Me(Me.tableCliente.Id_ContratoColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCliente.Id_ContratoColumn) = value
            End Set
        End Property
        
        Public Property Contrato As Boolean
            Get
                Return CType(Me(Me.tableCliente.ContratoColumn),Boolean)
            End Get
            Set
                Me(Me.tableCliente.ContratoColumn) = value
            End Set
        End Property
        
        Public Property Desayunos As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCliente.DesayunosColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCliente.DesayunosColumn) = value
            End Set
        End Property
        
        Public Property TipoPrecio As String
            Get
                Return CType(Me(Me.tableCliente.TipoPrecioColumn),String)
            End Get
            Set
                Me(Me.tableCliente.TipoPrecioColumn) = value
            End Set
        End Property
        
        Public Property Descuento As Double
            Get
                Return CType(Me(Me.tableCliente.DescuentoColumn),Double)
            End Get
            Set
                Me(Me.tableCliente.DescuentoColumn) = value
            End Set
        End Property
        
        Public Property ComisionServicios As Double
            Get
                Return CType(Me(Me.tableCliente.ComisionServiciosColumn),Double)
            End Get
            Set
                Me(Me.tableCliente.ComisionServiciosColumn) = value
            End Set
        End Property
        
        Public Property ComisionPaquetes As Double
            Get
                Return CType(Me(Me.tableCliente.ComisionPaquetesColumn),Double)
            End Get
            Set
                Me(Me.tableCliente.ComisionPaquetesColumn) = value
            End Set
        End Property
        
        Public Property EsEmpleado As Boolean
            Get
                Return CType(Me(Me.tableCliente.EsEmpleadoColumn),Boolean)
            End Get
            Set
                Me(Me.tableCliente.EsEmpleadoColumn) = value
            End Set
        End Property
        
        Public Property Id_Empleado As String
            Get
                Return CType(Me(Me.tableCliente.Id_EmpleadoColumn),String)
            End Get
            Set
                Me(Me.tableCliente.Id_EmpleadoColumn) = value
            End Set
        End Property
        
        Public Property Empleado As String
            Get
                Return CType(Me(Me.tableCliente.EmpleadoColumn),String)
            End Get
            Set
                Me(Me.tableCliente.EmpleadoColumn) = value
            End Set
        End Property
        
        Public Property SaldoApartado As Double
            Get
                Try 
                    Return CType(Me(Me.tableCliente.SaldoApartadoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCliente.SaldoApartadoColumn) = value
            End Set
        End Property
        
        Public Property SaldoCanjeReal As Double
            Get
                Try 
                    Return CType(Me(Me.tableCliente.SaldoCanjeRealColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCliente.SaldoCanjeRealColumn) = value
            End Set
        End Property
        
        Public Property IDInternet As Integer
            Get
                Return CType(Me(Me.tableCliente.IDInternetColumn),Integer)
            End Get
            Set
                Me(Me.tableCliente.IDInternetColumn) = value
            End Set
        End Property
        
        Public Property PassInternet As String
            Get
                Return CType(Me(Me.tableCliente.PassInternetColumn),String)
            End Get
            Set
                Me(Me.tableCliente.PassInternetColumn) = value
            End Set
        End Property
        
        Public Property TipoFac As Integer
            Get
                Return CType(Me(Me.tableCliente.TipoFacColumn),Integer)
            End Get
            Set
                Me(Me.tableCliente.TipoFacColumn) = value
            End Set
        End Property
        
        Public Property DiasFac As Integer
            Get
                Return CType(Me(Me.tableCliente.DiasFacColumn),Integer)
            End Get
            Set
                Me(Me.tableCliente.DiasFacColumn) = value
            End Set
        End Property
        
        Public Property Dia1 As Integer
            Get
                Return CType(Me(Me.tableCliente.Dia1Column),Integer)
            End Get
            Set
                Me(Me.tableCliente.Dia1Column) = value
            End Set
        End Property
        
        Public Property DiaF1 As Integer
            Get
                Return CType(Me(Me.tableCliente.DiaF1Column),Integer)
            End Get
            Set
                Me(Me.tableCliente.DiaF1Column) = value
            End Set
        End Property
        
        Public Property para1 As Integer
            Get
                Return CType(Me(Me.tableCliente.para1Column),Integer)
            End Get
            Set
                Me(Me.tableCliente.para1Column) = value
            End Set
        End Property
        
        Public Property Dia2 As Integer
            Get
                Return CType(Me(Me.tableCliente.Dia2Column),Integer)
            End Get
            Set
                Me(Me.tableCliente.Dia2Column) = value
            End Set
        End Property
        
        Public Property DiaF2 As Integer
            Get
                Return CType(Me(Me.tableCliente.DiaF2Column),Integer)
            End Get
            Set
                Me(Me.tableCliente.DiaF2Column) = value
            End Set
        End Property
        
        Public Property para2 As Integer
            Get
                Return CType(Me(Me.tableCliente.para2Column),Integer)
            End Get
            Set
                Me(Me.tableCliente.para2Column) = value
            End Set
        End Property
        
        Public Property Id_Viejo As Integer
            Get
                Return CType(Me(Me.tableCliente.Id_ViejoColumn),Integer)
            End Get
            Set
                Me(Me.tableCliente.Id_ViejoColumn) = value
            End Set
        End Property
        
        Public Function IsObservacionesNull() As Boolean
            Return Me.IsNull(Me.tableCliente.ObservacionesColumn)
        End Function
        
        Public Sub SetObservacionesNull()
            Me(Me.tableCliente.ObservacionesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsContactoNull() As Boolean
            Return Me.IsNull(Me.tableCliente.ContactoColumn)
        End Function
        
        Public Sub SetContactoNull()
            Me(Me.tableCliente.ContactoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTelefono1Null() As Boolean
            Return Me.IsNull(Me.tableCliente.Telefono1Column)
        End Function
        
        Public Sub SetTelefono1Null()
            Me(Me.tableCliente.Telefono1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsTelefono2Null() As Boolean
            Return Me.IsNull(Me.tableCliente.Telefono2Column)
        End Function
        
        Public Sub SetTelefono2Null()
            Me(Me.tableCliente.Telefono2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsFax1Null() As Boolean
            Return Me.IsNull(Me.tableCliente.Fax1Column)
        End Function
        
        Public Sub SetFax1Null()
            Me(Me.tableCliente.Fax1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsFax2Null() As Boolean
            Return Me.IsNull(Me.tableCliente.Fax2Column)
        End Function
        
        Public Sub SetFax2Null()
            Me(Me.tableCliente.Fax2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsEmailNull() As Boolean
            Return Me.IsNull(Me.tableCliente.EmailColumn)
        End Function
        
        Public Sub SetEmailNull()
            Me(Me.tableCliente.EmailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDereccionNull() As Boolean
            Return Me.IsNull(Me.tableCliente.DereccionColumn)
        End Function
        
        Public Sub SetDereccionNull()
            Me(Me.tableCliente.DereccionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLimite_CreditoNull() As Boolean
            Return Me.IsNull(Me.tableCliente.Limite_CreditoColumn)
        End Function
        
        Public Sub SetLimite_CreditoNull()
            Me(Me.tableCliente.Limite_CreditoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPlazo_CreditoNull() As Boolean
            Return Me.IsNull(Me.tableCliente.Plazo_CreditoColumn)
        End Function
        
        Public Sub SetPlazo_CreditoNull()
            Me(Me.tableCliente.Plazo_CreditoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUsuarioNull() As Boolean
            Return Me.IsNull(Me.tableCliente.UsuarioColumn)
        End Function
        
        Public Sub SetUsuarioNull()
            Me(Me.tableCliente.UsuarioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNombreJuridicoNull() As Boolean
            Return Me.IsNull(Me.tableCliente.NombreJuridicoColumn)
        End Function
        
        Public Sub SetNombreJuridicoNull()
            Me(Me.tableCliente.NombreJuridicoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCodigoSeguridadNull() As Boolean
            Return Me.IsNull(Me.tableCliente.CodigoSeguridadColumn)
        End Function
        
        Public Sub SetCodigoSeguridadNull()
            Me(Me.tableCliente.CodigoSeguridadColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNumeroTarjetaNull() As Boolean
            Return Me.IsNull(Me.tableCliente.NumeroTarjetaColumn)
        End Function
        
        Public Sub SetNumeroTarjetaNull()
            Me(Me.tableCliente.NumeroTarjetaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tableCliente.TipoColumn)
        End Function
        
        Public Sub SetTipoNull()
            Me(Me.tableCliente.TipoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVenceNull() As Boolean
            Return Me.IsNull(Me.tableCliente.VenceColumn)
        End Function
        
        Public Sub SetVenceNull()
            Me(Me.tableCliente.VenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsId_ContratoNull() As Boolean
            Return Me.IsNull(Me.tableCliente.Id_ContratoColumn)
        End Function
        
        Public Sub SetId_ContratoNull()
            Me(Me.tableCliente.Id_ContratoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDesayunosNull() As Boolean
            Return Me.IsNull(Me.tableCliente.DesayunosColumn)
        End Function
        
        Public Sub SetDesayunosNull()
            Me(Me.tableCliente.DesayunosColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSaldoApartadoNull() As Boolean
            Return Me.IsNull(Me.tableCliente.SaldoApartadoColumn)
        End Function
        
        Public Sub SetSaldoApartadoNull()
            Me(Me.tableCliente.SaldoApartadoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSaldoCanjeRealNull() As Boolean
            Return Me.IsNull(Me.tableCliente.SaldoCanjeRealColumn)
        End Function
        
        Public Sub SetSaldoCanjeRealNull()
            Me(Me.tableCliente.SaldoCanjeRealColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ClienteRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ClienteRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ClienteRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ClienteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PagoDepDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnNumDeposito As DataColumn
        
        Private columnCuentaBan As DataColumn
        
        Private columnFechaDep As DataColumn
        
        Private columnFactura As DataColumn
        
        Private columnID As DataColumn
        
        Private columnMonto As DataColumn
        
        Private columnMayorista As DataColumn
        
        Private columnMontoFac As DataColumn
        
        Private columnConcepto As DataColumn
        
        Friend Sub New()
            MyBase.New("PagoDep")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property NumDepositoColumn As DataColumn
            Get
                Return Me.columnNumDeposito
            End Get
        End Property
        
        Friend ReadOnly Property CuentaBanColumn As DataColumn
            Get
                Return Me.columnCuentaBan
            End Get
        End Property
        
        Friend ReadOnly Property FechaDepColumn As DataColumn
            Get
                Return Me.columnFechaDep
            End Get
        End Property
        
        Friend ReadOnly Property FacturaColumn As DataColumn
            Get
                Return Me.columnFactura
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property MontoColumn As DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        Friend ReadOnly Property MayoristaColumn As DataColumn
            Get
                Return Me.columnMayorista
            End Get
        End Property
        
        Friend ReadOnly Property MontoFacColumn As DataColumn
            Get
                Return Me.columnMontoFac
            End Get
        End Property
        
        Friend ReadOnly Property ConceptoColumn As DataColumn
            Get
                Return Me.columnConcepto
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PagoDepRow
            Get
                Return CType(Me.Rows(index),PagoDepRow)
            End Get
        End Property
        
        Public Event PagoDepRowChanged As PagoDepRowChangeEventHandler
        
        Public Event PagoDepRowChanging As PagoDepRowChangeEventHandler
        
        Public Event PagoDepRowDeleted As PagoDepRowChangeEventHandler
        
        Public Event PagoDepRowDeleting As PagoDepRowChangeEventHandler
        
        Public Overloads Sub AddPagoDepRow(ByVal row As PagoDepRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPagoDepRow(ByVal NumDeposito As String, ByVal CuentaBan As String, ByVal FechaDep As Date, ByVal Factura As String, ByVal ID As String, ByVal Monto As Double, ByVal Mayorista As String, ByVal MontoFac As Double, ByVal Concepto As String) As PagoDepRow
            Dim rowPagoDepRow As PagoDepRow = CType(Me.NewRow,PagoDepRow)
            rowPagoDepRow.ItemArray = New Object() {NumDeposito, CuentaBan, FechaDep, Factura, ID, Monto, Mayorista, MontoFac, Concepto}
            Me.Rows.Add(rowPagoDepRow)
            Return rowPagoDepRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PagoDepDataTable = CType(MyBase.Clone,PagoDepDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PagoDepDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnNumDeposito = Me.Columns("NumDeposito")
            Me.columnCuentaBan = Me.Columns("CuentaBan")
            Me.columnFechaDep = Me.Columns("FechaDep")
            Me.columnFactura = Me.Columns("Factura")
            Me.columnID = Me.Columns("ID")
            Me.columnMonto = Me.Columns("Monto")
            Me.columnMayorista = Me.Columns("Mayorista")
            Me.columnMontoFac = Me.Columns("MontoFac")
            Me.columnConcepto = Me.Columns("Concepto")
        End Sub
        
        Private Sub InitClass()
            Me.columnNumDeposito = New DataColumn("NumDeposito", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNumDeposito)
            Me.columnCuentaBan = New DataColumn("CuentaBan", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuentaBan)
            Me.columnFechaDep = New DataColumn("FechaDep", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaDep)
            Me.columnFactura = New DataColumn("Factura", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFactura)
            Me.columnID = New DataColumn("ID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnMonto = New DataColumn("Monto", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto)
            Me.columnMayorista = New DataColumn("Mayorista", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMayorista)
            Me.columnMontoFac = New DataColumn("MontoFac", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMontoFac)
            Me.columnConcepto = New DataColumn("Concepto", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnConcepto)
        End Sub
        
        Public Function NewPagoDepRow() As PagoDepRow
            Return CType(Me.NewRow,PagoDepRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PagoDepRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PagoDepRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PagoDepRowChangedEvent) Is Nothing) Then
                RaiseEvent PagoDepRowChanged(Me, New PagoDepRowChangeEvent(CType(e.Row,PagoDepRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PagoDepRowChangingEvent) Is Nothing) Then
                RaiseEvent PagoDepRowChanging(Me, New PagoDepRowChangeEvent(CType(e.Row,PagoDepRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PagoDepRowDeletedEvent) Is Nothing) Then
                RaiseEvent PagoDepRowDeleted(Me, New PagoDepRowChangeEvent(CType(e.Row,PagoDepRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PagoDepRowDeletingEvent) Is Nothing) Then
                RaiseEvent PagoDepRowDeleting(Me, New PagoDepRowChangeEvent(CType(e.Row,PagoDepRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePagoDepRow(ByVal row As PagoDepRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PagoDepRow
        Inherits DataRow
        
        Private tablePagoDep As PagoDepDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePagoDep = CType(Me.Table,PagoDepDataTable)
        End Sub
        
        Public Property NumDeposito As String
            Get
                Try 
                    Return CType(Me(Me.tablePagoDep.NumDepositoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePagoDep.NumDepositoColumn) = value
            End Set
        End Property
        
        Public Property CuentaBan As String
            Get
                Try 
                    Return CType(Me(Me.tablePagoDep.CuentaBanColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePagoDep.CuentaBanColumn) = value
            End Set
        End Property
        
        Public Property FechaDep As Date
            Get
                Try 
                    Return CType(Me(Me.tablePagoDep.FechaDepColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePagoDep.FechaDepColumn) = value
            End Set
        End Property
        
        Public Property Factura As String
            Get
                Try 
                    Return CType(Me(Me.tablePagoDep.FacturaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePagoDep.FacturaColumn) = value
            End Set
        End Property
        
        Public Property ID As String
            Get
                Try 
                    Return CType(Me(Me.tablePagoDep.IDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePagoDep.IDColumn) = value
            End Set
        End Property
        
        Public Property Monto As Double
            Get
                Try 
                    Return CType(Me(Me.tablePagoDep.MontoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePagoDep.MontoColumn) = value
            End Set
        End Property
        
        Public Property Mayorista As String
            Get
                Try 
                    Return CType(Me(Me.tablePagoDep.MayoristaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePagoDep.MayoristaColumn) = value
            End Set
        End Property
        
        Public Property MontoFac As Double
            Get
                Try 
                    Return CType(Me(Me.tablePagoDep.MontoFacColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePagoDep.MontoFacColumn) = value
            End Set
        End Property
        
        Public Property Concepto As String
            Get
                Try 
                    Return CType(Me(Me.tablePagoDep.ConceptoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePagoDep.ConceptoColumn) = value
            End Set
        End Property
        
        Public Function IsNumDepositoNull() As Boolean
            Return Me.IsNull(Me.tablePagoDep.NumDepositoColumn)
        End Function
        
        Public Sub SetNumDepositoNull()
            Me(Me.tablePagoDep.NumDepositoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCuentaBanNull() As Boolean
            Return Me.IsNull(Me.tablePagoDep.CuentaBanColumn)
        End Function
        
        Public Sub SetCuentaBanNull()
            Me(Me.tablePagoDep.CuentaBanColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFechaDepNull() As Boolean
            Return Me.IsNull(Me.tablePagoDep.FechaDepColumn)
        End Function
        
        Public Sub SetFechaDepNull()
            Me(Me.tablePagoDep.FechaDepColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFacturaNull() As Boolean
            Return Me.IsNull(Me.tablePagoDep.FacturaColumn)
        End Function
        
        Public Sub SetFacturaNull()
            Me(Me.tablePagoDep.FacturaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tablePagoDep.IDColumn)
        End Function
        
        Public Sub SetIDNull()
            Me(Me.tablePagoDep.IDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMontoNull() As Boolean
            Return Me.IsNull(Me.tablePagoDep.MontoColumn)
        End Function
        
        Public Sub SetMontoNull()
            Me(Me.tablePagoDep.MontoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMayoristaNull() As Boolean
            Return Me.IsNull(Me.tablePagoDep.MayoristaColumn)
        End Function
        
        Public Sub SetMayoristaNull()
            Me(Me.tablePagoDep.MayoristaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMontoFacNull() As Boolean
            Return Me.IsNull(Me.tablePagoDep.MontoFacColumn)
        End Function
        
        Public Sub SetMontoFacNull()
            Me(Me.tablePagoDep.MontoFacColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsConceptoNull() As Boolean
            Return Me.IsNull(Me.tablePagoDep.ConceptoColumn)
        End Function
        
        Public Sub SetConceptoNull()
            Me(Me.tablePagoDep.ConceptoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PagoDepRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PagoDepRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PagoDepRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PagoDepRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
