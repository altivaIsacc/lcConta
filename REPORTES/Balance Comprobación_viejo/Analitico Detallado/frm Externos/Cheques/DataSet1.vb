'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DataSet1
    Inherits DataSet
    
    Private tableCuentas_bancarias As Cuentas_bancariasDataTable
    
    Private tableCheques As ChequesDataTable
    
    Private tableListCheques As ListChequesDataTable
    
    Private tableProveedores As ProveedoresDataTable
    
    Private tablevChequesDep As vChequesDepDataTable
    
    Private tableBancos As BancosDataTable
    
    Private tableCuentas_bancarias1 As Cuentas_bancarias1DataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Cuentas_bancarias")) Is Nothing) Then
                Me.Tables.Add(New Cuentas_bancariasDataTable(ds.Tables("Cuentas_bancarias")))
            End If
            If (Not (ds.Tables("Cheques")) Is Nothing) Then
                Me.Tables.Add(New ChequesDataTable(ds.Tables("Cheques")))
            End If
            If (Not (ds.Tables("ListCheques")) Is Nothing) Then
                Me.Tables.Add(New ListChequesDataTable(ds.Tables("ListCheques")))
            End If
            If (Not (ds.Tables("Proveedores")) Is Nothing) Then
                Me.Tables.Add(New ProveedoresDataTable(ds.Tables("Proveedores")))
            End If
            If (Not (ds.Tables("vChequesDep")) Is Nothing) Then
                Me.Tables.Add(New vChequesDepDataTable(ds.Tables("vChequesDep")))
            End If
            If (Not (ds.Tables("Bancos")) Is Nothing) Then
                Me.Tables.Add(New BancosDataTable(ds.Tables("Bancos")))
            End If
            If (Not (ds.Tables("Cuentas_bancarias1")) Is Nothing) Then
                Me.Tables.Add(New Cuentas_bancarias1DataTable(ds.Tables("Cuentas_bancarias1")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Cuentas_bancarias As Cuentas_bancariasDataTable
        Get
            Return Me.tableCuentas_bancarias
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Cheques As ChequesDataTable
        Get
            Return Me.tableCheques
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ListCheques As ListChequesDataTable
        Get
            Return Me.tableListCheques
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Proveedores As ProveedoresDataTable
        Get
            Return Me.tableProveedores
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property vChequesDep As vChequesDepDataTable
        Get
            Return Me.tablevChequesDep
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Bancos As BancosDataTable
        Get
            Return Me.tableBancos
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Cuentas_bancarias1 As Cuentas_bancarias1DataTable
        Get
            Return Me.tableCuentas_bancarias1
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DataSet1 = CType(MyBase.Clone,DataSet1)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Cuentas_bancarias")) Is Nothing) Then
            Me.Tables.Add(New Cuentas_bancariasDataTable(ds.Tables("Cuentas_bancarias")))
        End If
        If (Not (ds.Tables("Cheques")) Is Nothing) Then
            Me.Tables.Add(New ChequesDataTable(ds.Tables("Cheques")))
        End If
        If (Not (ds.Tables("ListCheques")) Is Nothing) Then
            Me.Tables.Add(New ListChequesDataTable(ds.Tables("ListCheques")))
        End If
        If (Not (ds.Tables("Proveedores")) Is Nothing) Then
            Me.Tables.Add(New ProveedoresDataTable(ds.Tables("Proveedores")))
        End If
        If (Not (ds.Tables("vChequesDep")) Is Nothing) Then
            Me.Tables.Add(New vChequesDepDataTable(ds.Tables("vChequesDep")))
        End If
        If (Not (ds.Tables("Bancos")) Is Nothing) Then
            Me.Tables.Add(New BancosDataTable(ds.Tables("Bancos")))
        End If
        If (Not (ds.Tables("Cuentas_bancarias1")) Is Nothing) Then
            Me.Tables.Add(New Cuentas_bancarias1DataTable(ds.Tables("Cuentas_bancarias1")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableCuentas_bancarias = CType(Me.Tables("Cuentas_bancarias"),Cuentas_bancariasDataTable)
        If (Not (Me.tableCuentas_bancarias) Is Nothing) Then
            Me.tableCuentas_bancarias.InitVars
        End If
        Me.tableCheques = CType(Me.Tables("Cheques"),ChequesDataTable)
        If (Not (Me.tableCheques) Is Nothing) Then
            Me.tableCheques.InitVars
        End If
        Me.tableListCheques = CType(Me.Tables("ListCheques"),ListChequesDataTable)
        If (Not (Me.tableListCheques) Is Nothing) Then
            Me.tableListCheques.InitVars
        End If
        Me.tableProveedores = CType(Me.Tables("Proveedores"),ProveedoresDataTable)
        If (Not (Me.tableProveedores) Is Nothing) Then
            Me.tableProveedores.InitVars
        End If
        Me.tablevChequesDep = CType(Me.Tables("vChequesDep"),vChequesDepDataTable)
        If (Not (Me.tablevChequesDep) Is Nothing) Then
            Me.tablevChequesDep.InitVars
        End If
        Me.tableBancos = CType(Me.Tables("Bancos"),BancosDataTable)
        If (Not (Me.tableBancos) Is Nothing) Then
            Me.tableBancos.InitVars
        End If
        Me.tableCuentas_bancarias1 = CType(Me.Tables("Cuentas_bancarias1"),Cuentas_bancarias1DataTable)
        If (Not (Me.tableCuentas_bancarias1) Is Nothing) Then
            Me.tableCuentas_bancarias1.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DataSet1"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DataSet1.xsd"
        Me.Locale = New System.Globalization.CultureInfo("es-CR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableCuentas_bancarias = New Cuentas_bancariasDataTable
        Me.Tables.Add(Me.tableCuentas_bancarias)
        Me.tableCheques = New ChequesDataTable
        Me.Tables.Add(Me.tableCheques)
        Me.tableListCheques = New ListChequesDataTable
        Me.Tables.Add(Me.tableListCheques)
        Me.tableProveedores = New ProveedoresDataTable
        Me.Tables.Add(Me.tableProveedores)
        Me.tablevChequesDep = New vChequesDepDataTable
        Me.Tables.Add(Me.tablevChequesDep)
        Me.tableBancos = New BancosDataTable
        Me.Tables.Add(Me.tableBancos)
        Me.tableCuentas_bancarias1 = New Cuentas_bancarias1DataTable
        Me.Tables.Add(Me.tableCuentas_bancarias1)
    End Sub
    
    Private Function ShouldSerializeCuentas_bancarias() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCheques() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeListCheques() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeProveedores() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializevChequesDep() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBancos() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCuentas_bancarias1() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub Cuentas_bancariasRowChangeEventHandler(ByVal sender As Object, ByVal e As Cuentas_bancariasRowChangeEvent)
    
    Public Delegate Sub ChequesRowChangeEventHandler(ByVal sender As Object, ByVal e As ChequesRowChangeEvent)
    
    Public Delegate Sub ListChequesRowChangeEventHandler(ByVal sender As Object, ByVal e As ListChequesRowChangeEvent)
    
    Public Delegate Sub ProveedoresRowChangeEventHandler(ByVal sender As Object, ByVal e As ProveedoresRowChangeEvent)
    
    Public Delegate Sub vChequesDepRowChangeEventHandler(ByVal sender As Object, ByVal e As vChequesDepRowChangeEvent)
    
    Public Delegate Sub BancosRowChangeEventHandler(ByVal sender As Object, ByVal e As BancosRowChangeEvent)
    
    Public Delegate Sub Cuentas_bancarias1RowChangeEventHandler(ByVal sender As Object, ByVal e As Cuentas_bancarias1RowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Cuentas_bancariasDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCuenta As DataColumn
        
        Private columnCodigo_banco As DataColumn
        
        Private columnNombreCuenta As DataColumn
        
        Private columnId_CuentaBancaria As DataColumn
        
        Private columnDescripcion As DataColumn
        
        Private columnMonedaNombre As DataColumn
        
        Private columnSaldo As DataColumn
        
        Private columntipoCuenta As DataColumn
        
        Friend Sub New()
            MyBase.New("Cuentas_bancarias")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CuentaColumn As DataColumn
            Get
                Return Me.columnCuenta
            End Get
        End Property
        
        Friend ReadOnly Property Codigo_bancoColumn As DataColumn
            Get
                Return Me.columnCodigo_banco
            End Get
        End Property
        
        Friend ReadOnly Property NombreCuentaColumn As DataColumn
            Get
                Return Me.columnNombreCuenta
            End Get
        End Property
        
        Friend ReadOnly Property Id_CuentaBancariaColumn As DataColumn
            Get
                Return Me.columnId_CuentaBancaria
            End Get
        End Property
        
        Friend ReadOnly Property DescripcionColumn As DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        Friend ReadOnly Property MonedaNombreColumn As DataColumn
            Get
                Return Me.columnMonedaNombre
            End Get
        End Property
        
        Friend ReadOnly Property SaldoColumn As DataColumn
            Get
                Return Me.columnSaldo
            End Get
        End Property
        
        Friend ReadOnly Property tipoCuentaColumn As DataColumn
            Get
                Return Me.columntipoCuenta
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Cuentas_bancariasRow
            Get
                Return CType(Me.Rows(index),Cuentas_bancariasRow)
            End Get
        End Property
        
        Public Event Cuentas_bancariasRowChanged As Cuentas_bancariasRowChangeEventHandler
        
        Public Event Cuentas_bancariasRowChanging As Cuentas_bancariasRowChangeEventHandler
        
        Public Event Cuentas_bancariasRowDeleted As Cuentas_bancariasRowChangeEventHandler
        
        Public Event Cuentas_bancariasRowDeleting As Cuentas_bancariasRowChangeEventHandler
        
        Public Overloads Sub AddCuentas_bancariasRow(ByVal row As Cuentas_bancariasRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCuentas_bancariasRow(ByVal Cuenta As String, ByVal Codigo_banco As Long, ByVal NombreCuenta As String, ByVal Id_CuentaBancaria As Integer, ByVal Descripcion As String, ByVal MonedaNombre As String, ByVal Saldo As Double, ByVal tipoCuenta As String) As Cuentas_bancariasRow
            Dim rowCuentas_bancariasRow As Cuentas_bancariasRow = CType(Me.NewRow,Cuentas_bancariasRow)
            rowCuentas_bancariasRow.ItemArray = New Object() {Cuenta, Codigo_banco, NombreCuenta, Id_CuentaBancaria, Descripcion, MonedaNombre, Saldo, tipoCuenta}
            Me.Rows.Add(rowCuentas_bancariasRow)
            Return rowCuentas_bancariasRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Cuentas_bancariasDataTable = CType(MyBase.Clone,Cuentas_bancariasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Cuentas_bancariasDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCuenta = Me.Columns("Cuenta")
            Me.columnCodigo_banco = Me.Columns("Codigo_banco")
            Me.columnNombreCuenta = Me.Columns("NombreCuenta")
            Me.columnId_CuentaBancaria = Me.Columns("Id_CuentaBancaria")
            Me.columnDescripcion = Me.Columns("Descripcion")
            Me.columnMonedaNombre = Me.Columns("MonedaNombre")
            Me.columnSaldo = Me.Columns("Saldo")
            Me.columntipoCuenta = Me.Columns("tipoCuenta")
        End Sub
        
        Private Sub InitClass()
            Me.columnCuenta = New DataColumn("Cuenta", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuenta)
            Me.columnCodigo_banco = New DataColumn("Codigo_banco", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodigo_banco)
            Me.columnNombreCuenta = New DataColumn("NombreCuenta", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombreCuenta)
            Me.columnId_CuentaBancaria = New DataColumn("Id_CuentaBancaria", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_CuentaBancaria)
            Me.columnDescripcion = New DataColumn("Descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcion)
            Me.columnMonedaNombre = New DataColumn("MonedaNombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonedaNombre)
            Me.columnSaldo = New DataColumn("Saldo", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldo)
            Me.columntipoCuenta = New DataColumn("tipoCuenta", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntipoCuenta)
            Me.columnCuenta.AllowDBNull = false
            Me.columnCodigo_banco.AllowDBNull = false
            Me.columnNombreCuenta.AllowDBNull = false
            Me.columnId_CuentaBancaria.AllowDBNull = false
            Me.columnDescripcion.AllowDBNull = false
            Me.columnMonedaNombre.AllowDBNull = false
            Me.columnSaldo.ReadOnly = true
            Me.columntipoCuenta.AllowDBNull = false
        End Sub
        
        Public Function NewCuentas_bancariasRow() As Cuentas_bancariasRow
            Return CType(Me.NewRow,Cuentas_bancariasRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Cuentas_bancariasRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Cuentas_bancariasRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Cuentas_bancariasRowChangedEvent) Is Nothing) Then
                RaiseEvent Cuentas_bancariasRowChanged(Me, New Cuentas_bancariasRowChangeEvent(CType(e.Row,Cuentas_bancariasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Cuentas_bancariasRowChangingEvent) Is Nothing) Then
                RaiseEvent Cuentas_bancariasRowChanging(Me, New Cuentas_bancariasRowChangeEvent(CType(e.Row,Cuentas_bancariasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Cuentas_bancariasRowDeletedEvent) Is Nothing) Then
                RaiseEvent Cuentas_bancariasRowDeleted(Me, New Cuentas_bancariasRowChangeEvent(CType(e.Row,Cuentas_bancariasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Cuentas_bancariasRowDeletingEvent) Is Nothing) Then
                RaiseEvent Cuentas_bancariasRowDeleting(Me, New Cuentas_bancariasRowChangeEvent(CType(e.Row,Cuentas_bancariasRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCuentas_bancariasRow(ByVal row As Cuentas_bancariasRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Cuentas_bancariasRow
        Inherits DataRow
        
        Private tableCuentas_bancarias As Cuentas_bancariasDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCuentas_bancarias = CType(Me.Table,Cuentas_bancariasDataTable)
        End Sub
        
        Public Property Cuenta As String
            Get
                Return CType(Me(Me.tableCuentas_bancarias.CuentaColumn),String)
            End Get
            Set
                Me(Me.tableCuentas_bancarias.CuentaColumn) = value
            End Set
        End Property
        
        Public Property Codigo_banco As Long
            Get
                Return CType(Me(Me.tableCuentas_bancarias.Codigo_bancoColumn),Long)
            End Get
            Set
                Me(Me.tableCuentas_bancarias.Codigo_bancoColumn) = value
            End Set
        End Property
        
        Public Property NombreCuenta As String
            Get
                Return CType(Me(Me.tableCuentas_bancarias.NombreCuentaColumn),String)
            End Get
            Set
                Me(Me.tableCuentas_bancarias.NombreCuentaColumn) = value
            End Set
        End Property
        
        Public Property Id_CuentaBancaria As Integer
            Get
                Return CType(Me(Me.tableCuentas_bancarias.Id_CuentaBancariaColumn),Integer)
            End Get
            Set
                Me(Me.tableCuentas_bancarias.Id_CuentaBancariaColumn) = value
            End Set
        End Property
        
        Public Property Descripcion As String
            Get
                Return CType(Me(Me.tableCuentas_bancarias.DescripcionColumn),String)
            End Get
            Set
                Me(Me.tableCuentas_bancarias.DescripcionColumn) = value
            End Set
        End Property
        
        Public Property MonedaNombre As String
            Get
                Return CType(Me(Me.tableCuentas_bancarias.MonedaNombreColumn),String)
            End Get
            Set
                Me(Me.tableCuentas_bancarias.MonedaNombreColumn) = value
            End Set
        End Property
        
        Public Property Saldo As Double
            Get
                Try 
                    Return CType(Me(Me.tableCuentas_bancarias.SaldoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCuentas_bancarias.SaldoColumn) = value
            End Set
        End Property
        
        Public Property tipoCuenta As String
            Get
                Return CType(Me(Me.tableCuentas_bancarias.tipoCuentaColumn),String)
            End Get
            Set
                Me(Me.tableCuentas_bancarias.tipoCuentaColumn) = value
            End Set
        End Property
        
        Public Function IsSaldoNull() As Boolean
            Return Me.IsNull(Me.tableCuentas_bancarias.SaldoColumn)
        End Function
        
        Public Sub SetSaldoNull()
            Me(Me.tableCuentas_bancarias.SaldoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Cuentas_bancariasRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Cuentas_bancariasRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Cuentas_bancariasRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Cuentas_bancariasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ChequesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPortador As DataColumn
        
        Friend Sub New()
            MyBase.New("Cheques")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property PortadorColumn As DataColumn
            Get
                Return Me.columnPortador
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ChequesRow
            Get
                Return CType(Me.Rows(index),ChequesRow)
            End Get
        End Property
        
        Public Event ChequesRowChanged As ChequesRowChangeEventHandler
        
        Public Event ChequesRowChanging As ChequesRowChangeEventHandler
        
        Public Event ChequesRowDeleted As ChequesRowChangeEventHandler
        
        Public Event ChequesRowDeleting As ChequesRowChangeEventHandler
        
        Public Overloads Sub AddChequesRow(ByVal row As ChequesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddChequesRow(ByVal Portador As String) As ChequesRow
            Dim rowChequesRow As ChequesRow = CType(Me.NewRow,ChequesRow)
            rowChequesRow.ItemArray = New Object() {Portador}
            Me.Rows.Add(rowChequesRow)
            Return rowChequesRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ChequesDataTable = CType(MyBase.Clone,ChequesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ChequesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnPortador = Me.Columns("Portador")
        End Sub
        
        Private Sub InitClass()
            Me.columnPortador = New DataColumn("Portador", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPortador)
            Me.columnPortador.AllowDBNull = false
        End Sub
        
        Public Function NewChequesRow() As ChequesRow
            Return CType(Me.NewRow,ChequesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ChequesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ChequesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ChequesRowChangedEvent) Is Nothing) Then
                RaiseEvent ChequesRowChanged(Me, New ChequesRowChangeEvent(CType(e.Row,ChequesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ChequesRowChangingEvent) Is Nothing) Then
                RaiseEvent ChequesRowChanging(Me, New ChequesRowChangeEvent(CType(e.Row,ChequesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ChequesRowDeletedEvent) Is Nothing) Then
                RaiseEvent ChequesRowDeleted(Me, New ChequesRowChangeEvent(CType(e.Row,ChequesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ChequesRowDeletingEvent) Is Nothing) Then
                RaiseEvent ChequesRowDeleting(Me, New ChequesRowChangeEvent(CType(e.Row,ChequesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveChequesRow(ByVal row As ChequesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ChequesRow
        Inherits DataRow
        
        Private tableCheques As ChequesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCheques = CType(Me.Table,ChequesDataTable)
        End Sub
        
        Public Property Portador As String
            Get
                Return CType(Me(Me.tableCheques.PortadorColumn),String)
            End Get
            Set
                Me(Me.tableCheques.PortadorColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ChequesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ChequesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ChequesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ChequesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ListChequesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId_Cheque As DataColumn
        
        Private columnPortador As DataColumn
        
        Friend Sub New()
            MyBase.New("ListCheques")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Id_ChequeColumn As DataColumn
            Get
                Return Me.columnId_Cheque
            End Get
        End Property
        
        Friend ReadOnly Property PortadorColumn As DataColumn
            Get
                Return Me.columnPortador
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ListChequesRow
            Get
                Return CType(Me.Rows(index),ListChequesRow)
            End Get
        End Property
        
        Public Event ListChequesRowChanged As ListChequesRowChangeEventHandler
        
        Public Event ListChequesRowChanging As ListChequesRowChangeEventHandler
        
        Public Event ListChequesRowDeleted As ListChequesRowChangeEventHandler
        
        Public Event ListChequesRowDeleting As ListChequesRowChangeEventHandler
        
        Public Overloads Sub AddListChequesRow(ByVal row As ListChequesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddListChequesRow(ByVal Id_Cheque As Integer, ByVal Portador As String) As ListChequesRow
            Dim rowListChequesRow As ListChequesRow = CType(Me.NewRow,ListChequesRow)
            rowListChequesRow.ItemArray = New Object() {Id_Cheque, Portador}
            Me.Rows.Add(rowListChequesRow)
            Return rowListChequesRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ListChequesDataTable = CType(MyBase.Clone,ListChequesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ListChequesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId_Cheque = Me.Columns("Id_Cheque")
            Me.columnPortador = Me.Columns("Portador")
        End Sub
        
        Private Sub InitClass()
            Me.columnId_Cheque = New DataColumn("Id_Cheque", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Cheque)
            Me.columnPortador = New DataColumn("Portador", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPortador)
        End Sub
        
        Public Function NewListChequesRow() As ListChequesRow
            Return CType(Me.NewRow,ListChequesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ListChequesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ListChequesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ListChequesRowChangedEvent) Is Nothing) Then
                RaiseEvent ListChequesRowChanged(Me, New ListChequesRowChangeEvent(CType(e.Row,ListChequesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ListChequesRowChangingEvent) Is Nothing) Then
                RaiseEvent ListChequesRowChanging(Me, New ListChequesRowChangeEvent(CType(e.Row,ListChequesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ListChequesRowDeletedEvent) Is Nothing) Then
                RaiseEvent ListChequesRowDeleted(Me, New ListChequesRowChangeEvent(CType(e.Row,ListChequesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ListChequesRowDeletingEvent) Is Nothing) Then
                RaiseEvent ListChequesRowDeleting(Me, New ListChequesRowChangeEvent(CType(e.Row,ListChequesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveListChequesRow(ByVal row As ListChequesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ListChequesRow
        Inherits DataRow
        
        Private tableListCheques As ListChequesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableListCheques = CType(Me.Table,ListChequesDataTable)
        End Sub
        
        Public Property Id_Cheque As Integer
            Get
                Try 
                    Return CType(Me(Me.tableListCheques.Id_ChequeColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableListCheques.Id_ChequeColumn) = value
            End Set
        End Property
        
        Public Property Portador As String
            Get
                Try 
                    Return CType(Me(Me.tableListCheques.PortadorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableListCheques.PortadorColumn) = value
            End Set
        End Property
        
        Public Function IsId_ChequeNull() As Boolean
            Return Me.IsNull(Me.tableListCheques.Id_ChequeColumn)
        End Function
        
        Public Sub SetId_ChequeNull()
            Me(Me.tableListCheques.Id_ChequeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPortadorNull() As Boolean
            Return Me.IsNull(Me.tableListCheques.PortadorColumn)
        End Function
        
        Public Sub SetPortadorNull()
            Me(Me.tableListCheques.PortadorColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ListChequesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ListChequesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ListChequesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ListChequesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProveedoresDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCodigoProv As DataColumn
        
        Private columnCedula As DataColumn
        
        Private columnNombre As DataColumn
        
        Private columnContacto As DataColumn
        
        Private columnTelefono_Cont As DataColumn
        
        Private columnObservaciones As DataColumn
        
        Private columnTelefono1 As DataColumn
        
        Private columnTelefono2 As DataColumn
        
        Private columnFax1 As DataColumn
        
        Private columnFax2 As DataColumn
        
        Private columnEmail As DataColumn
        
        Private columnDireccion As DataColumn
        
        Private columnMontoCredito As DataColumn
        
        Private columnPlazo As DataColumn
        
        Private columnCostoTotal As DataColumn
        
        Private columnImpIncluido As DataColumn
        
        Private columnPedidosMes As DataColumn
        
        Private columnUtilidad_Inventario As DataColumn
        
        Private columnUtilidad_Fija As DataColumn
        
        Private columnCuentaContable As DataColumn
        
        Private columnDescripcionCuentaContable As DataColumn
        
        Private columnTourOperador As DataColumn
        
        Friend Sub New()
            MyBase.New("Proveedores")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CodigoProvColumn As DataColumn
            Get
                Return Me.columnCodigoProv
            End Get
        End Property
        
        Friend ReadOnly Property CedulaColumn As DataColumn
            Get
                Return Me.columnCedula
            End Get
        End Property
        
        Friend ReadOnly Property NombreColumn As DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        Friend ReadOnly Property ContactoColumn As DataColumn
            Get
                Return Me.columnContacto
            End Get
        End Property
        
        Friend ReadOnly Property Telefono_ContColumn As DataColumn
            Get
                Return Me.columnTelefono_Cont
            End Get
        End Property
        
        Friend ReadOnly Property ObservacionesColumn As DataColumn
            Get
                Return Me.columnObservaciones
            End Get
        End Property
        
        Friend ReadOnly Property Telefono1Column As DataColumn
            Get
                Return Me.columnTelefono1
            End Get
        End Property
        
        Friend ReadOnly Property Telefono2Column As DataColumn
            Get
                Return Me.columnTelefono2
            End Get
        End Property
        
        Friend ReadOnly Property Fax1Column As DataColumn
            Get
                Return Me.columnFax1
            End Get
        End Property
        
        Friend ReadOnly Property Fax2Column As DataColumn
            Get
                Return Me.columnFax2
            End Get
        End Property
        
        Friend ReadOnly Property EmailColumn As DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        Friend ReadOnly Property DireccionColumn As DataColumn
            Get
                Return Me.columnDireccion
            End Get
        End Property
        
        Friend ReadOnly Property MontoCreditoColumn As DataColumn
            Get
                Return Me.columnMontoCredito
            End Get
        End Property
        
        Friend ReadOnly Property PlazoColumn As DataColumn
            Get
                Return Me.columnPlazo
            End Get
        End Property
        
        Friend ReadOnly Property CostoTotalColumn As DataColumn
            Get
                Return Me.columnCostoTotal
            End Get
        End Property
        
        Friend ReadOnly Property ImpIncluidoColumn As DataColumn
            Get
                Return Me.columnImpIncluido
            End Get
        End Property
        
        Friend ReadOnly Property PedidosMesColumn As DataColumn
            Get
                Return Me.columnPedidosMes
            End Get
        End Property
        
        Friend ReadOnly Property Utilidad_InventarioColumn As DataColumn
            Get
                Return Me.columnUtilidad_Inventario
            End Get
        End Property
        
        Friend ReadOnly Property Utilidad_FijaColumn As DataColumn
            Get
                Return Me.columnUtilidad_Fija
            End Get
        End Property
        
        Friend ReadOnly Property CuentaContableColumn As DataColumn
            Get
                Return Me.columnCuentaContable
            End Get
        End Property
        
        Friend ReadOnly Property DescripcionCuentaContableColumn As DataColumn
            Get
                Return Me.columnDescripcionCuentaContable
            End Get
        End Property
        
        Friend ReadOnly Property TourOperadorColumn As DataColumn
            Get
                Return Me.columnTourOperador
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProveedoresRow
            Get
                Return CType(Me.Rows(index),ProveedoresRow)
            End Get
        End Property
        
        Public Event ProveedoresRowChanged As ProveedoresRowChangeEventHandler
        
        Public Event ProveedoresRowChanging As ProveedoresRowChangeEventHandler
        
        Public Event ProveedoresRowDeleted As ProveedoresRowChangeEventHandler
        
        Public Event ProveedoresRowDeleting As ProveedoresRowChangeEventHandler
        
        Public Overloads Sub AddProveedoresRow(ByVal row As ProveedoresRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddProveedoresRow( _
                    ByVal CodigoProv As Integer,  _
                    ByVal Cedula As String,  _
                    ByVal Nombre As String,  _
                    ByVal Contacto As String,  _
                    ByVal Telefono_Cont As String,  _
                    ByVal Observaciones As String,  _
                    ByVal Telefono1 As String,  _
                    ByVal Telefono2 As String,  _
                    ByVal Fax1 As String,  _
                    ByVal Fax2 As String,  _
                    ByVal Email As String,  _
                    ByVal Direccion As String,  _
                    ByVal MontoCredito As Double,  _
                    ByVal Plazo As Integer,  _
                    ByVal CostoTotal As Boolean,  _
                    ByVal ImpIncluido As Boolean,  _
                    ByVal PedidosMes As Integer,  _
                    ByVal Utilidad_Inventario As Double,  _
                    ByVal Utilidad_Fija As Boolean,  _
                    ByVal CuentaContable As String,  _
                    ByVal DescripcionCuentaContable As String,  _
                    ByVal TourOperador As Boolean) As ProveedoresRow
            Dim rowProveedoresRow As ProveedoresRow = CType(Me.NewRow,ProveedoresRow)
            rowProveedoresRow.ItemArray = New Object() {CodigoProv, Cedula, Nombre, Contacto, Telefono_Cont, Observaciones, Telefono1, Telefono2, Fax1, Fax2, Email, Direccion, MontoCredito, Plazo, CostoTotal, ImpIncluido, PedidosMes, Utilidad_Inventario, Utilidad_Fija, CuentaContable, DescripcionCuentaContable, TourOperador}
            Me.Rows.Add(rowProveedoresRow)
            Return rowProveedoresRow
        End Function
        
        Public Function FindByCodigoProv(ByVal CodigoProv As Integer) As ProveedoresRow
            Return CType(Me.Rows.Find(New Object() {CodigoProv}),ProveedoresRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ProveedoresDataTable = CType(MyBase.Clone,ProveedoresDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ProveedoresDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCodigoProv = Me.Columns("CodigoProv")
            Me.columnCedula = Me.Columns("Cedula")
            Me.columnNombre = Me.Columns("Nombre")
            Me.columnContacto = Me.Columns("Contacto")
            Me.columnTelefono_Cont = Me.Columns("Telefono_Cont")
            Me.columnObservaciones = Me.Columns("Observaciones")
            Me.columnTelefono1 = Me.Columns("Telefono1")
            Me.columnTelefono2 = Me.Columns("Telefono2")
            Me.columnFax1 = Me.Columns("Fax1")
            Me.columnFax2 = Me.Columns("Fax2")
            Me.columnEmail = Me.Columns("Email")
            Me.columnDireccion = Me.Columns("Direccion")
            Me.columnMontoCredito = Me.Columns("MontoCredito")
            Me.columnPlazo = Me.Columns("Plazo")
            Me.columnCostoTotal = Me.Columns("CostoTotal")
            Me.columnImpIncluido = Me.Columns("ImpIncluido")
            Me.columnPedidosMes = Me.Columns("PedidosMes")
            Me.columnUtilidad_Inventario = Me.Columns("Utilidad_Inventario")
            Me.columnUtilidad_Fija = Me.Columns("Utilidad_Fija")
            Me.columnCuentaContable = Me.Columns("CuentaContable")
            Me.columnDescripcionCuentaContable = Me.Columns("DescripcionCuentaContable")
            Me.columnTourOperador = Me.Columns("TourOperador")
        End Sub
        
        Private Sub InitClass()
            Me.columnCodigoProv = New DataColumn("CodigoProv", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodigoProv)
            Me.columnCedula = New DataColumn("Cedula", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCedula)
            Me.columnNombre = New DataColumn("Nombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombre)
            Me.columnContacto = New DataColumn("Contacto", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnContacto)
            Me.columnTelefono_Cont = New DataColumn("Telefono_Cont", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTelefono_Cont)
            Me.columnObservaciones = New DataColumn("Observaciones", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnObservaciones)
            Me.columnTelefono1 = New DataColumn("Telefono1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTelefono1)
            Me.columnTelefono2 = New DataColumn("Telefono2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTelefono2)
            Me.columnFax1 = New DataColumn("Fax1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFax1)
            Me.columnFax2 = New DataColumn("Fax2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFax2)
            Me.columnEmail = New DataColumn("Email", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmail)
            Me.columnDireccion = New DataColumn("Direccion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDireccion)
            Me.columnMontoCredito = New DataColumn("MontoCredito", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMontoCredito)
            Me.columnPlazo = New DataColumn("Plazo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPlazo)
            Me.columnCostoTotal = New DataColumn("CostoTotal", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCostoTotal)
            Me.columnImpIncluido = New DataColumn("ImpIncluido", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnImpIncluido)
            Me.columnPedidosMes = New DataColumn("PedidosMes", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPedidosMes)
            Me.columnUtilidad_Inventario = New DataColumn("Utilidad_Inventario", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUtilidad_Inventario)
            Me.columnUtilidad_Fija = New DataColumn("Utilidad_Fija", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUtilidad_Fija)
            Me.columnCuentaContable = New DataColumn("CuentaContable", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuentaContable)
            Me.columnDescripcionCuentaContable = New DataColumn("DescripcionCuentaContable", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcionCuentaContable)
            Me.columnTourOperador = New DataColumn("TourOperador", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTourOperador)
            Me.Constraints.Add(New UniqueConstraint("DataSet1Key1", New DataColumn() {Me.columnCodigoProv}, true))
            Me.columnCodigoProv.AllowDBNull = false
            Me.columnCodigoProv.Unique = true
            Me.columnCedula.AllowDBNull = false
            Me.columnNombre.AllowDBNull = false
            Me.columnContacto.AllowDBNull = false
            Me.columnTelefono_Cont.AllowDBNull = false
            Me.columnObservaciones.AllowDBNull = false
            Me.columnTelefono1.AllowDBNull = false
            Me.columnTelefono2.AllowDBNull = false
            Me.columnFax1.AllowDBNull = false
            Me.columnFax2.AllowDBNull = false
            Me.columnEmail.AllowDBNull = false
            Me.columnDireccion.AllowDBNull = false
            Me.columnMontoCredito.AllowDBNull = false
            Me.columnPlazo.AllowDBNull = false
            Me.columnCostoTotal.AllowDBNull = false
            Me.columnImpIncluido.AllowDBNull = false
            Me.columnPedidosMes.AllowDBNull = false
            Me.columnUtilidad_Inventario.AllowDBNull = false
            Me.columnUtilidad_Fija.AllowDBNull = false
            Me.columnTourOperador.AllowDBNull = false
        End Sub
        
        Public Function NewProveedoresRow() As ProveedoresRow
            Return CType(Me.NewRow,ProveedoresRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ProveedoresRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ProveedoresRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProveedoresRowChangedEvent) Is Nothing) Then
                RaiseEvent ProveedoresRowChanged(Me, New ProveedoresRowChangeEvent(CType(e.Row,ProveedoresRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProveedoresRowChangingEvent) Is Nothing) Then
                RaiseEvent ProveedoresRowChanging(Me, New ProveedoresRowChangeEvent(CType(e.Row,ProveedoresRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProveedoresRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProveedoresRowDeleted(Me, New ProveedoresRowChangeEvent(CType(e.Row,ProveedoresRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProveedoresRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProveedoresRowDeleting(Me, New ProveedoresRowChangeEvent(CType(e.Row,ProveedoresRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveProveedoresRow(ByVal row As ProveedoresRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProveedoresRow
        Inherits DataRow
        
        Private tableProveedores As ProveedoresDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableProveedores = CType(Me.Table,ProveedoresDataTable)
        End Sub
        
        Public Property CodigoProv As Integer
            Get
                Return CType(Me(Me.tableProveedores.CodigoProvColumn),Integer)
            End Get
            Set
                Me(Me.tableProveedores.CodigoProvColumn) = value
            End Set
        End Property
        
        Public Property Cedula As String
            Get
                Return CType(Me(Me.tableProveedores.CedulaColumn),String)
            End Get
            Set
                Me(Me.tableProveedores.CedulaColumn) = value
            End Set
        End Property
        
        Public Property Nombre As String
            Get
                Return CType(Me(Me.tableProveedores.NombreColumn),String)
            End Get
            Set
                Me(Me.tableProveedores.NombreColumn) = value
            End Set
        End Property
        
        Public Property Contacto As String
            Get
                Return CType(Me(Me.tableProveedores.ContactoColumn),String)
            End Get
            Set
                Me(Me.tableProveedores.ContactoColumn) = value
            End Set
        End Property
        
        Public Property Telefono_Cont As String
            Get
                Return CType(Me(Me.tableProveedores.Telefono_ContColumn),String)
            End Get
            Set
                Me(Me.tableProveedores.Telefono_ContColumn) = value
            End Set
        End Property
        
        Public Property Observaciones As String
            Get
                Return CType(Me(Me.tableProveedores.ObservacionesColumn),String)
            End Get
            Set
                Me(Me.tableProveedores.ObservacionesColumn) = value
            End Set
        End Property
        
        Public Property Telefono1 As String
            Get
                Return CType(Me(Me.tableProveedores.Telefono1Column),String)
            End Get
            Set
                Me(Me.tableProveedores.Telefono1Column) = value
            End Set
        End Property
        
        Public Property Telefono2 As String
            Get
                Return CType(Me(Me.tableProveedores.Telefono2Column),String)
            End Get
            Set
                Me(Me.tableProveedores.Telefono2Column) = value
            End Set
        End Property
        
        Public Property Fax1 As String
            Get
                Return CType(Me(Me.tableProveedores.Fax1Column),String)
            End Get
            Set
                Me(Me.tableProveedores.Fax1Column) = value
            End Set
        End Property
        
        Public Property Fax2 As String
            Get
                Return CType(Me(Me.tableProveedores.Fax2Column),String)
            End Get
            Set
                Me(Me.tableProveedores.Fax2Column) = value
            End Set
        End Property
        
        Public Property Email As String
            Get
                Return CType(Me(Me.tableProveedores.EmailColumn),String)
            End Get
            Set
                Me(Me.tableProveedores.EmailColumn) = value
            End Set
        End Property
        
        Public Property Direccion As String
            Get
                Return CType(Me(Me.tableProveedores.DireccionColumn),String)
            End Get
            Set
                Me(Me.tableProveedores.DireccionColumn) = value
            End Set
        End Property
        
        Public Property MontoCredito As Double
            Get
                Return CType(Me(Me.tableProveedores.MontoCreditoColumn),Double)
            End Get
            Set
                Me(Me.tableProveedores.MontoCreditoColumn) = value
            End Set
        End Property
        
        Public Property Plazo As Integer
            Get
                Return CType(Me(Me.tableProveedores.PlazoColumn),Integer)
            End Get
            Set
                Me(Me.tableProveedores.PlazoColumn) = value
            End Set
        End Property
        
        Public Property CostoTotal As Boolean
            Get
                Return CType(Me(Me.tableProveedores.CostoTotalColumn),Boolean)
            End Get
            Set
                Me(Me.tableProveedores.CostoTotalColumn) = value
            End Set
        End Property
        
        Public Property ImpIncluido As Boolean
            Get
                Return CType(Me(Me.tableProveedores.ImpIncluidoColumn),Boolean)
            End Get
            Set
                Me(Me.tableProveedores.ImpIncluidoColumn) = value
            End Set
        End Property
        
        Public Property PedidosMes As Integer
            Get
                Return CType(Me(Me.tableProveedores.PedidosMesColumn),Integer)
            End Get
            Set
                Me(Me.tableProveedores.PedidosMesColumn) = value
            End Set
        End Property
        
        Public Property Utilidad_Inventario As Double
            Get
                Return CType(Me(Me.tableProveedores.Utilidad_InventarioColumn),Double)
            End Get
            Set
                Me(Me.tableProveedores.Utilidad_InventarioColumn) = value
            End Set
        End Property
        
        Public Property Utilidad_Fija As Boolean
            Get
                Return CType(Me(Me.tableProveedores.Utilidad_FijaColumn),Boolean)
            End Get
            Set
                Me(Me.tableProveedores.Utilidad_FijaColumn) = value
            End Set
        End Property
        
        Public Property CuentaContable As String
            Get
                Try 
                    Return CType(Me(Me.tableProveedores.CuentaContableColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProveedores.CuentaContableColumn) = value
            End Set
        End Property
        
        Public Property DescripcionCuentaContable As String
            Get
                Try 
                    Return CType(Me(Me.tableProveedores.DescripcionCuentaContableColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProveedores.DescripcionCuentaContableColumn) = value
            End Set
        End Property
        
        Public Property TourOperador As Boolean
            Get
                Return CType(Me(Me.tableProveedores.TourOperadorColumn),Boolean)
            End Get
            Set
                Me(Me.tableProveedores.TourOperadorColumn) = value
            End Set
        End Property
        
        Public Function IsCuentaContableNull() As Boolean
            Return Me.IsNull(Me.tableProveedores.CuentaContableColumn)
        End Function
        
        Public Sub SetCuentaContableNull()
            Me(Me.tableProveedores.CuentaContableColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescripcionCuentaContableNull() As Boolean
            Return Me.IsNull(Me.tableProveedores.DescripcionCuentaContableColumn)
        End Function
        
        Public Sub SetDescripcionCuentaContableNull()
            Me(Me.tableProveedores.DescripcionCuentaContableColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProveedoresRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ProveedoresRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ProveedoresRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ProveedoresRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class vChequesDepDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId_Cheque As DataColumn
        
        Private columnNum_Cheque As DataColumn
        
        Private columnNombreCuenta As DataColumn
        
        Private columnId_CuentaBancaria As DataColumn
        
        Private columnFecha As DataColumn
        
        Private columnPortador As DataColumn
        
        Private columnMonto As DataColumn
        
        Private columnConciliado As DataColumn
        
        Private columnAnulado As DataColumn
        
        Private columnObservaciones As DataColumn
        
        Private columnCed_Usuario As DataColumn
        
        Private columnCuenta_Destino As DataColumn
        
        Private columnTipo As DataColumn
        
        Private columnCodigoMoneda As DataColumn
        
        Private columnTipoCambio As DataColumn
        
        Private columnInfoDep As DataColumn
        
        Private columnInfoBanco As DataColumn
        
        Private columnMontoDep As DataColumn
        
        Private columnMonedaDep As DataColumn
        
        Private columnMonedaStr As DataColumn
        
        Friend Sub New()
            MyBase.New("vChequesDep")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Id_ChequeColumn As DataColumn
            Get
                Return Me.columnId_Cheque
            End Get
        End Property
        
        Friend ReadOnly Property Num_ChequeColumn As DataColumn
            Get
                Return Me.columnNum_Cheque
            End Get
        End Property
        
        Friend ReadOnly Property NombreCuentaColumn As DataColumn
            Get
                Return Me.columnNombreCuenta
            End Get
        End Property
        
        Friend ReadOnly Property Id_CuentaBancariaColumn As DataColumn
            Get
                Return Me.columnId_CuentaBancaria
            End Get
        End Property
        
        Friend ReadOnly Property FechaColumn As DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        Friend ReadOnly Property PortadorColumn As DataColumn
            Get
                Return Me.columnPortador
            End Get
        End Property
        
        Friend ReadOnly Property MontoColumn As DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        Friend ReadOnly Property ConciliadoColumn As DataColumn
            Get
                Return Me.columnConciliado
            End Get
        End Property
        
        Friend ReadOnly Property AnuladoColumn As DataColumn
            Get
                Return Me.columnAnulado
            End Get
        End Property
        
        Friend ReadOnly Property ObservacionesColumn As DataColumn
            Get
                Return Me.columnObservaciones
            End Get
        End Property
        
        Friend ReadOnly Property Ced_UsuarioColumn As DataColumn
            Get
                Return Me.columnCed_Usuario
            End Get
        End Property
        
        Friend ReadOnly Property Cuenta_DestinoColumn As DataColumn
            Get
                Return Me.columnCuenta_Destino
            End Get
        End Property
        
        Friend ReadOnly Property TipoColumn As DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        Friend ReadOnly Property CodigoMonedaColumn As DataColumn
            Get
                Return Me.columnCodigoMoneda
            End Get
        End Property
        
        Friend ReadOnly Property TipoCambioColumn As DataColumn
            Get
                Return Me.columnTipoCambio
            End Get
        End Property
        
        Friend ReadOnly Property InfoDepColumn As DataColumn
            Get
                Return Me.columnInfoDep
            End Get
        End Property
        
        Friend ReadOnly Property InfoBancoColumn As DataColumn
            Get
                Return Me.columnInfoBanco
            End Get
        End Property
        
        Friend ReadOnly Property MontoDepColumn As DataColumn
            Get
                Return Me.columnMontoDep
            End Get
        End Property
        
        Friend ReadOnly Property MonedaDepColumn As DataColumn
            Get
                Return Me.columnMonedaDep
            End Get
        End Property
        
        Friend ReadOnly Property MonedaStrColumn As DataColumn
            Get
                Return Me.columnMonedaStr
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As vChequesDepRow
            Get
                Return CType(Me.Rows(index),vChequesDepRow)
            End Get
        End Property
        
        Public Event vChequesDepRowChanged As vChequesDepRowChangeEventHandler
        
        Public Event vChequesDepRowChanging As vChequesDepRowChangeEventHandler
        
        Public Event vChequesDepRowDeleted As vChequesDepRowChangeEventHandler
        
        Public Event vChequesDepRowDeleting As vChequesDepRowChangeEventHandler
        
        Public Overloads Sub AddvChequesDepRow(ByVal row As vChequesDepRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddvChequesDepRow( _
                    ByVal Num_Cheque As Long,  _
                    ByVal NombreCuenta As String,  _
                    ByVal Id_CuentaBancaria As Integer,  _
                    ByVal Fecha As Date,  _
                    ByVal Portador As String,  _
                    ByVal Monto As Double,  _
                    ByVal Conciliado As Boolean,  _
                    ByVal Anulado As Boolean,  _
                    ByVal Observaciones As String,  _
                    ByVal Ced_Usuario As String,  _
                    ByVal Cuenta_Destino As String,  _
                    ByVal Tipo As String,  _
                    ByVal CodigoMoneda As Integer,  _
                    ByVal TipoCambio As Double,  _
                    ByVal InfoDep As String,  _
                    ByVal InfoBanco As String,  _
                    ByVal MontoDep As Double,  _
                    ByVal MonedaDep As Integer,  _
                    ByVal MonedaStr As String) As vChequesDepRow
            Dim rowvChequesDepRow As vChequesDepRow = CType(Me.NewRow,vChequesDepRow)
            rowvChequesDepRow.ItemArray = New Object() {Nothing, Num_Cheque, NombreCuenta, Id_CuentaBancaria, Fecha, Portador, Monto, Conciliado, Anulado, Observaciones, Ced_Usuario, Cuenta_Destino, Tipo, CodigoMoneda, TipoCambio, InfoDep, InfoBanco, MontoDep, MonedaDep, MonedaStr}
            Me.Rows.Add(rowvChequesDepRow)
            Return rowvChequesDepRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As vChequesDepDataTable = CType(MyBase.Clone,vChequesDepDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New vChequesDepDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId_Cheque = Me.Columns("Id_Cheque")
            Me.columnNum_Cheque = Me.Columns("Num_Cheque")
            Me.columnNombreCuenta = Me.Columns("NombreCuenta")
            Me.columnId_CuentaBancaria = Me.Columns("Id_CuentaBancaria")
            Me.columnFecha = Me.Columns("Fecha")
            Me.columnPortador = Me.Columns("Portador")
            Me.columnMonto = Me.Columns("Monto")
            Me.columnConciliado = Me.Columns("Conciliado")
            Me.columnAnulado = Me.Columns("Anulado")
            Me.columnObservaciones = Me.Columns("Observaciones")
            Me.columnCed_Usuario = Me.Columns("Ced_Usuario")
            Me.columnCuenta_Destino = Me.Columns("Cuenta_Destino")
            Me.columnTipo = Me.Columns("Tipo")
            Me.columnCodigoMoneda = Me.Columns("CodigoMoneda")
            Me.columnTipoCambio = Me.Columns("TipoCambio")
            Me.columnInfoDep = Me.Columns("InfoDep")
            Me.columnInfoBanco = Me.Columns("InfoBanco")
            Me.columnMontoDep = Me.Columns("MontoDep")
            Me.columnMonedaDep = Me.Columns("MonedaDep")
            Me.columnMonedaStr = Me.Columns("MonedaStr")
        End Sub
        
        Private Sub InitClass()
            Me.columnId_Cheque = New DataColumn("Id_Cheque", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Cheque)
            Me.columnNum_Cheque = New DataColumn("Num_Cheque", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNum_Cheque)
            Me.columnNombreCuenta = New DataColumn("NombreCuenta", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombreCuenta)
            Me.columnId_CuentaBancaria = New DataColumn("Id_CuentaBancaria", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_CuentaBancaria)
            Me.columnFecha = New DataColumn("Fecha", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha)
            Me.columnPortador = New DataColumn("Portador", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPortador)
            Me.columnMonto = New DataColumn("Monto", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto)
            Me.columnConciliado = New DataColumn("Conciliado", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnConciliado)
            Me.columnAnulado = New DataColumn("Anulado", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAnulado)
            Me.columnObservaciones = New DataColumn("Observaciones", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnObservaciones)
            Me.columnCed_Usuario = New DataColumn("Ced_Usuario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCed_Usuario)
            Me.columnCuenta_Destino = New DataColumn("Cuenta_Destino", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuenta_Destino)
            Me.columnTipo = New DataColumn("Tipo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipo)
            Me.columnCodigoMoneda = New DataColumn("CodigoMoneda", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodigoMoneda)
            Me.columnTipoCambio = New DataColumn("TipoCambio", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipoCambio)
            Me.columnInfoDep = New DataColumn("InfoDep", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInfoDep)
            Me.columnInfoBanco = New DataColumn("InfoBanco", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInfoBanco)
            Me.columnMontoDep = New DataColumn("MontoDep", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMontoDep)
            Me.columnMonedaDep = New DataColumn("MonedaDep", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonedaDep)
            Me.columnMonedaStr = New DataColumn("MonedaStr", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonedaStr)
            Me.columnId_Cheque.AutoIncrement = true
            Me.columnId_Cheque.AllowDBNull = false
            Me.columnId_Cheque.ReadOnly = true
            Me.columnNum_Cheque.AllowDBNull = false
            Me.columnNombreCuenta.AllowDBNull = false
            Me.columnId_CuentaBancaria.AllowDBNull = false
            Me.columnFecha.AllowDBNull = false
            Me.columnPortador.AllowDBNull = false
            Me.columnMonto.AllowDBNull = false
            Me.columnConciliado.AllowDBNull = false
            Me.columnAnulado.AllowDBNull = false
            Me.columnObservaciones.AllowDBNull = false
            Me.columnCed_Usuario.AllowDBNull = false
            Me.columnCuenta_Destino.AllowDBNull = false
            Me.columnTipo.AllowDBNull = false
            Me.columnCodigoMoneda.AllowDBNull = false
            Me.columnTipoCambio.AllowDBNull = false
            Me.columnInfoDep.AllowDBNull = false
            Me.columnInfoBanco.AllowDBNull = false
        End Sub
        
        Public Function NewvChequesDepRow() As vChequesDepRow
            Return CType(Me.NewRow,vChequesDepRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New vChequesDepRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(vChequesDepRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.vChequesDepRowChangedEvent) Is Nothing) Then
                RaiseEvent vChequesDepRowChanged(Me, New vChequesDepRowChangeEvent(CType(e.Row,vChequesDepRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.vChequesDepRowChangingEvent) Is Nothing) Then
                RaiseEvent vChequesDepRowChanging(Me, New vChequesDepRowChangeEvent(CType(e.Row,vChequesDepRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.vChequesDepRowDeletedEvent) Is Nothing) Then
                RaiseEvent vChequesDepRowDeleted(Me, New vChequesDepRowChangeEvent(CType(e.Row,vChequesDepRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.vChequesDepRowDeletingEvent) Is Nothing) Then
                RaiseEvent vChequesDepRowDeleting(Me, New vChequesDepRowChangeEvent(CType(e.Row,vChequesDepRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovevChequesDepRow(ByVal row As vChequesDepRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class vChequesDepRow
        Inherits DataRow
        
        Private tablevChequesDep As vChequesDepDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablevChequesDep = CType(Me.Table,vChequesDepDataTable)
        End Sub
        
        Public Property Id_Cheque As Long
            Get
                Return CType(Me(Me.tablevChequesDep.Id_ChequeColumn),Long)
            End Get
            Set
                Me(Me.tablevChequesDep.Id_ChequeColumn) = value
            End Set
        End Property
        
        Public Property Num_Cheque As Long
            Get
                Return CType(Me(Me.tablevChequesDep.Num_ChequeColumn),Long)
            End Get
            Set
                Me(Me.tablevChequesDep.Num_ChequeColumn) = value
            End Set
        End Property
        
        Public Property NombreCuenta As String
            Get
                Return CType(Me(Me.tablevChequesDep.NombreCuentaColumn),String)
            End Get
            Set
                Me(Me.tablevChequesDep.NombreCuentaColumn) = value
            End Set
        End Property
        
        Public Property Id_CuentaBancaria As Integer
            Get
                Return CType(Me(Me.tablevChequesDep.Id_CuentaBancariaColumn),Integer)
            End Get
            Set
                Me(Me.tablevChequesDep.Id_CuentaBancariaColumn) = value
            End Set
        End Property
        
        Public Property Fecha As Date
            Get
                Return CType(Me(Me.tablevChequesDep.FechaColumn),Date)
            End Get
            Set
                Me(Me.tablevChequesDep.FechaColumn) = value
            End Set
        End Property
        
        Public Property Portador As String
            Get
                Return CType(Me(Me.tablevChequesDep.PortadorColumn),String)
            End Get
            Set
                Me(Me.tablevChequesDep.PortadorColumn) = value
            End Set
        End Property
        
        Public Property Monto As Double
            Get
                Return CType(Me(Me.tablevChequesDep.MontoColumn),Double)
            End Get
            Set
                Me(Me.tablevChequesDep.MontoColumn) = value
            End Set
        End Property
        
        Public Property Conciliado As Boolean
            Get
                Return CType(Me(Me.tablevChequesDep.ConciliadoColumn),Boolean)
            End Get
            Set
                Me(Me.tablevChequesDep.ConciliadoColumn) = value
            End Set
        End Property
        
        Public Property Anulado As Boolean
            Get
                Return CType(Me(Me.tablevChequesDep.AnuladoColumn),Boolean)
            End Get
            Set
                Me(Me.tablevChequesDep.AnuladoColumn) = value
            End Set
        End Property
        
        Public Property Observaciones As String
            Get
                Return CType(Me(Me.tablevChequesDep.ObservacionesColumn),String)
            End Get
            Set
                Me(Me.tablevChequesDep.ObservacionesColumn) = value
            End Set
        End Property
        
        Public Property Ced_Usuario As String
            Get
                Return CType(Me(Me.tablevChequesDep.Ced_UsuarioColumn),String)
            End Get
            Set
                Me(Me.tablevChequesDep.Ced_UsuarioColumn) = value
            End Set
        End Property
        
        Public Property Cuenta_Destino As String
            Get
                Return CType(Me(Me.tablevChequesDep.Cuenta_DestinoColumn),String)
            End Get
            Set
                Me(Me.tablevChequesDep.Cuenta_DestinoColumn) = value
            End Set
        End Property
        
        Public Property Tipo As String
            Get
                Return CType(Me(Me.tablevChequesDep.TipoColumn),String)
            End Get
            Set
                Me(Me.tablevChequesDep.TipoColumn) = value
            End Set
        End Property
        
        Public Property CodigoMoneda As Integer
            Get
                Return CType(Me(Me.tablevChequesDep.CodigoMonedaColumn),Integer)
            End Get
            Set
                Me(Me.tablevChequesDep.CodigoMonedaColumn) = value
            End Set
        End Property
        
        Public Property TipoCambio As Double
            Get
                Return CType(Me(Me.tablevChequesDep.TipoCambioColumn),Double)
            End Get
            Set
                Me(Me.tablevChequesDep.TipoCambioColumn) = value
            End Set
        End Property
        
        Public Property InfoDep As String
            Get
                Return CType(Me(Me.tablevChequesDep.InfoDepColumn),String)
            End Get
            Set
                Me(Me.tablevChequesDep.InfoDepColumn) = value
            End Set
        End Property
        
        Public Property InfoBanco As String
            Get
                Return CType(Me(Me.tablevChequesDep.InfoBancoColumn),String)
            End Get
            Set
                Me(Me.tablevChequesDep.InfoBancoColumn) = value
            End Set
        End Property
        
        Public Property MontoDep As Double
            Get
                Try 
                    Return CType(Me(Me.tablevChequesDep.MontoDepColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevChequesDep.MontoDepColumn) = value
            End Set
        End Property
        
        Public Property MonedaDep As Integer
            Get
                Try 
                    Return CType(Me(Me.tablevChequesDep.MonedaDepColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevChequesDep.MonedaDepColumn) = value
            End Set
        End Property
        
        Public Property MonedaStr As String
            Get
                Try 
                    Return CType(Me(Me.tablevChequesDep.MonedaStrColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevChequesDep.MonedaStrColumn) = value
            End Set
        End Property
        
        Public Function IsMontoDepNull() As Boolean
            Return Me.IsNull(Me.tablevChequesDep.MontoDepColumn)
        End Function
        
        Public Sub SetMontoDepNull()
            Me(Me.tablevChequesDep.MontoDepColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMonedaDepNull() As Boolean
            Return Me.IsNull(Me.tablevChequesDep.MonedaDepColumn)
        End Function
        
        Public Sub SetMonedaDepNull()
            Me(Me.tablevChequesDep.MonedaDepColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMonedaStrNull() As Boolean
            Return Me.IsNull(Me.tablevChequesDep.MonedaStrColumn)
        End Function
        
        Public Sub SetMonedaStrNull()
            Me(Me.tablevChequesDep.MonedaStrColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class vChequesDepRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As vChequesDepRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As vChequesDepRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As vChequesDepRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BancosDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCodigo_banco As DataColumn
        
        Private columnDescripcion As DataColumn
        
        Friend Sub New()
            MyBase.New("Bancos")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Codigo_bancoColumn As DataColumn
            Get
                Return Me.columnCodigo_banco
            End Get
        End Property
        
        Friend ReadOnly Property DescripcionColumn As DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BancosRow
            Get
                Return CType(Me.Rows(index),BancosRow)
            End Get
        End Property
        
        Public Event BancosRowChanged As BancosRowChangeEventHandler
        
        Public Event BancosRowChanging As BancosRowChangeEventHandler
        
        Public Event BancosRowDeleted As BancosRowChangeEventHandler
        
        Public Event BancosRowDeleting As BancosRowChangeEventHandler
        
        Public Overloads Sub AddBancosRow(ByVal row As BancosRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBancosRow(ByVal Descripcion As String) As BancosRow
            Dim rowBancosRow As BancosRow = CType(Me.NewRow,BancosRow)
            rowBancosRow.ItemArray = New Object() {Nothing, Descripcion}
            Me.Rows.Add(rowBancosRow)
            Return rowBancosRow
        End Function
        
        Public Function FindByCodigo_banco(ByVal Codigo_banco As Long) As BancosRow
            Return CType(Me.Rows.Find(New Object() {Codigo_banco}),BancosRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BancosDataTable = CType(MyBase.Clone,BancosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BancosDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCodigo_banco = Me.Columns("Codigo_banco")
            Me.columnDescripcion = Me.Columns("Descripcion")
        End Sub
        
        Private Sub InitClass()
            Me.columnCodigo_banco = New DataColumn("Codigo_banco", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodigo_banco)
            Me.columnDescripcion = New DataColumn("Descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcion)
            Me.Constraints.Add(New UniqueConstraint("DataSet1Key2", New DataColumn() {Me.columnCodigo_banco}, true))
            Me.columnCodigo_banco.AutoIncrement = true
            Me.columnCodigo_banco.AllowDBNull = false
            Me.columnCodigo_banco.ReadOnly = true
            Me.columnCodigo_banco.Unique = true
            Me.columnDescripcion.AllowDBNull = false
        End Sub
        
        Public Function NewBancosRow() As BancosRow
            Return CType(Me.NewRow,BancosRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BancosRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BancosRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BancosRowChangedEvent) Is Nothing) Then
                RaiseEvent BancosRowChanged(Me, New BancosRowChangeEvent(CType(e.Row,BancosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BancosRowChangingEvent) Is Nothing) Then
                RaiseEvent BancosRowChanging(Me, New BancosRowChangeEvent(CType(e.Row,BancosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BancosRowDeletedEvent) Is Nothing) Then
                RaiseEvent BancosRowDeleted(Me, New BancosRowChangeEvent(CType(e.Row,BancosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BancosRowDeletingEvent) Is Nothing) Then
                RaiseEvent BancosRowDeleting(Me, New BancosRowChangeEvent(CType(e.Row,BancosRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBancosRow(ByVal row As BancosRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BancosRow
        Inherits DataRow
        
        Private tableBancos As BancosDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBancos = CType(Me.Table,BancosDataTable)
        End Sub
        
        Public Property Codigo_banco As Long
            Get
                Return CType(Me(Me.tableBancos.Codigo_bancoColumn),Long)
            End Get
            Set
                Me(Me.tableBancos.Codigo_bancoColumn) = value
            End Set
        End Property
        
        Public Property Descripcion As String
            Get
                Return CType(Me(Me.tableBancos.DescripcionColumn),String)
            End Get
            Set
                Me(Me.tableBancos.DescripcionColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BancosRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BancosRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BancosRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BancosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Cuentas_bancarias1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCuenta As DataColumn
        
        Private columnCodigo_banco As DataColumn
        
        Private columntipoCuenta As DataColumn
        
        Private columnNombreCuenta As DataColumn
        
        Private columnSaldoInicial As DataColumn
        
        Private columnCuentaContable As DataColumn
        
        Private columnChequeInicial As DataColumn
        
        Private columnChequeFinal As DataColumn
        
        Private columnCod_Moneda As DataColumn
        
        Private columnId_CuentaBancaria As DataColumn
        
        Private columnNombreCuentaContable As DataColumn
        
        Private columnFecha As DataColumn
        
        Friend Sub New()
            MyBase.New("Cuentas_bancarias1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CuentaColumn As DataColumn
            Get
                Return Me.columnCuenta
            End Get
        End Property
        
        Friend ReadOnly Property Codigo_bancoColumn As DataColumn
            Get
                Return Me.columnCodigo_banco
            End Get
        End Property
        
        Friend ReadOnly Property tipoCuentaColumn As DataColumn
            Get
                Return Me.columntipoCuenta
            End Get
        End Property
        
        Friend ReadOnly Property NombreCuentaColumn As DataColumn
            Get
                Return Me.columnNombreCuenta
            End Get
        End Property
        
        Friend ReadOnly Property SaldoInicialColumn As DataColumn
            Get
                Return Me.columnSaldoInicial
            End Get
        End Property
        
        Friend ReadOnly Property CuentaContableColumn As DataColumn
            Get
                Return Me.columnCuentaContable
            End Get
        End Property
        
        Friend ReadOnly Property ChequeInicialColumn As DataColumn
            Get
                Return Me.columnChequeInicial
            End Get
        End Property
        
        Friend ReadOnly Property ChequeFinalColumn As DataColumn
            Get
                Return Me.columnChequeFinal
            End Get
        End Property
        
        Friend ReadOnly Property Cod_MonedaColumn As DataColumn
            Get
                Return Me.columnCod_Moneda
            End Get
        End Property
        
        Friend ReadOnly Property Id_CuentaBancariaColumn As DataColumn
            Get
                Return Me.columnId_CuentaBancaria
            End Get
        End Property
        
        Friend ReadOnly Property NombreCuentaContableColumn As DataColumn
            Get
                Return Me.columnNombreCuentaContable
            End Get
        End Property
        
        Friend ReadOnly Property FechaColumn As DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Cuentas_bancarias1Row
            Get
                Return CType(Me.Rows(index),Cuentas_bancarias1Row)
            End Get
        End Property
        
        Public Event Cuentas_bancarias1RowChanged As Cuentas_bancarias1RowChangeEventHandler
        
        Public Event Cuentas_bancarias1RowChanging As Cuentas_bancarias1RowChangeEventHandler
        
        Public Event Cuentas_bancarias1RowDeleted As Cuentas_bancarias1RowChangeEventHandler
        
        Public Event Cuentas_bancarias1RowDeleting As Cuentas_bancarias1RowChangeEventHandler
        
        Public Overloads Sub AddCuentas_bancarias1Row(ByVal row As Cuentas_bancarias1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCuentas_bancarias1Row(ByVal Cuenta As String, ByVal Codigo_banco As Long, ByVal tipoCuenta As String, ByVal NombreCuenta As String, ByVal SaldoInicial As Double, ByVal CuentaContable As String, ByVal ChequeInicial As Integer, ByVal ChequeFinal As Integer, ByVal Cod_Moneda As Integer, ByVal NombreCuentaContable As String, ByVal Fecha As Date) As Cuentas_bancarias1Row
            Dim rowCuentas_bancarias1Row As Cuentas_bancarias1Row = CType(Me.NewRow,Cuentas_bancarias1Row)
            rowCuentas_bancarias1Row.ItemArray = New Object() {Cuenta, Codigo_banco, tipoCuenta, NombreCuenta, SaldoInicial, CuentaContable, ChequeInicial, ChequeFinal, Cod_Moneda, Nothing, NombreCuentaContable, Fecha}
            Me.Rows.Add(rowCuentas_bancarias1Row)
            Return rowCuentas_bancarias1Row
        End Function
        
        Public Function FindById_CuentaBancaria(ByVal Id_CuentaBancaria As Integer) As Cuentas_bancarias1Row
            Return CType(Me.Rows.Find(New Object() {Id_CuentaBancaria}),Cuentas_bancarias1Row)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Cuentas_bancarias1DataTable = CType(MyBase.Clone,Cuentas_bancarias1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Cuentas_bancarias1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCuenta = Me.Columns("Cuenta")
            Me.columnCodigo_banco = Me.Columns("Codigo_banco")
            Me.columntipoCuenta = Me.Columns("tipoCuenta")
            Me.columnNombreCuenta = Me.Columns("NombreCuenta")
            Me.columnSaldoInicial = Me.Columns("SaldoInicial")
            Me.columnCuentaContable = Me.Columns("CuentaContable")
            Me.columnChequeInicial = Me.Columns("ChequeInicial")
            Me.columnChequeFinal = Me.Columns("ChequeFinal")
            Me.columnCod_Moneda = Me.Columns("Cod_Moneda")
            Me.columnId_CuentaBancaria = Me.Columns("Id_CuentaBancaria")
            Me.columnNombreCuentaContable = Me.Columns("NombreCuentaContable")
            Me.columnFecha = Me.Columns("Fecha")
        End Sub
        
        Private Sub InitClass()
            Me.columnCuenta = New DataColumn("Cuenta", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuenta)
            Me.columnCodigo_banco = New DataColumn("Codigo_banco", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodigo_banco)
            Me.columntipoCuenta = New DataColumn("tipoCuenta", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntipoCuenta)
            Me.columnNombreCuenta = New DataColumn("NombreCuenta", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombreCuenta)
            Me.columnSaldoInicial = New DataColumn("SaldoInicial", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldoInicial)
            Me.columnCuentaContable = New DataColumn("CuentaContable", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuentaContable)
            Me.columnChequeInicial = New DataColumn("ChequeInicial", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChequeInicial)
            Me.columnChequeFinal = New DataColumn("ChequeFinal", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChequeFinal)
            Me.columnCod_Moneda = New DataColumn("Cod_Moneda", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCod_Moneda)
            Me.columnId_CuentaBancaria = New DataColumn("Id_CuentaBancaria", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_CuentaBancaria)
            Me.columnNombreCuentaContable = New DataColumn("NombreCuentaContable", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombreCuentaContable)
            Me.columnFecha = New DataColumn("Fecha", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha)
            Me.Constraints.Add(New UniqueConstraint("DataSet1Key3", New DataColumn() {Me.columnId_CuentaBancaria}, true))
            Me.columnCuenta.AllowDBNull = false
            Me.columnCodigo_banco.AllowDBNull = false
            Me.columntipoCuenta.AllowDBNull = false
            Me.columnNombreCuenta.AllowDBNull = false
            Me.columnSaldoInicial.AllowDBNull = false
            Me.columnCuentaContable.AllowDBNull = false
            Me.columnChequeInicial.AllowDBNull = false
            Me.columnChequeFinal.AllowDBNull = false
            Me.columnCod_Moneda.AllowDBNull = false
            Me.columnId_CuentaBancaria.AutoIncrement = true
            Me.columnId_CuentaBancaria.AllowDBNull = false
            Me.columnId_CuentaBancaria.ReadOnly = true
            Me.columnId_CuentaBancaria.Unique = true
            Me.columnNombreCuentaContable.AllowDBNull = false
            Me.columnFecha.AllowDBNull = false
        End Sub
        
        Public Function NewCuentas_bancarias1Row() As Cuentas_bancarias1Row
            Return CType(Me.NewRow,Cuentas_bancarias1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Cuentas_bancarias1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Cuentas_bancarias1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Cuentas_bancarias1RowChangedEvent) Is Nothing) Then
                RaiseEvent Cuentas_bancarias1RowChanged(Me, New Cuentas_bancarias1RowChangeEvent(CType(e.Row,Cuentas_bancarias1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Cuentas_bancarias1RowChangingEvent) Is Nothing) Then
                RaiseEvent Cuentas_bancarias1RowChanging(Me, New Cuentas_bancarias1RowChangeEvent(CType(e.Row,Cuentas_bancarias1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Cuentas_bancarias1RowDeletedEvent) Is Nothing) Then
                RaiseEvent Cuentas_bancarias1RowDeleted(Me, New Cuentas_bancarias1RowChangeEvent(CType(e.Row,Cuentas_bancarias1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Cuentas_bancarias1RowDeletingEvent) Is Nothing) Then
                RaiseEvent Cuentas_bancarias1RowDeleting(Me, New Cuentas_bancarias1RowChangeEvent(CType(e.Row,Cuentas_bancarias1Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCuentas_bancarias1Row(ByVal row As Cuentas_bancarias1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Cuentas_bancarias1Row
        Inherits DataRow
        
        Private tableCuentas_bancarias1 As Cuentas_bancarias1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCuentas_bancarias1 = CType(Me.Table,Cuentas_bancarias1DataTable)
        End Sub
        
        Public Property Cuenta As String
            Get
                Return CType(Me(Me.tableCuentas_bancarias1.CuentaColumn),String)
            End Get
            Set
                Me(Me.tableCuentas_bancarias1.CuentaColumn) = value
            End Set
        End Property
        
        Public Property Codigo_banco As Long
            Get
                Return CType(Me(Me.tableCuentas_bancarias1.Codigo_bancoColumn),Long)
            End Get
            Set
                Me(Me.tableCuentas_bancarias1.Codigo_bancoColumn) = value
            End Set
        End Property
        
        Public Property tipoCuenta As String
            Get
                Return CType(Me(Me.tableCuentas_bancarias1.tipoCuentaColumn),String)
            End Get
            Set
                Me(Me.tableCuentas_bancarias1.tipoCuentaColumn) = value
            End Set
        End Property
        
        Public Property NombreCuenta As String
            Get
                Return CType(Me(Me.tableCuentas_bancarias1.NombreCuentaColumn),String)
            End Get
            Set
                Me(Me.tableCuentas_bancarias1.NombreCuentaColumn) = value
            End Set
        End Property
        
        Public Property SaldoInicial As Double
            Get
                Return CType(Me(Me.tableCuentas_bancarias1.SaldoInicialColumn),Double)
            End Get
            Set
                Me(Me.tableCuentas_bancarias1.SaldoInicialColumn) = value
            End Set
        End Property
        
        Public Property CuentaContable As String
            Get
                Return CType(Me(Me.tableCuentas_bancarias1.CuentaContableColumn),String)
            End Get
            Set
                Me(Me.tableCuentas_bancarias1.CuentaContableColumn) = value
            End Set
        End Property
        
        Public Property ChequeInicial As Integer
            Get
                Return CType(Me(Me.tableCuentas_bancarias1.ChequeInicialColumn),Integer)
            End Get
            Set
                Me(Me.tableCuentas_bancarias1.ChequeInicialColumn) = value
            End Set
        End Property
        
        Public Property ChequeFinal As Integer
            Get
                Return CType(Me(Me.tableCuentas_bancarias1.ChequeFinalColumn),Integer)
            End Get
            Set
                Me(Me.tableCuentas_bancarias1.ChequeFinalColumn) = value
            End Set
        End Property
        
        Public Property Cod_Moneda As Integer
            Get
                Return CType(Me(Me.tableCuentas_bancarias1.Cod_MonedaColumn),Integer)
            End Get
            Set
                Me(Me.tableCuentas_bancarias1.Cod_MonedaColumn) = value
            End Set
        End Property
        
        Public Property Id_CuentaBancaria As Integer
            Get
                Return CType(Me(Me.tableCuentas_bancarias1.Id_CuentaBancariaColumn),Integer)
            End Get
            Set
                Me(Me.tableCuentas_bancarias1.Id_CuentaBancariaColumn) = value
            End Set
        End Property
        
        Public Property NombreCuentaContable As String
            Get
                Return CType(Me(Me.tableCuentas_bancarias1.NombreCuentaContableColumn),String)
            End Get
            Set
                Me(Me.tableCuentas_bancarias1.NombreCuentaContableColumn) = value
            End Set
        End Property
        
        Public Property Fecha As Date
            Get
                Return CType(Me(Me.tableCuentas_bancarias1.FechaColumn),Date)
            End Get
            Set
                Me(Me.tableCuentas_bancarias1.FechaColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Cuentas_bancarias1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Cuentas_bancarias1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Cuentas_bancarias1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Cuentas_bancarias1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
