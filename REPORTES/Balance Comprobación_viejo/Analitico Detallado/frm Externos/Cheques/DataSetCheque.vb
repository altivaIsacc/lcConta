'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DataSetCheque
    Inherits DataSet
    
    Private tablecuentascontable As cuentascontableDataTable
    
    Private tableUsuarios As UsuariosDataTable
    
    Private tableMonedas As MonedasDataTable
    
    Private tableMoneda As MonedaDataTable
    
    Private tableAsientosContables As AsientosContablesDataTable
    
    Private tableCentroCosto As CentroCostoDataTable
    
    Private tableCentroCosto_Movimientos As CentroCosto_MovimientosDataTable
    
    Private tableCentroCostoDetalle As CentroCostoDetalleDataTable
    
    Private tableCheques As ChequesDataTable
    
    Private tableConfiguraciones As ConfiguracionesDataTable
    
    Private tableCheques_Detalle As Cheques_DetalleDataTable
    
    Private tableDetallesAsientosContable As DetallesAsientosContableDataTable
    
    Private tableCuentas_bancarias As Cuentas_bancariasDataTable
    
    Private relationAsientosContablesDetallesAsientosContable As DataRelation
    
    Private relationChequesCheques_Detalle As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("cuentascontable")) Is Nothing) Then
                Me.Tables.Add(New cuentascontableDataTable(ds.Tables("cuentascontable")))
            End If
            If (Not (ds.Tables("Usuarios")) Is Nothing) Then
                Me.Tables.Add(New UsuariosDataTable(ds.Tables("Usuarios")))
            End If
            If (Not (ds.Tables("Monedas")) Is Nothing) Then
                Me.Tables.Add(New MonedasDataTable(ds.Tables("Monedas")))
            End If
            If (Not (ds.Tables("Moneda")) Is Nothing) Then
                Me.Tables.Add(New MonedaDataTable(ds.Tables("Moneda")))
            End If
            If (Not (ds.Tables("AsientosContables")) Is Nothing) Then
                Me.Tables.Add(New AsientosContablesDataTable(ds.Tables("AsientosContables")))
            End If
            If (Not (ds.Tables("CentroCosto")) Is Nothing) Then
                Me.Tables.Add(New CentroCostoDataTable(ds.Tables("CentroCosto")))
            End If
            If (Not (ds.Tables("CentroCosto_Movimientos")) Is Nothing) Then
                Me.Tables.Add(New CentroCosto_MovimientosDataTable(ds.Tables("CentroCosto_Movimientos")))
            End If
            If (Not (ds.Tables("CentroCostoDetalle")) Is Nothing) Then
                Me.Tables.Add(New CentroCostoDetalleDataTable(ds.Tables("CentroCostoDetalle")))
            End If
            If (Not (ds.Tables("Cheques")) Is Nothing) Then
                Me.Tables.Add(New ChequesDataTable(ds.Tables("Cheques")))
            End If
            If (Not (ds.Tables("Configuraciones")) Is Nothing) Then
                Me.Tables.Add(New ConfiguracionesDataTable(ds.Tables("Configuraciones")))
            End If
            If (Not (ds.Tables("Cheques_Detalle")) Is Nothing) Then
                Me.Tables.Add(New Cheques_DetalleDataTable(ds.Tables("Cheques_Detalle")))
            End If
            If (Not (ds.Tables("DetallesAsientosContable")) Is Nothing) Then
                Me.Tables.Add(New DetallesAsientosContableDataTable(ds.Tables("DetallesAsientosContable")))
            End If
            If (Not (ds.Tables("Cuentas_bancarias")) Is Nothing) Then
                Me.Tables.Add(New Cuentas_bancariasDataTable(ds.Tables("Cuentas_bancarias")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property cuentascontable As cuentascontableDataTable
        Get
            Return Me.tablecuentascontable
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Usuarios As UsuariosDataTable
        Get
            Return Me.tableUsuarios
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Monedas As MonedasDataTable
        Get
            Return Me.tableMonedas
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Moneda As MonedaDataTable
        Get
            Return Me.tableMoneda
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AsientosContables As AsientosContablesDataTable
        Get
            Return Me.tableAsientosContables
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CentroCosto As CentroCostoDataTable
        Get
            Return Me.tableCentroCosto
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CentroCosto_Movimientos As CentroCosto_MovimientosDataTable
        Get
            Return Me.tableCentroCosto_Movimientos
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CentroCostoDetalle As CentroCostoDetalleDataTable
        Get
            Return Me.tableCentroCostoDetalle
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Cheques As ChequesDataTable
        Get
            Return Me.tableCheques
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Configuraciones As ConfiguracionesDataTable
        Get
            Return Me.tableConfiguraciones
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Cheques_Detalle As Cheques_DetalleDataTable
        Get
            Return Me.tableCheques_Detalle
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DetallesAsientosContable As DetallesAsientosContableDataTable
        Get
            Return Me.tableDetallesAsientosContable
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Cuentas_bancarias As Cuentas_bancariasDataTable
        Get
            Return Me.tableCuentas_bancarias
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DataSetCheque = CType(MyBase.Clone,DataSetCheque)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("cuentascontable")) Is Nothing) Then
            Me.Tables.Add(New cuentascontableDataTable(ds.Tables("cuentascontable")))
        End If
        If (Not (ds.Tables("Usuarios")) Is Nothing) Then
            Me.Tables.Add(New UsuariosDataTable(ds.Tables("Usuarios")))
        End If
        If (Not (ds.Tables("Monedas")) Is Nothing) Then
            Me.Tables.Add(New MonedasDataTable(ds.Tables("Monedas")))
        End If
        If (Not (ds.Tables("Moneda")) Is Nothing) Then
            Me.Tables.Add(New MonedaDataTable(ds.Tables("Moneda")))
        End If
        If (Not (ds.Tables("AsientosContables")) Is Nothing) Then
            Me.Tables.Add(New AsientosContablesDataTable(ds.Tables("AsientosContables")))
        End If
        If (Not (ds.Tables("CentroCosto")) Is Nothing) Then
            Me.Tables.Add(New CentroCostoDataTable(ds.Tables("CentroCosto")))
        End If
        If (Not (ds.Tables("CentroCosto_Movimientos")) Is Nothing) Then
            Me.Tables.Add(New CentroCosto_MovimientosDataTable(ds.Tables("CentroCosto_Movimientos")))
        End If
        If (Not (ds.Tables("CentroCostoDetalle")) Is Nothing) Then
            Me.Tables.Add(New CentroCostoDetalleDataTable(ds.Tables("CentroCostoDetalle")))
        End If
        If (Not (ds.Tables("Cheques")) Is Nothing) Then
            Me.Tables.Add(New ChequesDataTable(ds.Tables("Cheques")))
        End If
        If (Not (ds.Tables("Configuraciones")) Is Nothing) Then
            Me.Tables.Add(New ConfiguracionesDataTable(ds.Tables("Configuraciones")))
        End If
        If (Not (ds.Tables("Cheques_Detalle")) Is Nothing) Then
            Me.Tables.Add(New Cheques_DetalleDataTable(ds.Tables("Cheques_Detalle")))
        End If
        If (Not (ds.Tables("DetallesAsientosContable")) Is Nothing) Then
            Me.Tables.Add(New DetallesAsientosContableDataTable(ds.Tables("DetallesAsientosContable")))
        End If
        If (Not (ds.Tables("Cuentas_bancarias")) Is Nothing) Then
            Me.Tables.Add(New Cuentas_bancariasDataTable(ds.Tables("Cuentas_bancarias")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablecuentascontable = CType(Me.Tables("cuentascontable"),cuentascontableDataTable)
        If (Not (Me.tablecuentascontable) Is Nothing) Then
            Me.tablecuentascontable.InitVars
        End If
        Me.tableUsuarios = CType(Me.Tables("Usuarios"),UsuariosDataTable)
        If (Not (Me.tableUsuarios) Is Nothing) Then
            Me.tableUsuarios.InitVars
        End If
        Me.tableMonedas = CType(Me.Tables("Monedas"),MonedasDataTable)
        If (Not (Me.tableMonedas) Is Nothing) Then
            Me.tableMonedas.InitVars
        End If
        Me.tableMoneda = CType(Me.Tables("Moneda"),MonedaDataTable)
        If (Not (Me.tableMoneda) Is Nothing) Then
            Me.tableMoneda.InitVars
        End If
        Me.tableAsientosContables = CType(Me.Tables("AsientosContables"),AsientosContablesDataTable)
        If (Not (Me.tableAsientosContables) Is Nothing) Then
            Me.tableAsientosContables.InitVars
        End If
        Me.tableCentroCosto = CType(Me.Tables("CentroCosto"),CentroCostoDataTable)
        If (Not (Me.tableCentroCosto) Is Nothing) Then
            Me.tableCentroCosto.InitVars
        End If
        Me.tableCentroCosto_Movimientos = CType(Me.Tables("CentroCosto_Movimientos"),CentroCosto_MovimientosDataTable)
        If (Not (Me.tableCentroCosto_Movimientos) Is Nothing) Then
            Me.tableCentroCosto_Movimientos.InitVars
        End If
        Me.tableCentroCostoDetalle = CType(Me.Tables("CentroCostoDetalle"),CentroCostoDetalleDataTable)
        If (Not (Me.tableCentroCostoDetalle) Is Nothing) Then
            Me.tableCentroCostoDetalle.InitVars
        End If
        Me.tableCheques = CType(Me.Tables("Cheques"),ChequesDataTable)
        If (Not (Me.tableCheques) Is Nothing) Then
            Me.tableCheques.InitVars
        End If
        Me.tableConfiguraciones = CType(Me.Tables("Configuraciones"),ConfiguracionesDataTable)
        If (Not (Me.tableConfiguraciones) Is Nothing) Then
            Me.tableConfiguraciones.InitVars
        End If
        Me.tableCheques_Detalle = CType(Me.Tables("Cheques_Detalle"),Cheques_DetalleDataTable)
        If (Not (Me.tableCheques_Detalle) Is Nothing) Then
            Me.tableCheques_Detalle.InitVars
        End If
        Me.tableDetallesAsientosContable = CType(Me.Tables("DetallesAsientosContable"),DetallesAsientosContableDataTable)
        If (Not (Me.tableDetallesAsientosContable) Is Nothing) Then
            Me.tableDetallesAsientosContable.InitVars
        End If
        Me.tableCuentas_bancarias = CType(Me.Tables("Cuentas_bancarias"),Cuentas_bancariasDataTable)
        If (Not (Me.tableCuentas_bancarias) Is Nothing) Then
            Me.tableCuentas_bancarias.InitVars
        End If
        Me.relationAsientosContablesDetallesAsientosContable = Me.Relations("AsientosContablesDetallesAsientosContable")
        Me.relationChequesCheques_Detalle = Me.Relations("ChequesCheques_Detalle")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DataSetCheque"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DataSetCheque.xsd"
        Me.Locale = New System.Globalization.CultureInfo("es-CR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablecuentascontable = New cuentascontableDataTable
        Me.Tables.Add(Me.tablecuentascontable)
        Me.tableUsuarios = New UsuariosDataTable
        Me.Tables.Add(Me.tableUsuarios)
        Me.tableMonedas = New MonedasDataTable
        Me.Tables.Add(Me.tableMonedas)
        Me.tableMoneda = New MonedaDataTable
        Me.Tables.Add(Me.tableMoneda)
        Me.tableAsientosContables = New AsientosContablesDataTable
        Me.Tables.Add(Me.tableAsientosContables)
        Me.tableCentroCosto = New CentroCostoDataTable
        Me.Tables.Add(Me.tableCentroCosto)
        Me.tableCentroCosto_Movimientos = New CentroCosto_MovimientosDataTable
        Me.Tables.Add(Me.tableCentroCosto_Movimientos)
        Me.tableCentroCostoDetalle = New CentroCostoDetalleDataTable
        Me.Tables.Add(Me.tableCentroCostoDetalle)
        Me.tableCheques = New ChequesDataTable
        Me.Tables.Add(Me.tableCheques)
        Me.tableConfiguraciones = New ConfiguracionesDataTable
        Me.Tables.Add(Me.tableConfiguraciones)
        Me.tableCheques_Detalle = New Cheques_DetalleDataTable
        Me.Tables.Add(Me.tableCheques_Detalle)
        Me.tableDetallesAsientosContable = New DetallesAsientosContableDataTable
        Me.Tables.Add(Me.tableDetallesAsientosContable)
        Me.tableCuentas_bancarias = New Cuentas_bancariasDataTable
        Me.Tables.Add(Me.tableCuentas_bancarias)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("ChequesCheques_Detalle", New DataColumn() {Me.tableCheques.Id_ChequeColumn}, New DataColumn() {Me.tableCheques_Detalle.Id_ChequeColumn})
        Me.tableCheques_Detalle.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("AsientosContablesDetallesAsientosContable", New DataColumn() {Me.tableAsientosContables.NumAsientoColumn}, New DataColumn() {Me.tableDetallesAsientosContable.NumAsientoColumn})
        Me.tableDetallesAsientosContable.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationAsientosContablesDetallesAsientosContable = New DataRelation("AsientosContablesDetallesAsientosContable", New DataColumn() {Me.tableAsientosContables.NumAsientoColumn}, New DataColumn() {Me.tableDetallesAsientosContable.NumAsientoColumn}, false)
        Me.Relations.Add(Me.relationAsientosContablesDetallesAsientosContable)
        Me.relationChequesCheques_Detalle = New DataRelation("ChequesCheques_Detalle", New DataColumn() {Me.tableCheques.Id_ChequeColumn}, New DataColumn() {Me.tableCheques_Detalle.Id_ChequeColumn}, false)
        Me.Relations.Add(Me.relationChequesCheques_Detalle)
    End Sub
    
    Private Function ShouldSerializecuentascontable() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeUsuarios() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeMonedas() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeMoneda() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAsientosContables() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCentroCosto() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCentroCosto_Movimientos() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCentroCostoDetalle() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCheques() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeConfiguraciones() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCheques_Detalle() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeDetallesAsientosContable() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCuentas_bancarias() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub cuentascontableRowChangeEventHandler(ByVal sender As Object, ByVal e As cuentascontableRowChangeEvent)
    
    Public Delegate Sub UsuariosRowChangeEventHandler(ByVal sender As Object, ByVal e As UsuariosRowChangeEvent)
    
    Public Delegate Sub MonedasRowChangeEventHandler(ByVal sender As Object, ByVal e As MonedasRowChangeEvent)
    
    Public Delegate Sub MonedaRowChangeEventHandler(ByVal sender As Object, ByVal e As MonedaRowChangeEvent)
    
    Public Delegate Sub AsientosContablesRowChangeEventHandler(ByVal sender As Object, ByVal e As AsientosContablesRowChangeEvent)
    
    Public Delegate Sub CentroCostoRowChangeEventHandler(ByVal sender As Object, ByVal e As CentroCostoRowChangeEvent)
    
    Public Delegate Sub CentroCosto_MovimientosRowChangeEventHandler(ByVal sender As Object, ByVal e As CentroCosto_MovimientosRowChangeEvent)
    
    Public Delegate Sub CentroCostoDetalleRowChangeEventHandler(ByVal sender As Object, ByVal e As CentroCostoDetalleRowChangeEvent)
    
    Public Delegate Sub ChequesRowChangeEventHandler(ByVal sender As Object, ByVal e As ChequesRowChangeEvent)
    
    Public Delegate Sub ConfiguracionesRowChangeEventHandler(ByVal sender As Object, ByVal e As ConfiguracionesRowChangeEvent)
    
    Public Delegate Sub Cheques_DetalleRowChangeEventHandler(ByVal sender As Object, ByVal e As Cheques_DetalleRowChangeEvent)
    
    Public Delegate Sub DetallesAsientosContableRowChangeEventHandler(ByVal sender As Object, ByVal e As DetallesAsientosContableRowChangeEvent)
    
    Public Delegate Sub Cuentas_bancariasRowChangeEventHandler(ByVal sender As Object, ByVal e As Cuentas_bancariasRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cuentascontableDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCuentaContable As DataColumn
        
        Private columnDescripcion As DataColumn
        
        Private columnNivel As DataColumn
        
        Private columnTipo As DataColumn
        
        Private columnN1 As DataColumn
        
        Private columnN2 As DataColumn
        
        Private columnN3 As DataColumn
        
        Private columnN4 As DataColumn
        
        Private columnN5 As DataColumn
        
        Private columnN6 As DataColumn
        
        Private columnN7 As DataColumn
        
        Private columnN8 As DataColumn
        
        Private columnCuentaMadre As DataColumn
        
        Private columnMovimiento As DataColumn
        
        Friend Sub New()
            MyBase.New("cuentascontable")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CuentaContableColumn As DataColumn
            Get
                Return Me.columnCuentaContable
            End Get
        End Property
        
        Friend ReadOnly Property DescripcionColumn As DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        Friend ReadOnly Property NivelColumn As DataColumn
            Get
                Return Me.columnNivel
            End Get
        End Property
        
        Friend ReadOnly Property TipoColumn As DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        Friend ReadOnly Property N1Column As DataColumn
            Get
                Return Me.columnN1
            End Get
        End Property
        
        Friend ReadOnly Property N2Column As DataColumn
            Get
                Return Me.columnN2
            End Get
        End Property
        
        Friend ReadOnly Property N3Column As DataColumn
            Get
                Return Me.columnN3
            End Get
        End Property
        
        Friend ReadOnly Property N4Column As DataColumn
            Get
                Return Me.columnN4
            End Get
        End Property
        
        Friend ReadOnly Property N5Column As DataColumn
            Get
                Return Me.columnN5
            End Get
        End Property
        
        Friend ReadOnly Property N6Column As DataColumn
            Get
                Return Me.columnN6
            End Get
        End Property
        
        Friend ReadOnly Property N7Column As DataColumn
            Get
                Return Me.columnN7
            End Get
        End Property
        
        Friend ReadOnly Property N8Column As DataColumn
            Get
                Return Me.columnN8
            End Get
        End Property
        
        Friend ReadOnly Property CuentaMadreColumn As DataColumn
            Get
                Return Me.columnCuentaMadre
            End Get
        End Property
        
        Friend ReadOnly Property MovimientoColumn As DataColumn
            Get
                Return Me.columnMovimiento
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As cuentascontableRow
            Get
                Return CType(Me.Rows(index),cuentascontableRow)
            End Get
        End Property
        
        Public Event cuentascontableRowChanged As cuentascontableRowChangeEventHandler
        
        Public Event cuentascontableRowChanging As cuentascontableRowChangeEventHandler
        
        Public Event cuentascontableRowDeleted As cuentascontableRowChangeEventHandler
        
        Public Event cuentascontableRowDeleting As cuentascontableRowChangeEventHandler
        
        Public Overloads Sub AddcuentascontableRow(ByVal row As cuentascontableRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddcuentascontableRow(ByVal CuentaContable As String, ByVal Descripcion As String, ByVal Nivel As Short, ByVal Tipo As Short, ByVal N1 As String, ByVal N2 As String, ByVal N3 As String, ByVal N4 As String, ByVal N5 As String, ByVal N6 As String, ByVal N7 As String, ByVal N8 As String, ByVal CuentaMadre As String, ByVal Movimiento As Boolean) As cuentascontableRow
            Dim rowcuentascontableRow As cuentascontableRow = CType(Me.NewRow,cuentascontableRow)
            rowcuentascontableRow.ItemArray = New Object() {CuentaContable, Descripcion, Nivel, Tipo, N1, N2, N3, N4, N5, N6, N7, N8, CuentaMadre, Movimiento}
            Me.Rows.Add(rowcuentascontableRow)
            Return rowcuentascontableRow
        End Function
        
        Public Function FindByCuentaContable(ByVal CuentaContable As String) As cuentascontableRow
            Return CType(Me.Rows.Find(New Object() {CuentaContable}),cuentascontableRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As cuentascontableDataTable = CType(MyBase.Clone,cuentascontableDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New cuentascontableDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCuentaContable = Me.Columns("CuentaContable")
            Me.columnDescripcion = Me.Columns("Descripcion")
            Me.columnNivel = Me.Columns("Nivel")
            Me.columnTipo = Me.Columns("Tipo")
            Me.columnN1 = Me.Columns("N1")
            Me.columnN2 = Me.Columns("N2")
            Me.columnN3 = Me.Columns("N3")
            Me.columnN4 = Me.Columns("N4")
            Me.columnN5 = Me.Columns("N5")
            Me.columnN6 = Me.Columns("N6")
            Me.columnN7 = Me.Columns("N7")
            Me.columnN8 = Me.Columns("N8")
            Me.columnCuentaMadre = Me.Columns("CuentaMadre")
            Me.columnMovimiento = Me.Columns("Movimiento")
        End Sub
        
        Private Sub InitClass()
            Me.columnCuentaContable = New DataColumn("CuentaContable", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuentaContable)
            Me.columnDescripcion = New DataColumn("Descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcion)
            Me.columnNivel = New DataColumn("Nivel", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNivel)
            Me.columnTipo = New DataColumn("Tipo", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipo)
            Me.columnN1 = New DataColumn("N1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnN1)
            Me.columnN2 = New DataColumn("N2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnN2)
            Me.columnN3 = New DataColumn("N3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnN3)
            Me.columnN4 = New DataColumn("N4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnN4)
            Me.columnN5 = New DataColumn("N5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnN5)
            Me.columnN6 = New DataColumn("N6", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnN6)
            Me.columnN7 = New DataColumn("N7", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnN7)
            Me.columnN8 = New DataColumn("N8", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnN8)
            Me.columnCuentaMadre = New DataColumn("CuentaMadre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuentaMadre)
            Me.columnMovimiento = New DataColumn("Movimiento", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMovimiento)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCuentaContable}, true))
            Me.columnCuentaContable.AllowDBNull = false
            Me.columnCuentaContable.Unique = true
            Me.columnDescripcion.AllowDBNull = false
            Me.columnNivel.AllowDBNull = false
            Me.columnTipo.AllowDBNull = false
            Me.columnN1.AllowDBNull = false
            Me.columnN2.AllowDBNull = false
            Me.columnN3.AllowDBNull = false
            Me.columnN4.AllowDBNull = false
            Me.columnN5.AllowDBNull = false
            Me.columnN6.AllowDBNull = false
            Me.columnN7.AllowDBNull = false
            Me.columnN8.AllowDBNull = false
            Me.columnCuentaMadre.AllowDBNull = false
            Me.columnMovimiento.AllowDBNull = false
        End Sub
        
        Public Function NewcuentascontableRow() As cuentascontableRow
            Return CType(Me.NewRow,cuentascontableRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New cuentascontableRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(cuentascontableRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.cuentascontableRowChangedEvent) Is Nothing) Then
                RaiseEvent cuentascontableRowChanged(Me, New cuentascontableRowChangeEvent(CType(e.Row,cuentascontableRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.cuentascontableRowChangingEvent) Is Nothing) Then
                RaiseEvent cuentascontableRowChanging(Me, New cuentascontableRowChangeEvent(CType(e.Row,cuentascontableRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.cuentascontableRowDeletedEvent) Is Nothing) Then
                RaiseEvent cuentascontableRowDeleted(Me, New cuentascontableRowChangeEvent(CType(e.Row,cuentascontableRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.cuentascontableRowDeletingEvent) Is Nothing) Then
                RaiseEvent cuentascontableRowDeleting(Me, New cuentascontableRowChangeEvent(CType(e.Row,cuentascontableRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovecuentascontableRow(ByVal row As cuentascontableRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cuentascontableRow
        Inherits DataRow
        
        Private tablecuentascontable As cuentascontableDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablecuentascontable = CType(Me.Table,cuentascontableDataTable)
        End Sub
        
        Public Property CuentaContable As String
            Get
                Return CType(Me(Me.tablecuentascontable.CuentaContableColumn),String)
            End Get
            Set
                Me(Me.tablecuentascontable.CuentaContableColumn) = value
            End Set
        End Property
        
        Public Property Descripcion As String
            Get
                Return CType(Me(Me.tablecuentascontable.DescripcionColumn),String)
            End Get
            Set
                Me(Me.tablecuentascontable.DescripcionColumn) = value
            End Set
        End Property
        
        Public Property Nivel As Short
            Get
                Return CType(Me(Me.tablecuentascontable.NivelColumn),Short)
            End Get
            Set
                Me(Me.tablecuentascontable.NivelColumn) = value
            End Set
        End Property
        
        Public Property Tipo As Short
            Get
                Return CType(Me(Me.tablecuentascontable.TipoColumn),Short)
            End Get
            Set
                Me(Me.tablecuentascontable.TipoColumn) = value
            End Set
        End Property
        
        Public Property N1 As String
            Get
                Return CType(Me(Me.tablecuentascontable.N1Column),String)
            End Get
            Set
                Me(Me.tablecuentascontable.N1Column) = value
            End Set
        End Property
        
        Public Property N2 As String
            Get
                Return CType(Me(Me.tablecuentascontable.N2Column),String)
            End Get
            Set
                Me(Me.tablecuentascontable.N2Column) = value
            End Set
        End Property
        
        Public Property N3 As String
            Get
                Return CType(Me(Me.tablecuentascontable.N3Column),String)
            End Get
            Set
                Me(Me.tablecuentascontable.N3Column) = value
            End Set
        End Property
        
        Public Property N4 As String
            Get
                Return CType(Me(Me.tablecuentascontable.N4Column),String)
            End Get
            Set
                Me(Me.tablecuentascontable.N4Column) = value
            End Set
        End Property
        
        Public Property N5 As String
            Get
                Return CType(Me(Me.tablecuentascontable.N5Column),String)
            End Get
            Set
                Me(Me.tablecuentascontable.N5Column) = value
            End Set
        End Property
        
        Public Property N6 As String
            Get
                Return CType(Me(Me.tablecuentascontable.N6Column),String)
            End Get
            Set
                Me(Me.tablecuentascontable.N6Column) = value
            End Set
        End Property
        
        Public Property N7 As String
            Get
                Return CType(Me(Me.tablecuentascontable.N7Column),String)
            End Get
            Set
                Me(Me.tablecuentascontable.N7Column) = value
            End Set
        End Property
        
        Public Property N8 As String
            Get
                Return CType(Me(Me.tablecuentascontable.N8Column),String)
            End Get
            Set
                Me(Me.tablecuentascontable.N8Column) = value
            End Set
        End Property
        
        Public Property CuentaMadre As String
            Get
                Return CType(Me(Me.tablecuentascontable.CuentaMadreColumn),String)
            End Get
            Set
                Me(Me.tablecuentascontable.CuentaMadreColumn) = value
            End Set
        End Property
        
        Public Property Movimiento As Boolean
            Get
                Return CType(Me(Me.tablecuentascontable.MovimientoColumn),Boolean)
            End Get
            Set
                Me(Me.tablecuentascontable.MovimientoColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cuentascontableRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As cuentascontableRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As cuentascontableRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As cuentascontableRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UsuariosDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCedula As DataColumn
        
        Private columnNombre As DataColumn
        
        Private columnClave_Entrada As DataColumn
        
        Private columnClave_Interna As DataColumn
        
        Friend Sub New()
            MyBase.New("Usuarios")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CedulaColumn As DataColumn
            Get
                Return Me.columnCedula
            End Get
        End Property
        
        Friend ReadOnly Property NombreColumn As DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        Friend ReadOnly Property Clave_EntradaColumn As DataColumn
            Get
                Return Me.columnClave_Entrada
            End Get
        End Property
        
        Friend ReadOnly Property Clave_InternaColumn As DataColumn
            Get
                Return Me.columnClave_Interna
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As UsuariosRow
            Get
                Return CType(Me.Rows(index),UsuariosRow)
            End Get
        End Property
        
        Public Event UsuariosRowChanged As UsuariosRowChangeEventHandler
        
        Public Event UsuariosRowChanging As UsuariosRowChangeEventHandler
        
        Public Event UsuariosRowDeleted As UsuariosRowChangeEventHandler
        
        Public Event UsuariosRowDeleting As UsuariosRowChangeEventHandler
        
        Public Overloads Sub AddUsuariosRow(ByVal row As UsuariosRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddUsuariosRow(ByVal Cedula As String, ByVal Nombre As String, ByVal Clave_Entrada As String, ByVal Clave_Interna As String) As UsuariosRow
            Dim rowUsuariosRow As UsuariosRow = CType(Me.NewRow,UsuariosRow)
            rowUsuariosRow.ItemArray = New Object() {Cedula, Nombre, Clave_Entrada, Clave_Interna}
            Me.Rows.Add(rowUsuariosRow)
            Return rowUsuariosRow
        End Function
        
        Public Function FindByCedula(ByVal Cedula As String) As UsuariosRow
            Return CType(Me.Rows.Find(New Object() {Cedula}),UsuariosRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As UsuariosDataTable = CType(MyBase.Clone,UsuariosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New UsuariosDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCedula = Me.Columns("Cedula")
            Me.columnNombre = Me.Columns("Nombre")
            Me.columnClave_Entrada = Me.Columns("Clave_Entrada")
            Me.columnClave_Interna = Me.Columns("Clave_Interna")
        End Sub
        
        Private Sub InitClass()
            Me.columnCedula = New DataColumn("Cedula", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCedula)
            Me.columnNombre = New DataColumn("Nombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombre)
            Me.columnClave_Entrada = New DataColumn("Clave_Entrada", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnClave_Entrada)
            Me.columnClave_Interna = New DataColumn("Clave_Interna", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnClave_Interna)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCedula}, true))
            Me.columnCedula.AllowDBNull = false
            Me.columnCedula.Unique = true
            Me.columnNombre.AllowDBNull = false
            Me.columnClave_Entrada.AllowDBNull = false
            Me.columnClave_Interna.AllowDBNull = false
        End Sub
        
        Public Function NewUsuariosRow() As UsuariosRow
            Return CType(Me.NewRow,UsuariosRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New UsuariosRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(UsuariosRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UsuariosRowChangedEvent) Is Nothing) Then
                RaiseEvent UsuariosRowChanged(Me, New UsuariosRowChangeEvent(CType(e.Row,UsuariosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UsuariosRowChangingEvent) Is Nothing) Then
                RaiseEvent UsuariosRowChanging(Me, New UsuariosRowChangeEvent(CType(e.Row,UsuariosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UsuariosRowDeletedEvent) Is Nothing) Then
                RaiseEvent UsuariosRowDeleted(Me, New UsuariosRowChangeEvent(CType(e.Row,UsuariosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UsuariosRowDeletingEvent) Is Nothing) Then
                RaiseEvent UsuariosRowDeleting(Me, New UsuariosRowChangeEvent(CType(e.Row,UsuariosRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveUsuariosRow(ByVal row As UsuariosRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UsuariosRow
        Inherits DataRow
        
        Private tableUsuarios As UsuariosDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableUsuarios = CType(Me.Table,UsuariosDataTable)
        End Sub
        
        Public Property Cedula As String
            Get
                Return CType(Me(Me.tableUsuarios.CedulaColumn),String)
            End Get
            Set
                Me(Me.tableUsuarios.CedulaColumn) = value
            End Set
        End Property
        
        Public Property Nombre As String
            Get
                Return CType(Me(Me.tableUsuarios.NombreColumn),String)
            End Get
            Set
                Me(Me.tableUsuarios.NombreColumn) = value
            End Set
        End Property
        
        Public Property Clave_Entrada As String
            Get
                Return CType(Me(Me.tableUsuarios.Clave_EntradaColumn),String)
            End Get
            Set
                Me(Me.tableUsuarios.Clave_EntradaColumn) = value
            End Set
        End Property
        
        Public Property Clave_Interna As String
            Get
                Return CType(Me(Me.tableUsuarios.Clave_InternaColumn),String)
            End Get
            Set
                Me(Me.tableUsuarios.Clave_InternaColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UsuariosRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As UsuariosRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As UsuariosRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As UsuariosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MonedasDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCodMoneda As DataColumn
        
        Private columnMonedaNombre As DataColumn
        
        Private columnValorCompra As DataColumn
        
        Private columnValorVenta As DataColumn
        
        Private columnSimbolo As DataColumn
        
        Friend Sub New()
            MyBase.New("Monedas")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CodMonedaColumn As DataColumn
            Get
                Return Me.columnCodMoneda
            End Get
        End Property
        
        Friend ReadOnly Property MonedaNombreColumn As DataColumn
            Get
                Return Me.columnMonedaNombre
            End Get
        End Property
        
        Friend ReadOnly Property ValorCompraColumn As DataColumn
            Get
                Return Me.columnValorCompra
            End Get
        End Property
        
        Friend ReadOnly Property ValorVentaColumn As DataColumn
            Get
                Return Me.columnValorVenta
            End Get
        End Property
        
        Friend ReadOnly Property SimboloColumn As DataColumn
            Get
                Return Me.columnSimbolo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MonedasRow
            Get
                Return CType(Me.Rows(index),MonedasRow)
            End Get
        End Property
        
        Public Event MonedasRowChanged As MonedasRowChangeEventHandler
        
        Public Event MonedasRowChanging As MonedasRowChangeEventHandler
        
        Public Event MonedasRowDeleted As MonedasRowChangeEventHandler
        
        Public Event MonedasRowDeleting As MonedasRowChangeEventHandler
        
        Public Overloads Sub AddMonedasRow(ByVal row As MonedasRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMonedasRow(ByVal CodMoneda As Integer, ByVal MonedaNombre As String, ByVal ValorCompra As Double, ByVal ValorVenta As Double, ByVal Simbolo As String) As MonedasRow
            Dim rowMonedasRow As MonedasRow = CType(Me.NewRow,MonedasRow)
            rowMonedasRow.ItemArray = New Object() {CodMoneda, MonedaNombre, ValorCompra, ValorVenta, Simbolo}
            Me.Rows.Add(rowMonedasRow)
            Return rowMonedasRow
        End Function
        
        Public Function FindByCodMoneda(ByVal CodMoneda As Integer) As MonedasRow
            Return CType(Me.Rows.Find(New Object() {CodMoneda}),MonedasRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MonedasDataTable = CType(MyBase.Clone,MonedasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MonedasDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCodMoneda = Me.Columns("CodMoneda")
            Me.columnMonedaNombre = Me.Columns("MonedaNombre")
            Me.columnValorCompra = Me.Columns("ValorCompra")
            Me.columnValorVenta = Me.Columns("ValorVenta")
            Me.columnSimbolo = Me.Columns("Simbolo")
        End Sub
        
        Private Sub InitClass()
            Me.columnCodMoneda = New DataColumn("CodMoneda", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodMoneda)
            Me.columnMonedaNombre = New DataColumn("MonedaNombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonedaNombre)
            Me.columnValorCompra = New DataColumn("ValorCompra", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValorCompra)
            Me.columnValorVenta = New DataColumn("ValorVenta", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValorVenta)
            Me.columnSimbolo = New DataColumn("Simbolo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSimbolo)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCodMoneda}, true))
            Me.columnCodMoneda.AllowDBNull = false
            Me.columnCodMoneda.Unique = true
            Me.columnMonedaNombre.AllowDBNull = false
            Me.columnValorCompra.AllowDBNull = false
            Me.columnValorVenta.AllowDBNull = false
            Me.columnSimbolo.AllowDBNull = false
        End Sub
        
        Public Function NewMonedasRow() As MonedasRow
            Return CType(Me.NewRow,MonedasRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MonedasRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MonedasRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MonedasRowChangedEvent) Is Nothing) Then
                RaiseEvent MonedasRowChanged(Me, New MonedasRowChangeEvent(CType(e.Row,MonedasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MonedasRowChangingEvent) Is Nothing) Then
                RaiseEvent MonedasRowChanging(Me, New MonedasRowChangeEvent(CType(e.Row,MonedasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MonedasRowDeletedEvent) Is Nothing) Then
                RaiseEvent MonedasRowDeleted(Me, New MonedasRowChangeEvent(CType(e.Row,MonedasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MonedasRowDeletingEvent) Is Nothing) Then
                RaiseEvent MonedasRowDeleting(Me, New MonedasRowChangeEvent(CType(e.Row,MonedasRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMonedasRow(ByVal row As MonedasRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MonedasRow
        Inherits DataRow
        
        Private tableMonedas As MonedasDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMonedas = CType(Me.Table,MonedasDataTable)
        End Sub
        
        Public Property CodMoneda As Integer
            Get
                Return CType(Me(Me.tableMonedas.CodMonedaColumn),Integer)
            End Get
            Set
                Me(Me.tableMonedas.CodMonedaColumn) = value
            End Set
        End Property
        
        Public Property MonedaNombre As String
            Get
                Return CType(Me(Me.tableMonedas.MonedaNombreColumn),String)
            End Get
            Set
                Me(Me.tableMonedas.MonedaNombreColumn) = value
            End Set
        End Property
        
        Public Property ValorCompra As Double
            Get
                Return CType(Me(Me.tableMonedas.ValorCompraColumn),Double)
            End Get
            Set
                Me(Me.tableMonedas.ValorCompraColumn) = value
            End Set
        End Property
        
        Public Property ValorVenta As Double
            Get
                Return CType(Me(Me.tableMonedas.ValorVentaColumn),Double)
            End Get
            Set
                Me(Me.tableMonedas.ValorVentaColumn) = value
            End Set
        End Property
        
        Public Property Simbolo As String
            Get
                Return CType(Me(Me.tableMonedas.SimboloColumn),String)
            End Get
            Set
                Me(Me.tableMonedas.SimboloColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MonedasRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MonedasRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MonedasRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MonedasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MonedaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCodMoneda As DataColumn
        
        Private columnMonedaNombre As DataColumn
        
        Private columnValorCompra As DataColumn
        
        Private columnValorVenta As DataColumn
        
        Private columnSimbolo As DataColumn
        
        Friend Sub New()
            MyBase.New("Moneda")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CodMonedaColumn As DataColumn
            Get
                Return Me.columnCodMoneda
            End Get
        End Property
        
        Friend ReadOnly Property MonedaNombreColumn As DataColumn
            Get
                Return Me.columnMonedaNombre
            End Get
        End Property
        
        Friend ReadOnly Property ValorCompraColumn As DataColumn
            Get
                Return Me.columnValorCompra
            End Get
        End Property
        
        Friend ReadOnly Property ValorVentaColumn As DataColumn
            Get
                Return Me.columnValorVenta
            End Get
        End Property
        
        Friend ReadOnly Property SimboloColumn As DataColumn
            Get
                Return Me.columnSimbolo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MonedaRow
            Get
                Return CType(Me.Rows(index),MonedaRow)
            End Get
        End Property
        
        Public Event MonedaRowChanged As MonedaRowChangeEventHandler
        
        Public Event MonedaRowChanging As MonedaRowChangeEventHandler
        
        Public Event MonedaRowDeleted As MonedaRowChangeEventHandler
        
        Public Event MonedaRowDeleting As MonedaRowChangeEventHandler
        
        Public Overloads Sub AddMonedaRow(ByVal row As MonedaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMonedaRow(ByVal CodMoneda As Integer, ByVal MonedaNombre As String, ByVal ValorCompra As Double, ByVal ValorVenta As Double, ByVal Simbolo As String) As MonedaRow
            Dim rowMonedaRow As MonedaRow = CType(Me.NewRow,MonedaRow)
            rowMonedaRow.ItemArray = New Object() {CodMoneda, MonedaNombre, ValorCompra, ValorVenta, Simbolo}
            Me.Rows.Add(rowMonedaRow)
            Return rowMonedaRow
        End Function
        
        Public Function FindByCodMoneda(ByVal CodMoneda As Integer) As MonedaRow
            Return CType(Me.Rows.Find(New Object() {CodMoneda}),MonedaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MonedaDataTable = CType(MyBase.Clone,MonedaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MonedaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCodMoneda = Me.Columns("CodMoneda")
            Me.columnMonedaNombre = Me.Columns("MonedaNombre")
            Me.columnValorCompra = Me.Columns("ValorCompra")
            Me.columnValorVenta = Me.Columns("ValorVenta")
            Me.columnSimbolo = Me.Columns("Simbolo")
        End Sub
        
        Private Sub InitClass()
            Me.columnCodMoneda = New DataColumn("CodMoneda", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodMoneda)
            Me.columnMonedaNombre = New DataColumn("MonedaNombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonedaNombre)
            Me.columnValorCompra = New DataColumn("ValorCompra", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValorCompra)
            Me.columnValorVenta = New DataColumn("ValorVenta", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValorVenta)
            Me.columnSimbolo = New DataColumn("Simbolo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSimbolo)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCodMoneda}, true))
            Me.columnCodMoneda.AllowDBNull = false
            Me.columnCodMoneda.Unique = true
            Me.columnMonedaNombre.AllowDBNull = false
            Me.columnValorCompra.AllowDBNull = false
            Me.columnValorVenta.AllowDBNull = false
            Me.columnSimbolo.AllowDBNull = false
        End Sub
        
        Public Function NewMonedaRow() As MonedaRow
            Return CType(Me.NewRow,MonedaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MonedaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MonedaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MonedaRowChangedEvent) Is Nothing) Then
                RaiseEvent MonedaRowChanged(Me, New MonedaRowChangeEvent(CType(e.Row,MonedaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MonedaRowChangingEvent) Is Nothing) Then
                RaiseEvent MonedaRowChanging(Me, New MonedaRowChangeEvent(CType(e.Row,MonedaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MonedaRowDeletedEvent) Is Nothing) Then
                RaiseEvent MonedaRowDeleted(Me, New MonedaRowChangeEvent(CType(e.Row,MonedaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MonedaRowDeletingEvent) Is Nothing) Then
                RaiseEvent MonedaRowDeleting(Me, New MonedaRowChangeEvent(CType(e.Row,MonedaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMonedaRow(ByVal row As MonedaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MonedaRow
        Inherits DataRow
        
        Private tableMoneda As MonedaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMoneda = CType(Me.Table,MonedaDataTable)
        End Sub
        
        Public Property CodMoneda As Integer
            Get
                Return CType(Me(Me.tableMoneda.CodMonedaColumn),Integer)
            End Get
            Set
                Me(Me.tableMoneda.CodMonedaColumn) = value
            End Set
        End Property
        
        Public Property MonedaNombre As String
            Get
                Return CType(Me(Me.tableMoneda.MonedaNombreColumn),String)
            End Get
            Set
                Me(Me.tableMoneda.MonedaNombreColumn) = value
            End Set
        End Property
        
        Public Property ValorCompra As Double
            Get
                Return CType(Me(Me.tableMoneda.ValorCompraColumn),Double)
            End Get
            Set
                Me(Me.tableMoneda.ValorCompraColumn) = value
            End Set
        End Property
        
        Public Property ValorVenta As Double
            Get
                Return CType(Me(Me.tableMoneda.ValorVentaColumn),Double)
            End Get
            Set
                Me(Me.tableMoneda.ValorVentaColumn) = value
            End Set
        End Property
        
        Public Property Simbolo As String
            Get
                Return CType(Me(Me.tableMoneda.SimboloColumn),String)
            End Get
            Set
                Me(Me.tableMoneda.SimboloColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MonedaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MonedaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MonedaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MonedaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AsientosContablesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnNumAsiento As DataColumn
        
        Private columnFecha As DataColumn
        
        Private columnNumDoc As DataColumn
        
        Private columnBeneficiario As DataColumn
        
        Private columnTipoDoc As DataColumn
        
        Private columnAccion As DataColumn
        
        Private columnAnulado As DataColumn
        
        Private columnFechaEntrada As DataColumn
        
        Private columnMayorizado As DataColumn
        
        Private columnPeriodo As DataColumn
        
        Private columnNumMayorizado As DataColumn
        
        Private columnModulo As DataColumn
        
        Private columnObservaciones As DataColumn
        
        Private columnNombreUsuario As DataColumn
        
        Private columnTotalDebe As DataColumn
        
        Private columnTotalHaber As DataColumn
        
        Private columnCodMoneda As DataColumn
        
        Private columnTipoCambio As DataColumn
        
        Private columnIdNumDoc As DataColumn
        
        Friend Sub New()
            MyBase.New("AsientosContables")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property NumAsientoColumn As DataColumn
            Get
                Return Me.columnNumAsiento
            End Get
        End Property
        
        Friend ReadOnly Property FechaColumn As DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        Friend ReadOnly Property NumDocColumn As DataColumn
            Get
                Return Me.columnNumDoc
            End Get
        End Property
        
        Friend ReadOnly Property BeneficiarioColumn As DataColumn
            Get
                Return Me.columnBeneficiario
            End Get
        End Property
        
        Friend ReadOnly Property TipoDocColumn As DataColumn
            Get
                Return Me.columnTipoDoc
            End Get
        End Property
        
        Friend ReadOnly Property AccionColumn As DataColumn
            Get
                Return Me.columnAccion
            End Get
        End Property
        
        Friend ReadOnly Property AnuladoColumn As DataColumn
            Get
                Return Me.columnAnulado
            End Get
        End Property
        
        Friend ReadOnly Property FechaEntradaColumn As DataColumn
            Get
                Return Me.columnFechaEntrada
            End Get
        End Property
        
        Friend ReadOnly Property MayorizadoColumn As DataColumn
            Get
                Return Me.columnMayorizado
            End Get
        End Property
        
        Friend ReadOnly Property PeriodoColumn As DataColumn
            Get
                Return Me.columnPeriodo
            End Get
        End Property
        
        Friend ReadOnly Property NumMayorizadoColumn As DataColumn
            Get
                Return Me.columnNumMayorizado
            End Get
        End Property
        
        Friend ReadOnly Property ModuloColumn As DataColumn
            Get
                Return Me.columnModulo
            End Get
        End Property
        
        Friend ReadOnly Property ObservacionesColumn As DataColumn
            Get
                Return Me.columnObservaciones
            End Get
        End Property
        
        Friend ReadOnly Property NombreUsuarioColumn As DataColumn
            Get
                Return Me.columnNombreUsuario
            End Get
        End Property
        
        Friend ReadOnly Property TotalDebeColumn As DataColumn
            Get
                Return Me.columnTotalDebe
            End Get
        End Property
        
        Friend ReadOnly Property TotalHaberColumn As DataColumn
            Get
                Return Me.columnTotalHaber
            End Get
        End Property
        
        Friend ReadOnly Property CodMonedaColumn As DataColumn
            Get
                Return Me.columnCodMoneda
            End Get
        End Property
        
        Friend ReadOnly Property TipoCambioColumn As DataColumn
            Get
                Return Me.columnTipoCambio
            End Get
        End Property
        
        Friend ReadOnly Property IdNumDocColumn As DataColumn
            Get
                Return Me.columnIdNumDoc
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AsientosContablesRow
            Get
                Return CType(Me.Rows(index),AsientosContablesRow)
            End Get
        End Property
        
        Public Event AsientosContablesRowChanged As AsientosContablesRowChangeEventHandler
        
        Public Event AsientosContablesRowChanging As AsientosContablesRowChangeEventHandler
        
        Public Event AsientosContablesRowDeleted As AsientosContablesRowChangeEventHandler
        
        Public Event AsientosContablesRowDeleting As AsientosContablesRowChangeEventHandler
        
        Public Overloads Sub AddAsientosContablesRow(ByVal row As AsientosContablesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAsientosContablesRow( _
                    ByVal NumAsiento As String,  _
                    ByVal Fecha As Date,  _
                    ByVal NumDoc As String,  _
                    ByVal Beneficiario As String,  _
                    ByVal TipoDoc As Integer,  _
                    ByVal Accion As String,  _
                    ByVal Anulado As Boolean,  _
                    ByVal FechaEntrada As Date,  _
                    ByVal Mayorizado As Boolean,  _
                    ByVal Periodo As String,  _
                    ByVal NumMayorizado As Decimal,  _
                    ByVal Modulo As String,  _
                    ByVal Observaciones As String,  _
                    ByVal NombreUsuario As String,  _
                    ByVal TotalDebe As Double,  _
                    ByVal TotalHaber As Double,  _
                    ByVal CodMoneda As Integer,  _
                    ByVal TipoCambio As Double,  _
                    ByVal IdNumDoc As Long) As AsientosContablesRow
            Dim rowAsientosContablesRow As AsientosContablesRow = CType(Me.NewRow,AsientosContablesRow)
            rowAsientosContablesRow.ItemArray = New Object() {NumAsiento, Fecha, NumDoc, Beneficiario, TipoDoc, Accion, Anulado, FechaEntrada, Mayorizado, Periodo, NumMayorizado, Modulo, Observaciones, NombreUsuario, TotalDebe, TotalHaber, CodMoneda, TipoCambio, IdNumDoc}
            Me.Rows.Add(rowAsientosContablesRow)
            Return rowAsientosContablesRow
        End Function
        
        Public Function FindByNumAsiento(ByVal NumAsiento As String) As AsientosContablesRow
            Return CType(Me.Rows.Find(New Object() {NumAsiento}),AsientosContablesRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AsientosContablesDataTable = CType(MyBase.Clone,AsientosContablesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AsientosContablesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnNumAsiento = Me.Columns("NumAsiento")
            Me.columnFecha = Me.Columns("Fecha")
            Me.columnNumDoc = Me.Columns("NumDoc")
            Me.columnBeneficiario = Me.Columns("Beneficiario")
            Me.columnTipoDoc = Me.Columns("TipoDoc")
            Me.columnAccion = Me.Columns("Accion")
            Me.columnAnulado = Me.Columns("Anulado")
            Me.columnFechaEntrada = Me.Columns("FechaEntrada")
            Me.columnMayorizado = Me.Columns("Mayorizado")
            Me.columnPeriodo = Me.Columns("Periodo")
            Me.columnNumMayorizado = Me.Columns("NumMayorizado")
            Me.columnModulo = Me.Columns("Modulo")
            Me.columnObservaciones = Me.Columns("Observaciones")
            Me.columnNombreUsuario = Me.Columns("NombreUsuario")
            Me.columnTotalDebe = Me.Columns("TotalDebe")
            Me.columnTotalHaber = Me.Columns("TotalHaber")
            Me.columnCodMoneda = Me.Columns("CodMoneda")
            Me.columnTipoCambio = Me.Columns("TipoCambio")
            Me.columnIdNumDoc = Me.Columns("IdNumDoc")
        End Sub
        
        Private Sub InitClass()
            Me.columnNumAsiento = New DataColumn("NumAsiento", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNumAsiento)
            Me.columnFecha = New DataColumn("Fecha", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha)
            Me.columnNumDoc = New DataColumn("NumDoc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNumDoc)
            Me.columnBeneficiario = New DataColumn("Beneficiario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBeneficiario)
            Me.columnTipoDoc = New DataColumn("TipoDoc", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipoDoc)
            Me.columnAccion = New DataColumn("Accion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAccion)
            Me.columnAnulado = New DataColumn("Anulado", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAnulado)
            Me.columnFechaEntrada = New DataColumn("FechaEntrada", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaEntrada)
            Me.columnMayorizado = New DataColumn("Mayorizado", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMayorizado)
            Me.columnPeriodo = New DataColumn("Periodo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPeriodo)
            Me.columnNumMayorizado = New DataColumn("NumMayorizado", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNumMayorizado)
            Me.columnModulo = New DataColumn("Modulo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModulo)
            Me.columnObservaciones = New DataColumn("Observaciones", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnObservaciones)
            Me.columnNombreUsuario = New DataColumn("NombreUsuario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombreUsuario)
            Me.columnTotalDebe = New DataColumn("TotalDebe", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotalDebe)
            Me.columnTotalHaber = New DataColumn("TotalHaber", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotalHaber)
            Me.columnCodMoneda = New DataColumn("CodMoneda", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodMoneda)
            Me.columnTipoCambio = New DataColumn("TipoCambio", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipoCambio)
            Me.columnIdNumDoc = New DataColumn("IdNumDoc", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdNumDoc)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnNumAsiento}, true))
            Me.columnNumAsiento.AllowDBNull = false
            Me.columnNumAsiento.Unique = true
            Me.columnFecha.AllowDBNull = false
            Me.columnNumDoc.AllowDBNull = false
            Me.columnBeneficiario.AllowDBNull = false
            Me.columnTipoDoc.AllowDBNull = false
            Me.columnAccion.AllowDBNull = false
            Me.columnAnulado.AllowDBNull = false
            Me.columnFechaEntrada.AllowDBNull = false
            Me.columnMayorizado.AllowDBNull = false
            Me.columnPeriodo.AllowDBNull = false
            Me.columnNumMayorizado.AllowDBNull = false
            Me.columnModulo.AllowDBNull = false
            Me.columnObservaciones.AllowDBNull = false
            Me.columnNombreUsuario.AllowDBNull = false
            Me.columnTotalDebe.AllowDBNull = false
            Me.columnTotalHaber.AllowDBNull = false
            Me.columnCodMoneda.AllowDBNull = false
            Me.columnTipoCambio.AllowDBNull = false
            Me.columnIdNumDoc.AllowDBNull = false
        End Sub
        
        Public Function NewAsientosContablesRow() As AsientosContablesRow
            Return CType(Me.NewRow,AsientosContablesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AsientosContablesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AsientosContablesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AsientosContablesRowChangedEvent) Is Nothing) Then
                RaiseEvent AsientosContablesRowChanged(Me, New AsientosContablesRowChangeEvent(CType(e.Row,AsientosContablesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AsientosContablesRowChangingEvent) Is Nothing) Then
                RaiseEvent AsientosContablesRowChanging(Me, New AsientosContablesRowChangeEvent(CType(e.Row,AsientosContablesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AsientosContablesRowDeletedEvent) Is Nothing) Then
                RaiseEvent AsientosContablesRowDeleted(Me, New AsientosContablesRowChangeEvent(CType(e.Row,AsientosContablesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AsientosContablesRowDeletingEvent) Is Nothing) Then
                RaiseEvent AsientosContablesRowDeleting(Me, New AsientosContablesRowChangeEvent(CType(e.Row,AsientosContablesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAsientosContablesRow(ByVal row As AsientosContablesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AsientosContablesRow
        Inherits DataRow
        
        Private tableAsientosContables As AsientosContablesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAsientosContables = CType(Me.Table,AsientosContablesDataTable)
        End Sub
        
        Public Property NumAsiento As String
            Get
                Return CType(Me(Me.tableAsientosContables.NumAsientoColumn),String)
            End Get
            Set
                Me(Me.tableAsientosContables.NumAsientoColumn) = value
            End Set
        End Property
        
        Public Property Fecha As Date
            Get
                Return CType(Me(Me.tableAsientosContables.FechaColumn),Date)
            End Get
            Set
                Me(Me.tableAsientosContables.FechaColumn) = value
            End Set
        End Property
        
        Public Property NumDoc As String
            Get
                Return CType(Me(Me.tableAsientosContables.NumDocColumn),String)
            End Get
            Set
                Me(Me.tableAsientosContables.NumDocColumn) = value
            End Set
        End Property
        
        Public Property Beneficiario As String
            Get
                Return CType(Me(Me.tableAsientosContables.BeneficiarioColumn),String)
            End Get
            Set
                Me(Me.tableAsientosContables.BeneficiarioColumn) = value
            End Set
        End Property
        
        Public Property TipoDoc As Integer
            Get
                Return CType(Me(Me.tableAsientosContables.TipoDocColumn),Integer)
            End Get
            Set
                Me(Me.tableAsientosContables.TipoDocColumn) = value
            End Set
        End Property
        
        Public Property Accion As String
            Get
                Return CType(Me(Me.tableAsientosContables.AccionColumn),String)
            End Get
            Set
                Me(Me.tableAsientosContables.AccionColumn) = value
            End Set
        End Property
        
        Public Property Anulado As Boolean
            Get
                Return CType(Me(Me.tableAsientosContables.AnuladoColumn),Boolean)
            End Get
            Set
                Me(Me.tableAsientosContables.AnuladoColumn) = value
            End Set
        End Property
        
        Public Property FechaEntrada As Date
            Get
                Return CType(Me(Me.tableAsientosContables.FechaEntradaColumn),Date)
            End Get
            Set
                Me(Me.tableAsientosContables.FechaEntradaColumn) = value
            End Set
        End Property
        
        Public Property Mayorizado As Boolean
            Get
                Return CType(Me(Me.tableAsientosContables.MayorizadoColumn),Boolean)
            End Get
            Set
                Me(Me.tableAsientosContables.MayorizadoColumn) = value
            End Set
        End Property
        
        Public Property Periodo As String
            Get
                Return CType(Me(Me.tableAsientosContables.PeriodoColumn),String)
            End Get
            Set
                Me(Me.tableAsientosContables.PeriodoColumn) = value
            End Set
        End Property
        
        Public Property NumMayorizado As Decimal
            Get
                Return CType(Me(Me.tableAsientosContables.NumMayorizadoColumn),Decimal)
            End Get
            Set
                Me(Me.tableAsientosContables.NumMayorizadoColumn) = value
            End Set
        End Property
        
        Public Property Modulo As String
            Get
                Return CType(Me(Me.tableAsientosContables.ModuloColumn),String)
            End Get
            Set
                Me(Me.tableAsientosContables.ModuloColumn) = value
            End Set
        End Property
        
        Public Property Observaciones As String
            Get
                Return CType(Me(Me.tableAsientosContables.ObservacionesColumn),String)
            End Get
            Set
                Me(Me.tableAsientosContables.ObservacionesColumn) = value
            End Set
        End Property
        
        Public Property NombreUsuario As String
            Get
                Return CType(Me(Me.tableAsientosContables.NombreUsuarioColumn),String)
            End Get
            Set
                Me(Me.tableAsientosContables.NombreUsuarioColumn) = value
            End Set
        End Property
        
        Public Property TotalDebe As Double
            Get
                Return CType(Me(Me.tableAsientosContables.TotalDebeColumn),Double)
            End Get
            Set
                Me(Me.tableAsientosContables.TotalDebeColumn) = value
            End Set
        End Property
        
        Public Property TotalHaber As Double
            Get
                Return CType(Me(Me.tableAsientosContables.TotalHaberColumn),Double)
            End Get
            Set
                Me(Me.tableAsientosContables.TotalHaberColumn) = value
            End Set
        End Property
        
        Public Property CodMoneda As Integer
            Get
                Return CType(Me(Me.tableAsientosContables.CodMonedaColumn),Integer)
            End Get
            Set
                Me(Me.tableAsientosContables.CodMonedaColumn) = value
            End Set
        End Property
        
        Public Property TipoCambio As Double
            Get
                Return CType(Me(Me.tableAsientosContables.TipoCambioColumn),Double)
            End Get
            Set
                Me(Me.tableAsientosContables.TipoCambioColumn) = value
            End Set
        End Property
        
        Public Property IdNumDoc As Long
            Get
                Return CType(Me(Me.tableAsientosContables.IdNumDocColumn),Long)
            End Get
            Set
                Me(Me.tableAsientosContables.IdNumDocColumn) = value
            End Set
        End Property
        
        Public Function GetDetallesAsientosContableRows() As DetallesAsientosContableRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("AsientosContablesDetallesAsientosContable")),DetallesAsientosContableRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AsientosContablesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AsientosContablesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AsientosContablesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AsientosContablesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CentroCostoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnCodigo As DataColumn
        
        Private columnNombre As DataColumn
        
        Friend Sub New()
            MyBase.New("CentroCosto")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property CodigoColumn As DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        Friend ReadOnly Property NombreColumn As DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CentroCostoRow
            Get
                Return CType(Me.Rows(index),CentroCostoRow)
            End Get
        End Property
        
        Public Event CentroCostoRowChanged As CentroCostoRowChangeEventHandler
        
        Public Event CentroCostoRowChanging As CentroCostoRowChangeEventHandler
        
        Public Event CentroCostoRowDeleted As CentroCostoRowChangeEventHandler
        
        Public Event CentroCostoRowDeleting As CentroCostoRowChangeEventHandler
        
        Public Overloads Sub AddCentroCostoRow(ByVal row As CentroCostoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCentroCostoRow(ByVal Codigo As String, ByVal Nombre As String) As CentroCostoRow
            Dim rowCentroCostoRow As CentroCostoRow = CType(Me.NewRow,CentroCostoRow)
            rowCentroCostoRow.ItemArray = New Object() {Nothing, Codigo, Nombre}
            Me.Rows.Add(rowCentroCostoRow)
            Return rowCentroCostoRow
        End Function
        
        Public Function FindById(ByVal Id As Integer) As CentroCostoRow
            Return CType(Me.Rows.Find(New Object() {Id}),CentroCostoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CentroCostoDataTable = CType(MyBase.Clone,CentroCostoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CentroCostoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnCodigo = Me.Columns("Codigo")
            Me.columnNombre = Me.Columns("Nombre")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnCodigo = New DataColumn("Codigo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodigo)
            Me.columnNombre = New DataColumn("Nombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombre)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
            Me.columnId.Unique = true
            Me.columnCodigo.AllowDBNull = false
            Me.columnNombre.AllowDBNull = false
        End Sub
        
        Public Function NewCentroCostoRow() As CentroCostoRow
            Return CType(Me.NewRow,CentroCostoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CentroCostoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CentroCostoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CentroCostoRowChangedEvent) Is Nothing) Then
                RaiseEvent CentroCostoRowChanged(Me, New CentroCostoRowChangeEvent(CType(e.Row,CentroCostoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CentroCostoRowChangingEvent) Is Nothing) Then
                RaiseEvent CentroCostoRowChanging(Me, New CentroCostoRowChangeEvent(CType(e.Row,CentroCostoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CentroCostoRowDeletedEvent) Is Nothing) Then
                RaiseEvent CentroCostoRowDeleted(Me, New CentroCostoRowChangeEvent(CType(e.Row,CentroCostoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CentroCostoRowDeletingEvent) Is Nothing) Then
                RaiseEvent CentroCostoRowDeleting(Me, New CentroCostoRowChangeEvent(CType(e.Row,CentroCostoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCentroCostoRow(ByVal row As CentroCostoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CentroCostoRow
        Inherits DataRow
        
        Private tableCentroCosto As CentroCostoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCentroCosto = CType(Me.Table,CentroCostoDataTable)
        End Sub
        
        Public Property Id As Integer
            Get
                Return CType(Me(Me.tableCentroCosto.IdColumn),Integer)
            End Get
            Set
                Me(Me.tableCentroCosto.IdColumn) = value
            End Set
        End Property
        
        Public Property Codigo As String
            Get
                Return CType(Me(Me.tableCentroCosto.CodigoColumn),String)
            End Get
            Set
                Me(Me.tableCentroCosto.CodigoColumn) = value
            End Set
        End Property
        
        Public Property Nombre As String
            Get
                Return CType(Me(Me.tableCentroCosto.NombreColumn),String)
            End Get
            Set
                Me(Me.tableCentroCosto.NombreColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CentroCostoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CentroCostoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CentroCostoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CentroCostoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CentroCosto_MovimientosDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnIdAsiento As DataColumn
        
        Private columnDocumento As DataColumn
        
        Private columnFecha As DataColumn
        
        Private columnIdCentroCosto As DataColumn
        
        Private columnMonto As DataColumn
        
        Private columnDebe As DataColumn
        
        Private columnHaber As DataColumn
        
        Private columnDescripcion As DataColumn
        
        Private columnCuentaContable As DataColumn
        
        Private columnNombreCuentaContable As DataColumn
        
        Private columnTipo As DataColumn
        
        Private columnIdDetalle As DataColumn
        
        Friend Sub New()
            MyBase.New("CentroCosto_Movimientos")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property IdAsientoColumn As DataColumn
            Get
                Return Me.columnIdAsiento
            End Get
        End Property
        
        Friend ReadOnly Property DocumentoColumn As DataColumn
            Get
                Return Me.columnDocumento
            End Get
        End Property
        
        Friend ReadOnly Property FechaColumn As DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        Friend ReadOnly Property IdCentroCostoColumn As DataColumn
            Get
                Return Me.columnIdCentroCosto
            End Get
        End Property
        
        Friend ReadOnly Property MontoColumn As DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        Friend ReadOnly Property DebeColumn As DataColumn
            Get
                Return Me.columnDebe
            End Get
        End Property
        
        Friend ReadOnly Property HaberColumn As DataColumn
            Get
                Return Me.columnHaber
            End Get
        End Property
        
        Friend ReadOnly Property DescripcionColumn As DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        Friend ReadOnly Property CuentaContableColumn As DataColumn
            Get
                Return Me.columnCuentaContable
            End Get
        End Property
        
        Friend ReadOnly Property NombreCuentaContableColumn As DataColumn
            Get
                Return Me.columnNombreCuentaContable
            End Get
        End Property
        
        Friend ReadOnly Property TipoColumn As DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        Friend ReadOnly Property IdDetalleColumn As DataColumn
            Get
                Return Me.columnIdDetalle
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CentroCosto_MovimientosRow
            Get
                Return CType(Me.Rows(index),CentroCosto_MovimientosRow)
            End Get
        End Property
        
        Public Event CentroCosto_MovimientosRowChanged As CentroCosto_MovimientosRowChangeEventHandler
        
        Public Event CentroCosto_MovimientosRowChanging As CentroCosto_MovimientosRowChangeEventHandler
        
        Public Event CentroCosto_MovimientosRowDeleted As CentroCosto_MovimientosRowChangeEventHandler
        
        Public Event CentroCosto_MovimientosRowDeleting As CentroCosto_MovimientosRowChangeEventHandler
        
        Public Overloads Sub AddCentroCosto_MovimientosRow(ByVal row As CentroCosto_MovimientosRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCentroCosto_MovimientosRow(ByVal IdAsiento As String, ByVal Documento As String, ByVal Fecha As Date, ByVal IdCentroCosto As Integer, ByVal Monto As Double, ByVal Debe As Boolean, ByVal Haber As Boolean, ByVal Descripcion As String, ByVal CuentaContable As String, ByVal NombreCuentaContable As String, ByVal Tipo As Integer, ByVal IdDetalle As Long) As CentroCosto_MovimientosRow
            Dim rowCentroCosto_MovimientosRow As CentroCosto_MovimientosRow = CType(Me.NewRow,CentroCosto_MovimientosRow)
            rowCentroCosto_MovimientosRow.ItemArray = New Object() {Nothing, IdAsiento, Documento, Fecha, IdCentroCosto, Monto, Debe, Haber, Descripcion, CuentaContable, NombreCuentaContable, Tipo, IdDetalle}
            Me.Rows.Add(rowCentroCosto_MovimientosRow)
            Return rowCentroCosto_MovimientosRow
        End Function
        
        Public Function FindById(ByVal Id As Long) As CentroCosto_MovimientosRow
            Return CType(Me.Rows.Find(New Object() {Id}),CentroCosto_MovimientosRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CentroCosto_MovimientosDataTable = CType(MyBase.Clone,CentroCosto_MovimientosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CentroCosto_MovimientosDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnIdAsiento = Me.Columns("IdAsiento")
            Me.columnDocumento = Me.Columns("Documento")
            Me.columnFecha = Me.Columns("Fecha")
            Me.columnIdCentroCosto = Me.Columns("IdCentroCosto")
            Me.columnMonto = Me.Columns("Monto")
            Me.columnDebe = Me.Columns("Debe")
            Me.columnHaber = Me.Columns("Haber")
            Me.columnDescripcion = Me.Columns("Descripcion")
            Me.columnCuentaContable = Me.Columns("CuentaContable")
            Me.columnNombreCuentaContable = Me.Columns("NombreCuentaContable")
            Me.columnTipo = Me.Columns("Tipo")
            Me.columnIdDetalle = Me.Columns("IdDetalle")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnIdAsiento = New DataColumn("IdAsiento", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdAsiento)
            Me.columnDocumento = New DataColumn("Documento", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDocumento)
            Me.columnFecha = New DataColumn("Fecha", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha)
            Me.columnIdCentroCosto = New DataColumn("IdCentroCosto", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdCentroCosto)
            Me.columnMonto = New DataColumn("Monto", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto)
            Me.columnDebe = New DataColumn("Debe", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDebe)
            Me.columnHaber = New DataColumn("Haber", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHaber)
            Me.columnDescripcion = New DataColumn("Descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcion)
            Me.columnCuentaContable = New DataColumn("CuentaContable", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuentaContable)
            Me.columnNombreCuentaContable = New DataColumn("NombreCuentaContable", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombreCuentaContable)
            Me.columnTipo = New DataColumn("Tipo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipo)
            Me.columnIdDetalle = New DataColumn("IdDetalle", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdDetalle)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
            Me.columnId.Unique = true
            Me.columnIdAsiento.AllowDBNull = false
            Me.columnDocumento.AllowDBNull = false
            Me.columnFecha.AllowDBNull = false
            Me.columnIdCentroCosto.AllowDBNull = false
            Me.columnMonto.AllowDBNull = false
            Me.columnDebe.AllowDBNull = false
            Me.columnHaber.AllowDBNull = false
            Me.columnCuentaContable.AllowDBNull = false
            Me.columnNombreCuentaContable.AllowDBNull = false
            Me.columnTipo.AllowDBNull = false
            Me.columnIdDetalle.AllowDBNull = false
        End Sub
        
        Public Function NewCentroCosto_MovimientosRow() As CentroCosto_MovimientosRow
            Return CType(Me.NewRow,CentroCosto_MovimientosRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CentroCosto_MovimientosRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CentroCosto_MovimientosRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CentroCosto_MovimientosRowChangedEvent) Is Nothing) Then
                RaiseEvent CentroCosto_MovimientosRowChanged(Me, New CentroCosto_MovimientosRowChangeEvent(CType(e.Row,CentroCosto_MovimientosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CentroCosto_MovimientosRowChangingEvent) Is Nothing) Then
                RaiseEvent CentroCosto_MovimientosRowChanging(Me, New CentroCosto_MovimientosRowChangeEvent(CType(e.Row,CentroCosto_MovimientosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CentroCosto_MovimientosRowDeletedEvent) Is Nothing) Then
                RaiseEvent CentroCosto_MovimientosRowDeleted(Me, New CentroCosto_MovimientosRowChangeEvent(CType(e.Row,CentroCosto_MovimientosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CentroCosto_MovimientosRowDeletingEvent) Is Nothing) Then
                RaiseEvent CentroCosto_MovimientosRowDeleting(Me, New CentroCosto_MovimientosRowChangeEvent(CType(e.Row,CentroCosto_MovimientosRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCentroCosto_MovimientosRow(ByVal row As CentroCosto_MovimientosRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CentroCosto_MovimientosRow
        Inherits DataRow
        
        Private tableCentroCosto_Movimientos As CentroCosto_MovimientosDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCentroCosto_Movimientos = CType(Me.Table,CentroCosto_MovimientosDataTable)
        End Sub
        
        Public Property Id As Long
            Get
                Return CType(Me(Me.tableCentroCosto_Movimientos.IdColumn),Long)
            End Get
            Set
                Me(Me.tableCentroCosto_Movimientos.IdColumn) = value
            End Set
        End Property
        
        Public Property IdAsiento As String
            Get
                Return CType(Me(Me.tableCentroCosto_Movimientos.IdAsientoColumn),String)
            End Get
            Set
                Me(Me.tableCentroCosto_Movimientos.IdAsientoColumn) = value
            End Set
        End Property
        
        Public Property Documento As String
            Get
                Return CType(Me(Me.tableCentroCosto_Movimientos.DocumentoColumn),String)
            End Get
            Set
                Me(Me.tableCentroCosto_Movimientos.DocumentoColumn) = value
            End Set
        End Property
        
        Public Property Fecha As Date
            Get
                Return CType(Me(Me.tableCentroCosto_Movimientos.FechaColumn),Date)
            End Get
            Set
                Me(Me.tableCentroCosto_Movimientos.FechaColumn) = value
            End Set
        End Property
        
        Public Property IdCentroCosto As Integer
            Get
                Return CType(Me(Me.tableCentroCosto_Movimientos.IdCentroCostoColumn),Integer)
            End Get
            Set
                Me(Me.tableCentroCosto_Movimientos.IdCentroCostoColumn) = value
            End Set
        End Property
        
        Public Property Monto As Double
            Get
                Return CType(Me(Me.tableCentroCosto_Movimientos.MontoColumn),Double)
            End Get
            Set
                Me(Me.tableCentroCosto_Movimientos.MontoColumn) = value
            End Set
        End Property
        
        Public Property Debe As Boolean
            Get
                Return CType(Me(Me.tableCentroCosto_Movimientos.DebeColumn),Boolean)
            End Get
            Set
                Me(Me.tableCentroCosto_Movimientos.DebeColumn) = value
            End Set
        End Property
        
        Public Property Haber As Boolean
            Get
                Return CType(Me(Me.tableCentroCosto_Movimientos.HaberColumn),Boolean)
            End Get
            Set
                Me(Me.tableCentroCosto_Movimientos.HaberColumn) = value
            End Set
        End Property
        
        Public Property Descripcion As String
            Get
                Try 
                    Return CType(Me(Me.tableCentroCosto_Movimientos.DescripcionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroCosto_Movimientos.DescripcionColumn) = value
            End Set
        End Property
        
        Public Property CuentaContable As String
            Get
                Return CType(Me(Me.tableCentroCosto_Movimientos.CuentaContableColumn),String)
            End Get
            Set
                Me(Me.tableCentroCosto_Movimientos.CuentaContableColumn) = value
            End Set
        End Property
        
        Public Property NombreCuentaContable As String
            Get
                Return CType(Me(Me.tableCentroCosto_Movimientos.NombreCuentaContableColumn),String)
            End Get
            Set
                Me(Me.tableCentroCosto_Movimientos.NombreCuentaContableColumn) = value
            End Set
        End Property
        
        Public Property Tipo As Integer
            Get
                Return CType(Me(Me.tableCentroCosto_Movimientos.TipoColumn),Integer)
            End Get
            Set
                Me(Me.tableCentroCosto_Movimientos.TipoColumn) = value
            End Set
        End Property
        
        Public Property IdDetalle As Long
            Get
                Return CType(Me(Me.tableCentroCosto_Movimientos.IdDetalleColumn),Long)
            End Get
            Set
                Me(Me.tableCentroCosto_Movimientos.IdDetalleColumn) = value
            End Set
        End Property
        
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableCentroCosto_Movimientos.DescripcionColumn)
        End Function
        
        Public Sub SetDescripcionNull()
            Me(Me.tableCentroCosto_Movimientos.DescripcionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CentroCosto_MovimientosRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CentroCosto_MovimientosRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CentroCosto_MovimientosRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CentroCosto_MovimientosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CentroCostoDetalleDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCentroCosto As DataColumn
        
        Private columnMonto As DataColumn
        
        Private columnDescripcion As DataColumn
        
        Private columnId As DataColumn
        
        Friend Sub New()
            MyBase.New("CentroCostoDetalle")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CentroCostoColumn As DataColumn
            Get
                Return Me.columnCentroCosto
            End Get
        End Property
        
        Friend ReadOnly Property MontoColumn As DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        Friend ReadOnly Property DescripcionColumn As DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CentroCostoDetalleRow
            Get
                Return CType(Me.Rows(index),CentroCostoDetalleRow)
            End Get
        End Property
        
        Public Event CentroCostoDetalleRowChanged As CentroCostoDetalleRowChangeEventHandler
        
        Public Event CentroCostoDetalleRowChanging As CentroCostoDetalleRowChangeEventHandler
        
        Public Event CentroCostoDetalleRowDeleted As CentroCostoDetalleRowChangeEventHandler
        
        Public Event CentroCostoDetalleRowDeleting As CentroCostoDetalleRowChangeEventHandler
        
        Public Overloads Sub AddCentroCostoDetalleRow(ByVal row As CentroCostoDetalleRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCentroCostoDetalleRow(ByVal CentroCosto As String, ByVal Monto As Double, ByVal Descripcion As String, ByVal Id As Integer) As CentroCostoDetalleRow
            Dim rowCentroCostoDetalleRow As CentroCostoDetalleRow = CType(Me.NewRow,CentroCostoDetalleRow)
            rowCentroCostoDetalleRow.ItemArray = New Object() {CentroCosto, Monto, Descripcion, Id}
            Me.Rows.Add(rowCentroCostoDetalleRow)
            Return rowCentroCostoDetalleRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CentroCostoDetalleDataTable = CType(MyBase.Clone,CentroCostoDetalleDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CentroCostoDetalleDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCentroCosto = Me.Columns("CentroCosto")
            Me.columnMonto = Me.Columns("Monto")
            Me.columnDescripcion = Me.Columns("Descripcion")
            Me.columnId = Me.Columns("Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnCentroCosto = New DataColumn("CentroCosto", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCentroCosto)
            Me.columnMonto = New DataColumn("Monto", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto)
            Me.columnDescripcion = New DataColumn("Descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcion)
            Me.columnId = New DataColumn("Id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
        End Sub
        
        Public Function NewCentroCostoDetalleRow() As CentroCostoDetalleRow
            Return CType(Me.NewRow,CentroCostoDetalleRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CentroCostoDetalleRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CentroCostoDetalleRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CentroCostoDetalleRowChangedEvent) Is Nothing) Then
                RaiseEvent CentroCostoDetalleRowChanged(Me, New CentroCostoDetalleRowChangeEvent(CType(e.Row,CentroCostoDetalleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CentroCostoDetalleRowChangingEvent) Is Nothing) Then
                RaiseEvent CentroCostoDetalleRowChanging(Me, New CentroCostoDetalleRowChangeEvent(CType(e.Row,CentroCostoDetalleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CentroCostoDetalleRowDeletedEvent) Is Nothing) Then
                RaiseEvent CentroCostoDetalleRowDeleted(Me, New CentroCostoDetalleRowChangeEvent(CType(e.Row,CentroCostoDetalleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CentroCostoDetalleRowDeletingEvent) Is Nothing) Then
                RaiseEvent CentroCostoDetalleRowDeleting(Me, New CentroCostoDetalleRowChangeEvent(CType(e.Row,CentroCostoDetalleRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCentroCostoDetalleRow(ByVal row As CentroCostoDetalleRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CentroCostoDetalleRow
        Inherits DataRow
        
        Private tableCentroCostoDetalle As CentroCostoDetalleDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCentroCostoDetalle = CType(Me.Table,CentroCostoDetalleDataTable)
        End Sub
        
        Public Property CentroCosto As String
            Get
                Try 
                    Return CType(Me(Me.tableCentroCostoDetalle.CentroCostoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroCostoDetalle.CentroCostoColumn) = value
            End Set
        End Property
        
        Public Property Monto As Double
            Get
                Try 
                    Return CType(Me(Me.tableCentroCostoDetalle.MontoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroCostoDetalle.MontoColumn) = value
            End Set
        End Property
        
        Public Property Descripcion As String
            Get
                Try 
                    Return CType(Me(Me.tableCentroCostoDetalle.DescripcionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroCostoDetalle.DescripcionColumn) = value
            End Set
        End Property
        
        Public Property Id As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCentroCostoDetalle.IdColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroCostoDetalle.IdColumn) = value
            End Set
        End Property
        
        Public Function IsCentroCostoNull() As Boolean
            Return Me.IsNull(Me.tableCentroCostoDetalle.CentroCostoColumn)
        End Function
        
        Public Sub SetCentroCostoNull()
            Me(Me.tableCentroCostoDetalle.CentroCostoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMontoNull() As Boolean
            Return Me.IsNull(Me.tableCentroCostoDetalle.MontoColumn)
        End Function
        
        Public Sub SetMontoNull()
            Me(Me.tableCentroCostoDetalle.MontoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableCentroCostoDetalle.DescripcionColumn)
        End Function
        
        Public Sub SetDescripcionNull()
            Me(Me.tableCentroCostoDetalle.DescripcionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdNull() As Boolean
            Return Me.IsNull(Me.tableCentroCostoDetalle.IdColumn)
        End Function
        
        Public Sub SetIdNull()
            Me(Me.tableCentroCostoDetalle.IdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CentroCostoDetalleRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CentroCostoDetalleRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CentroCostoDetalleRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CentroCostoDetalleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ChequesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId_Cheque As DataColumn
        
        Private columnNum_Cheque As DataColumn
        
        Private columnId_CuentaBancaria As DataColumn
        
        Private columnFecha As DataColumn
        
        Private columnPortador As DataColumn
        
        Private columnMonto As DataColumn
        
        Private columnConciliado As DataColumn
        
        Private columnAnulado As DataColumn
        
        Private columnObservaciones As DataColumn
        
        Private columnCed_Usuario As DataColumn
        
        Private columnContabilizado As DataColumn
        
        Private columnAsiento As DataColumn
        
        Private columnCuenta_Destino As DataColumn
        
        Private columnTipo As DataColumn
        
        Private columnNum_Conciliacion As DataColumn
        
        Private columnMontoLetras As DataColumn
        
        Private columnCodigoMoneda As DataColumn
        
        Private columnTipoCambio As DataColumn
        
        Friend Sub New()
            MyBase.New("Cheques")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Id_ChequeColumn As DataColumn
            Get
                Return Me.columnId_Cheque
            End Get
        End Property
        
        Friend ReadOnly Property Num_ChequeColumn As DataColumn
            Get
                Return Me.columnNum_Cheque
            End Get
        End Property
        
        Friend ReadOnly Property Id_CuentaBancariaColumn As DataColumn
            Get
                Return Me.columnId_CuentaBancaria
            End Get
        End Property
        
        Friend ReadOnly Property FechaColumn As DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        Friend ReadOnly Property PortadorColumn As DataColumn
            Get
                Return Me.columnPortador
            End Get
        End Property
        
        Friend ReadOnly Property MontoColumn As DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        Friend ReadOnly Property ConciliadoColumn As DataColumn
            Get
                Return Me.columnConciliado
            End Get
        End Property
        
        Friend ReadOnly Property AnuladoColumn As DataColumn
            Get
                Return Me.columnAnulado
            End Get
        End Property
        
        Friend ReadOnly Property ObservacionesColumn As DataColumn
            Get
                Return Me.columnObservaciones
            End Get
        End Property
        
        Friend ReadOnly Property Ced_UsuarioColumn As DataColumn
            Get
                Return Me.columnCed_Usuario
            End Get
        End Property
        
        Friend ReadOnly Property ContabilizadoColumn As DataColumn
            Get
                Return Me.columnContabilizado
            End Get
        End Property
        
        Friend ReadOnly Property AsientoColumn As DataColumn
            Get
                Return Me.columnAsiento
            End Get
        End Property
        
        Friend ReadOnly Property Cuenta_DestinoColumn As DataColumn
            Get
                Return Me.columnCuenta_Destino
            End Get
        End Property
        
        Friend ReadOnly Property TipoColumn As DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        Friend ReadOnly Property Num_ConciliacionColumn As DataColumn
            Get
                Return Me.columnNum_Conciliacion
            End Get
        End Property
        
        Friend ReadOnly Property MontoLetrasColumn As DataColumn
            Get
                Return Me.columnMontoLetras
            End Get
        End Property
        
        Friend ReadOnly Property CodigoMonedaColumn As DataColumn
            Get
                Return Me.columnCodigoMoneda
            End Get
        End Property
        
        Friend ReadOnly Property TipoCambioColumn As DataColumn
            Get
                Return Me.columnTipoCambio
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ChequesRow
            Get
                Return CType(Me.Rows(index),ChequesRow)
            End Get
        End Property
        
        Public Event ChequesRowChanged As ChequesRowChangeEventHandler
        
        Public Event ChequesRowChanging As ChequesRowChangeEventHandler
        
        Public Event ChequesRowDeleted As ChequesRowChangeEventHandler
        
        Public Event ChequesRowDeleting As ChequesRowChangeEventHandler
        
        Public Overloads Sub AddChequesRow(ByVal row As ChequesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddChequesRow( _
                    ByVal Num_Cheque As Long,  _
                    ByVal Id_CuentaBancaria As Integer,  _
                    ByVal Fecha As Date,  _
                    ByVal Portador As String,  _
                    ByVal Monto As Double,  _
                    ByVal Conciliado As Boolean,  _
                    ByVal Anulado As Boolean,  _
                    ByVal Observaciones As String,  _
                    ByVal Ced_Usuario As String,  _
                    ByVal Contabilizado As Boolean,  _
                    ByVal Asiento As String,  _
                    ByVal Cuenta_Destino As String,  _
                    ByVal Tipo As String,  _
                    ByVal Num_Conciliacion As Long,  _
                    ByVal MontoLetras As String,  _
                    ByVal CodigoMoneda As Integer,  _
                    ByVal TipoCambio As Double) As ChequesRow
            Dim rowChequesRow As ChequesRow = CType(Me.NewRow,ChequesRow)
            rowChequesRow.ItemArray = New Object() {Nothing, Num_Cheque, Id_CuentaBancaria, Fecha, Portador, Monto, Conciliado, Anulado, Observaciones, Ced_Usuario, Contabilizado, Asiento, Cuenta_Destino, Tipo, Num_Conciliacion, MontoLetras, CodigoMoneda, TipoCambio}
            Me.Rows.Add(rowChequesRow)
            Return rowChequesRow
        End Function
        
        Public Function FindById_Cheque(ByVal Id_Cheque As Long) As ChequesRow
            Return CType(Me.Rows.Find(New Object() {Id_Cheque}),ChequesRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ChequesDataTable = CType(MyBase.Clone,ChequesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ChequesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId_Cheque = Me.Columns("Id_Cheque")
            Me.columnNum_Cheque = Me.Columns("Num_Cheque")
            Me.columnId_CuentaBancaria = Me.Columns("Id_CuentaBancaria")
            Me.columnFecha = Me.Columns("Fecha")
            Me.columnPortador = Me.Columns("Portador")
            Me.columnMonto = Me.Columns("Monto")
            Me.columnConciliado = Me.Columns("Conciliado")
            Me.columnAnulado = Me.Columns("Anulado")
            Me.columnObservaciones = Me.Columns("Observaciones")
            Me.columnCed_Usuario = Me.Columns("Ced_Usuario")
            Me.columnContabilizado = Me.Columns("Contabilizado")
            Me.columnAsiento = Me.Columns("Asiento")
            Me.columnCuenta_Destino = Me.Columns("Cuenta_Destino")
            Me.columnTipo = Me.Columns("Tipo")
            Me.columnNum_Conciliacion = Me.Columns("Num_Conciliacion")
            Me.columnMontoLetras = Me.Columns("MontoLetras")
            Me.columnCodigoMoneda = Me.Columns("CodigoMoneda")
            Me.columnTipoCambio = Me.Columns("TipoCambio")
        End Sub
        
        Private Sub InitClass()
            Me.columnId_Cheque = New DataColumn("Id_Cheque", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Cheque)
            Me.columnNum_Cheque = New DataColumn("Num_Cheque", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNum_Cheque)
            Me.columnId_CuentaBancaria = New DataColumn("Id_CuentaBancaria", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_CuentaBancaria)
            Me.columnFecha = New DataColumn("Fecha", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha)
            Me.columnPortador = New DataColumn("Portador", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPortador)
            Me.columnMonto = New DataColumn("Monto", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto)
            Me.columnConciliado = New DataColumn("Conciliado", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnConciliado)
            Me.columnAnulado = New DataColumn("Anulado", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAnulado)
            Me.columnObservaciones = New DataColumn("Observaciones", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnObservaciones)
            Me.columnCed_Usuario = New DataColumn("Ced_Usuario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCed_Usuario)
            Me.columnContabilizado = New DataColumn("Contabilizado", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnContabilizado)
            Me.columnAsiento = New DataColumn("Asiento", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAsiento)
            Me.columnCuenta_Destino = New DataColumn("Cuenta_Destino", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuenta_Destino)
            Me.columnTipo = New DataColumn("Tipo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipo)
            Me.columnNum_Conciliacion = New DataColumn("Num_Conciliacion", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNum_Conciliacion)
            Me.columnMontoLetras = New DataColumn("MontoLetras", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMontoLetras)
            Me.columnCodigoMoneda = New DataColumn("CodigoMoneda", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodigoMoneda)
            Me.columnTipoCambio = New DataColumn("TipoCambio", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipoCambio)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId_Cheque}, true))
            Me.columnId_Cheque.AutoIncrement = true
            Me.columnId_Cheque.AllowDBNull = false
            Me.columnId_Cheque.ReadOnly = true
            Me.columnId_Cheque.Unique = true
            Me.columnNum_Cheque.AllowDBNull = false
            Me.columnId_CuentaBancaria.AllowDBNull = false
            Me.columnFecha.AllowDBNull = false
            Me.columnPortador.AllowDBNull = false
            Me.columnMonto.AllowDBNull = false
            Me.columnConciliado.AllowDBNull = false
            Me.columnAnulado.AllowDBNull = false
            Me.columnObservaciones.AllowDBNull = false
            Me.columnCed_Usuario.AllowDBNull = false
            Me.columnContabilizado.AllowDBNull = false
            Me.columnAsiento.AllowDBNull = false
            Me.columnCuenta_Destino.AllowDBNull = false
            Me.columnTipo.AllowDBNull = false
            Me.columnNum_Conciliacion.AllowDBNull = false
            Me.columnMontoLetras.AllowDBNull = false
            Me.columnCodigoMoneda.AllowDBNull = false
            Me.columnTipoCambio.AllowDBNull = false
        End Sub
        
        Public Function NewChequesRow() As ChequesRow
            Return CType(Me.NewRow,ChequesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ChequesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ChequesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ChequesRowChangedEvent) Is Nothing) Then
                RaiseEvent ChequesRowChanged(Me, New ChequesRowChangeEvent(CType(e.Row,ChequesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ChequesRowChangingEvent) Is Nothing) Then
                RaiseEvent ChequesRowChanging(Me, New ChequesRowChangeEvent(CType(e.Row,ChequesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ChequesRowDeletedEvent) Is Nothing) Then
                RaiseEvent ChequesRowDeleted(Me, New ChequesRowChangeEvent(CType(e.Row,ChequesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ChequesRowDeletingEvent) Is Nothing) Then
                RaiseEvent ChequesRowDeleting(Me, New ChequesRowChangeEvent(CType(e.Row,ChequesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveChequesRow(ByVal row As ChequesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ChequesRow
        Inherits DataRow
        
        Private tableCheques As ChequesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCheques = CType(Me.Table,ChequesDataTable)
        End Sub
        
        Public Property Id_Cheque As Long
            Get
                Return CType(Me(Me.tableCheques.Id_ChequeColumn),Long)
            End Get
            Set
                Me(Me.tableCheques.Id_ChequeColumn) = value
            End Set
        End Property
        
        Public Property Num_Cheque As Long
            Get
                Return CType(Me(Me.tableCheques.Num_ChequeColumn),Long)
            End Get
            Set
                Me(Me.tableCheques.Num_ChequeColumn) = value
            End Set
        End Property
        
        Public Property Id_CuentaBancaria As Integer
            Get
                Return CType(Me(Me.tableCheques.Id_CuentaBancariaColumn),Integer)
            End Get
            Set
                Me(Me.tableCheques.Id_CuentaBancariaColumn) = value
            End Set
        End Property
        
        Public Property Fecha As Date
            Get
                Return CType(Me(Me.tableCheques.FechaColumn),Date)
            End Get
            Set
                Me(Me.tableCheques.FechaColumn) = value
            End Set
        End Property
        
        Public Property Portador As String
            Get
                Return CType(Me(Me.tableCheques.PortadorColumn),String)
            End Get
            Set
                Me(Me.tableCheques.PortadorColumn) = value
            End Set
        End Property
        
        Public Property Monto As Double
            Get
                Return CType(Me(Me.tableCheques.MontoColumn),Double)
            End Get
            Set
                Me(Me.tableCheques.MontoColumn) = value
            End Set
        End Property
        
        Public Property Conciliado As Boolean
            Get
                Return CType(Me(Me.tableCheques.ConciliadoColumn),Boolean)
            End Get
            Set
                Me(Me.tableCheques.ConciliadoColumn) = value
            End Set
        End Property
        
        Public Property Anulado As Boolean
            Get
                Return CType(Me(Me.tableCheques.AnuladoColumn),Boolean)
            End Get
            Set
                Me(Me.tableCheques.AnuladoColumn) = value
            End Set
        End Property
        
        Public Property Observaciones As String
            Get
                Return CType(Me(Me.tableCheques.ObservacionesColumn),String)
            End Get
            Set
                Me(Me.tableCheques.ObservacionesColumn) = value
            End Set
        End Property
        
        Public Property Ced_Usuario As String
            Get
                Return CType(Me(Me.tableCheques.Ced_UsuarioColumn),String)
            End Get
            Set
                Me(Me.tableCheques.Ced_UsuarioColumn) = value
            End Set
        End Property
        
        Public Property Contabilizado As Boolean
            Get
                Return CType(Me(Me.tableCheques.ContabilizadoColumn),Boolean)
            End Get
            Set
                Me(Me.tableCheques.ContabilizadoColumn) = value
            End Set
        End Property
        
        Public Property Asiento As String
            Get
                Return CType(Me(Me.tableCheques.AsientoColumn),String)
            End Get
            Set
                Me(Me.tableCheques.AsientoColumn) = value
            End Set
        End Property
        
        Public Property Cuenta_Destino As String
            Get
                Return CType(Me(Me.tableCheques.Cuenta_DestinoColumn),String)
            End Get
            Set
                Me(Me.tableCheques.Cuenta_DestinoColumn) = value
            End Set
        End Property
        
        Public Property Tipo As String
            Get
                Return CType(Me(Me.tableCheques.TipoColumn),String)
            End Get
            Set
                Me(Me.tableCheques.TipoColumn) = value
            End Set
        End Property
        
        Public Property Num_Conciliacion As Long
            Get
                Return CType(Me(Me.tableCheques.Num_ConciliacionColumn),Long)
            End Get
            Set
                Me(Me.tableCheques.Num_ConciliacionColumn) = value
            End Set
        End Property
        
        Public Property MontoLetras As String
            Get
                Return CType(Me(Me.tableCheques.MontoLetrasColumn),String)
            End Get
            Set
                Me(Me.tableCheques.MontoLetrasColumn) = value
            End Set
        End Property
        
        Public Property CodigoMoneda As Integer
            Get
                Return CType(Me(Me.tableCheques.CodigoMonedaColumn),Integer)
            End Get
            Set
                Me(Me.tableCheques.CodigoMonedaColumn) = value
            End Set
        End Property
        
        Public Property TipoCambio As Double
            Get
                Return CType(Me(Me.tableCheques.TipoCambioColumn),Double)
            End Get
            Set
                Me(Me.tableCheques.TipoCambioColumn) = value
            End Set
        End Property
        
        Public Function GetCheques_DetalleRows() As Cheques_DetalleRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("ChequesCheques_Detalle")),Cheques_DetalleRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ChequesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ChequesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ChequesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ChequesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ConfiguracionesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCedula As DataColumn
        
        Private columnEmpresa As DataColumn
        
        Private columnFormatoCheck As DataColumn
        
        Friend Sub New()
            MyBase.New("Configuraciones")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CedulaColumn As DataColumn
            Get
                Return Me.columnCedula
            End Get
        End Property
        
        Friend ReadOnly Property EmpresaColumn As DataColumn
            Get
                Return Me.columnEmpresa
            End Get
        End Property
        
        Friend ReadOnly Property FormatoCheckColumn As DataColumn
            Get
                Return Me.columnFormatoCheck
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ConfiguracionesRow
            Get
                Return CType(Me.Rows(index),ConfiguracionesRow)
            End Get
        End Property
        
        Public Event ConfiguracionesRowChanged As ConfiguracionesRowChangeEventHandler
        
        Public Event ConfiguracionesRowChanging As ConfiguracionesRowChangeEventHandler
        
        Public Event ConfiguracionesRowDeleted As ConfiguracionesRowChangeEventHandler
        
        Public Event ConfiguracionesRowDeleting As ConfiguracionesRowChangeEventHandler
        
        Public Overloads Sub AddConfiguracionesRow(ByVal row As ConfiguracionesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddConfiguracionesRow(ByVal Cedula As String, ByVal Empresa As String, ByVal FormatoCheck As Boolean) As ConfiguracionesRow
            Dim rowConfiguracionesRow As ConfiguracionesRow = CType(Me.NewRow,ConfiguracionesRow)
            rowConfiguracionesRow.ItemArray = New Object() {Cedula, Empresa, FormatoCheck}
            Me.Rows.Add(rowConfiguracionesRow)
            Return rowConfiguracionesRow
        End Function
        
        Public Function FindByCedula(ByVal Cedula As String) As ConfiguracionesRow
            Return CType(Me.Rows.Find(New Object() {Cedula}),ConfiguracionesRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ConfiguracionesDataTable = CType(MyBase.Clone,ConfiguracionesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ConfiguracionesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCedula = Me.Columns("Cedula")
            Me.columnEmpresa = Me.Columns("Empresa")
            Me.columnFormatoCheck = Me.Columns("FormatoCheck")
        End Sub
        
        Private Sub InitClass()
            Me.columnCedula = New DataColumn("Cedula", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCedula)
            Me.columnEmpresa = New DataColumn("Empresa", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmpresa)
            Me.columnFormatoCheck = New DataColumn("FormatoCheck", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFormatoCheck)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCedula}, true))
            Me.columnCedula.AllowDBNull = false
            Me.columnCedula.Unique = true
            Me.columnEmpresa.AllowDBNull = false
            Me.columnFormatoCheck.AllowDBNull = false
        End Sub
        
        Public Function NewConfiguracionesRow() As ConfiguracionesRow
            Return CType(Me.NewRow,ConfiguracionesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ConfiguracionesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ConfiguracionesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ConfiguracionesRowChangedEvent) Is Nothing) Then
                RaiseEvent ConfiguracionesRowChanged(Me, New ConfiguracionesRowChangeEvent(CType(e.Row,ConfiguracionesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ConfiguracionesRowChangingEvent) Is Nothing) Then
                RaiseEvent ConfiguracionesRowChanging(Me, New ConfiguracionesRowChangeEvent(CType(e.Row,ConfiguracionesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ConfiguracionesRowDeletedEvent) Is Nothing) Then
                RaiseEvent ConfiguracionesRowDeleted(Me, New ConfiguracionesRowChangeEvent(CType(e.Row,ConfiguracionesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ConfiguracionesRowDeletingEvent) Is Nothing) Then
                RaiseEvent ConfiguracionesRowDeleting(Me, New ConfiguracionesRowChangeEvent(CType(e.Row,ConfiguracionesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveConfiguracionesRow(ByVal row As ConfiguracionesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ConfiguracionesRow
        Inherits DataRow
        
        Private tableConfiguraciones As ConfiguracionesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableConfiguraciones = CType(Me.Table,ConfiguracionesDataTable)
        End Sub
        
        Public Property Cedula As String
            Get
                Return CType(Me(Me.tableConfiguraciones.CedulaColumn),String)
            End Get
            Set
                Me(Me.tableConfiguraciones.CedulaColumn) = value
            End Set
        End Property
        
        Public Property Empresa As String
            Get
                Return CType(Me(Me.tableConfiguraciones.EmpresaColumn),String)
            End Get
            Set
                Me(Me.tableConfiguraciones.EmpresaColumn) = value
            End Set
        End Property
        
        Public Property FormatoCheck As Boolean
            Get
                Return CType(Me(Me.tableConfiguraciones.FormatoCheckColumn),Boolean)
            End Get
            Set
                Me(Me.tableConfiguraciones.FormatoCheckColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ConfiguracionesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ConfiguracionesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ConfiguracionesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ConfiguracionesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Cheques_DetalleDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId_ChequeDet As DataColumn
        
        Private columnId_Cheque As DataColumn
        
        Private columnDescripcion_Mov As DataColumn
        
        Private columnCuenta_Contable As DataColumn
        
        Private columnMonto As DataColumn
        
        Private columnNombre_Cuenta As DataColumn
        
        Private columnHaber As DataColumn
        
        Private columnDebe As DataColumn
        
        Private columnMDebe As DataColumn
        
        Private columnMHaber As DataColumn
        
        Private columnPrincipal As DataColumn
        
        Friend Sub New()
            MyBase.New("Cheques_Detalle")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Id_ChequeDetColumn As DataColumn
            Get
                Return Me.columnId_ChequeDet
            End Get
        End Property
        
        Friend ReadOnly Property Id_ChequeColumn As DataColumn
            Get
                Return Me.columnId_Cheque
            End Get
        End Property
        
        Friend ReadOnly Property Descripcion_MovColumn As DataColumn
            Get
                Return Me.columnDescripcion_Mov
            End Get
        End Property
        
        Friend ReadOnly Property Cuenta_ContableColumn As DataColumn
            Get
                Return Me.columnCuenta_Contable
            End Get
        End Property
        
        Friend ReadOnly Property MontoColumn As DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        Friend ReadOnly Property Nombre_CuentaColumn As DataColumn
            Get
                Return Me.columnNombre_Cuenta
            End Get
        End Property
        
        Friend ReadOnly Property HaberColumn As DataColumn
            Get
                Return Me.columnHaber
            End Get
        End Property
        
        Friend ReadOnly Property DebeColumn As DataColumn
            Get
                Return Me.columnDebe
            End Get
        End Property
        
        Friend ReadOnly Property MDebeColumn As DataColumn
            Get
                Return Me.columnMDebe
            End Get
        End Property
        
        Friend ReadOnly Property MHaberColumn As DataColumn
            Get
                Return Me.columnMHaber
            End Get
        End Property
        
        Friend ReadOnly Property PrincipalColumn As DataColumn
            Get
                Return Me.columnPrincipal
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Cheques_DetalleRow
            Get
                Return CType(Me.Rows(index),Cheques_DetalleRow)
            End Get
        End Property
        
        Public Event Cheques_DetalleRowChanged As Cheques_DetalleRowChangeEventHandler
        
        Public Event Cheques_DetalleRowChanging As Cheques_DetalleRowChangeEventHandler
        
        Public Event Cheques_DetalleRowDeleted As Cheques_DetalleRowChangeEventHandler
        
        Public Event Cheques_DetalleRowDeleting As Cheques_DetalleRowChangeEventHandler
        
        Public Overloads Sub AddCheques_DetalleRow(ByVal row As Cheques_DetalleRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCheques_DetalleRow(ByVal parentChequesRowByChequesCheques_Detalle As ChequesRow, ByVal Descripcion_Mov As String, ByVal Cuenta_Contable As String, ByVal Monto As Double, ByVal Nombre_Cuenta As String, ByVal Haber As Boolean, ByVal Debe As Boolean, ByVal MDebe As Double, ByVal MHaber As Double, ByVal Principal As Boolean) As Cheques_DetalleRow
            Dim rowCheques_DetalleRow As Cheques_DetalleRow = CType(Me.NewRow,Cheques_DetalleRow)
            rowCheques_DetalleRow.ItemArray = New Object() {Nothing, parentChequesRowByChequesCheques_Detalle(0), Descripcion_Mov, Cuenta_Contable, Monto, Nombre_Cuenta, Haber, Debe, MDebe, MHaber, Principal}
            Me.Rows.Add(rowCheques_DetalleRow)
            Return rowCheques_DetalleRow
        End Function
        
        Public Function FindById_ChequeDet(ByVal Id_ChequeDet As Long) As Cheques_DetalleRow
            Return CType(Me.Rows.Find(New Object() {Id_ChequeDet}),Cheques_DetalleRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Cheques_DetalleDataTable = CType(MyBase.Clone,Cheques_DetalleDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Cheques_DetalleDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId_ChequeDet = Me.Columns("Id_ChequeDet")
            Me.columnId_Cheque = Me.Columns("Id_Cheque")
            Me.columnDescripcion_Mov = Me.Columns("Descripcion_Mov")
            Me.columnCuenta_Contable = Me.Columns("Cuenta_Contable")
            Me.columnMonto = Me.Columns("Monto")
            Me.columnNombre_Cuenta = Me.Columns("Nombre_Cuenta")
            Me.columnHaber = Me.Columns("Haber")
            Me.columnDebe = Me.Columns("Debe")
            Me.columnMDebe = Me.Columns("MDebe")
            Me.columnMHaber = Me.Columns("MHaber")
            Me.columnPrincipal = Me.Columns("Principal")
        End Sub
        
        Private Sub InitClass()
            Me.columnId_ChequeDet = New DataColumn("Id_ChequeDet", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_ChequeDet)
            Me.columnId_Cheque = New DataColumn("Id_Cheque", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Cheque)
            Me.columnDescripcion_Mov = New DataColumn("Descripcion_Mov", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcion_Mov)
            Me.columnCuenta_Contable = New DataColumn("Cuenta_Contable", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuenta_Contable)
            Me.columnMonto = New DataColumn("Monto", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto)
            Me.columnNombre_Cuenta = New DataColumn("Nombre_Cuenta", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombre_Cuenta)
            Me.columnHaber = New DataColumn("Haber", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHaber)
            Me.columnDebe = New DataColumn("Debe", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDebe)
            Me.columnMDebe = New DataColumn("MDebe", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMDebe)
            Me.columnMHaber = New DataColumn("MHaber", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMHaber)
            Me.columnPrincipal = New DataColumn("Principal", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrincipal)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId_ChequeDet}, true))
            Me.columnId_ChequeDet.AutoIncrement = true
            Me.columnId_ChequeDet.AllowDBNull = false
            Me.columnId_ChequeDet.ReadOnly = true
            Me.columnId_ChequeDet.Unique = true
            Me.columnId_Cheque.AllowDBNull = false
            Me.columnDescripcion_Mov.AllowDBNull = false
            Me.columnCuenta_Contable.AllowDBNull = false
            Me.columnMonto.AllowDBNull = false
            Me.columnNombre_Cuenta.AllowDBNull = false
            Me.columnHaber.AllowDBNull = false
            Me.columnDebe.AllowDBNull = false
        End Sub
        
        Public Function NewCheques_DetalleRow() As Cheques_DetalleRow
            Return CType(Me.NewRow,Cheques_DetalleRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Cheques_DetalleRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Cheques_DetalleRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Cheques_DetalleRowChangedEvent) Is Nothing) Then
                RaiseEvent Cheques_DetalleRowChanged(Me, New Cheques_DetalleRowChangeEvent(CType(e.Row,Cheques_DetalleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Cheques_DetalleRowChangingEvent) Is Nothing) Then
                RaiseEvent Cheques_DetalleRowChanging(Me, New Cheques_DetalleRowChangeEvent(CType(e.Row,Cheques_DetalleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Cheques_DetalleRowDeletedEvent) Is Nothing) Then
                RaiseEvent Cheques_DetalleRowDeleted(Me, New Cheques_DetalleRowChangeEvent(CType(e.Row,Cheques_DetalleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Cheques_DetalleRowDeletingEvent) Is Nothing) Then
                RaiseEvent Cheques_DetalleRowDeleting(Me, New Cheques_DetalleRowChangeEvent(CType(e.Row,Cheques_DetalleRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCheques_DetalleRow(ByVal row As Cheques_DetalleRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Cheques_DetalleRow
        Inherits DataRow
        
        Private tableCheques_Detalle As Cheques_DetalleDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCheques_Detalle = CType(Me.Table,Cheques_DetalleDataTable)
        End Sub
        
        Public Property Id_ChequeDet As Long
            Get
                Return CType(Me(Me.tableCheques_Detalle.Id_ChequeDetColumn),Long)
            End Get
            Set
                Me(Me.tableCheques_Detalle.Id_ChequeDetColumn) = value
            End Set
        End Property
        
        Public Property Id_Cheque As Long
            Get
                Return CType(Me(Me.tableCheques_Detalle.Id_ChequeColumn),Long)
            End Get
            Set
                Me(Me.tableCheques_Detalle.Id_ChequeColumn) = value
            End Set
        End Property
        
        Public Property Descripcion_Mov As String
            Get
                Return CType(Me(Me.tableCheques_Detalle.Descripcion_MovColumn),String)
            End Get
            Set
                Me(Me.tableCheques_Detalle.Descripcion_MovColumn) = value
            End Set
        End Property
        
        Public Property Cuenta_Contable As String
            Get
                Return CType(Me(Me.tableCheques_Detalle.Cuenta_ContableColumn),String)
            End Get
            Set
                Me(Me.tableCheques_Detalle.Cuenta_ContableColumn) = value
            End Set
        End Property
        
        Public Property Monto As Double
            Get
                Return CType(Me(Me.tableCheques_Detalle.MontoColumn),Double)
            End Get
            Set
                Me(Me.tableCheques_Detalle.MontoColumn) = value
            End Set
        End Property
        
        Public Property Nombre_Cuenta As String
            Get
                Return CType(Me(Me.tableCheques_Detalle.Nombre_CuentaColumn),String)
            End Get
            Set
                Me(Me.tableCheques_Detalle.Nombre_CuentaColumn) = value
            End Set
        End Property
        
        Public Property Haber As Boolean
            Get
                Return CType(Me(Me.tableCheques_Detalle.HaberColumn),Boolean)
            End Get
            Set
                Me(Me.tableCheques_Detalle.HaberColumn) = value
            End Set
        End Property
        
        Public Property Debe As Boolean
            Get
                Return CType(Me(Me.tableCheques_Detalle.DebeColumn),Boolean)
            End Get
            Set
                Me(Me.tableCheques_Detalle.DebeColumn) = value
            End Set
        End Property
        
        Public Property MDebe As Double
            Get
                Try 
                    Return CType(Me(Me.tableCheques_Detalle.MDebeColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCheques_Detalle.MDebeColumn) = value
            End Set
        End Property
        
        Public Property MHaber As Double
            Get
                Try 
                    Return CType(Me(Me.tableCheques_Detalle.MHaberColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCheques_Detalle.MHaberColumn) = value
            End Set
        End Property
        
        Public Property Principal As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCheques_Detalle.PrincipalColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCheques_Detalle.PrincipalColumn) = value
            End Set
        End Property
        
        Public Property ChequesRow As ChequesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ChequesCheques_Detalle")),ChequesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ChequesCheques_Detalle"))
            End Set
        End Property
        
        Public Function IsMDebeNull() As Boolean
            Return Me.IsNull(Me.tableCheques_Detalle.MDebeColumn)
        End Function
        
        Public Sub SetMDebeNull()
            Me(Me.tableCheques_Detalle.MDebeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMHaberNull() As Boolean
            Return Me.IsNull(Me.tableCheques_Detalle.MHaberColumn)
        End Function
        
        Public Sub SetMHaberNull()
            Me(Me.tableCheques_Detalle.MHaberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPrincipalNull() As Boolean
            Return Me.IsNull(Me.tableCheques_Detalle.PrincipalColumn)
        End Function
        
        Public Sub SetPrincipalNull()
            Me(Me.tableCheques_Detalle.PrincipalColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Cheques_DetalleRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Cheques_DetalleRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Cheques_DetalleRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Cheques_DetalleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DetallesAsientosContableDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID_Detalle As DataColumn
        
        Private columnNumAsiento As DataColumn
        
        Private columnCuenta As DataColumn
        
        Private columnNombreCuenta As DataColumn
        
        Private columnMonto As DataColumn
        
        Private columnDebe As DataColumn
        
        Private columnHaber As DataColumn
        
        Private columnDescripcionAsiento As DataColumn
        
        Private columnTipocambio As DataColumn
        
        Friend Sub New()
            MyBase.New("DetallesAsientosContable")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ID_DetalleColumn As DataColumn
            Get
                Return Me.columnID_Detalle
            End Get
        End Property
        
        Friend ReadOnly Property NumAsientoColumn As DataColumn
            Get
                Return Me.columnNumAsiento
            End Get
        End Property
        
        Friend ReadOnly Property CuentaColumn As DataColumn
            Get
                Return Me.columnCuenta
            End Get
        End Property
        
        Friend ReadOnly Property NombreCuentaColumn As DataColumn
            Get
                Return Me.columnNombreCuenta
            End Get
        End Property
        
        Friend ReadOnly Property MontoColumn As DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        Friend ReadOnly Property DebeColumn As DataColumn
            Get
                Return Me.columnDebe
            End Get
        End Property
        
        Friend ReadOnly Property HaberColumn As DataColumn
            Get
                Return Me.columnHaber
            End Get
        End Property
        
        Friend ReadOnly Property DescripcionAsientoColumn As DataColumn
            Get
                Return Me.columnDescripcionAsiento
            End Get
        End Property
        
        Friend ReadOnly Property TipocambioColumn As DataColumn
            Get
                Return Me.columnTipocambio
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DetallesAsientosContableRow
            Get
                Return CType(Me.Rows(index),DetallesAsientosContableRow)
            End Get
        End Property
        
        Public Event DetallesAsientosContableRowChanged As DetallesAsientosContableRowChangeEventHandler
        
        Public Event DetallesAsientosContableRowChanging As DetallesAsientosContableRowChangeEventHandler
        
        Public Event DetallesAsientosContableRowDeleted As DetallesAsientosContableRowChangeEventHandler
        
        Public Event DetallesAsientosContableRowDeleting As DetallesAsientosContableRowChangeEventHandler
        
        Public Overloads Sub AddDetallesAsientosContableRow(ByVal row As DetallesAsientosContableRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDetallesAsientosContableRow(ByVal parentAsientosContablesRowByAsientosContablesDetallesAsientosContable As AsientosContablesRow, ByVal Cuenta As String, ByVal NombreCuenta As String, ByVal Monto As Double, ByVal Debe As Boolean, ByVal Haber As Boolean, ByVal DescripcionAsiento As String, ByVal Tipocambio As Double) As DetallesAsientosContableRow
            Dim rowDetallesAsientosContableRow As DetallesAsientosContableRow = CType(Me.NewRow,DetallesAsientosContableRow)
            rowDetallesAsientosContableRow.ItemArray = New Object() {Nothing, parentAsientosContablesRowByAsientosContablesDetallesAsientosContable(0), Cuenta, NombreCuenta, Monto, Debe, Haber, DescripcionAsiento, Tipocambio}
            Me.Rows.Add(rowDetallesAsientosContableRow)
            Return rowDetallesAsientosContableRow
        End Function
        
        Public Function FindByID_Detalle(ByVal ID_Detalle As Long) As DetallesAsientosContableRow
            Return CType(Me.Rows.Find(New Object() {ID_Detalle}),DetallesAsientosContableRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DetallesAsientosContableDataTable = CType(MyBase.Clone,DetallesAsientosContableDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DetallesAsientosContableDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID_Detalle = Me.Columns("ID_Detalle")
            Me.columnNumAsiento = Me.Columns("NumAsiento")
            Me.columnCuenta = Me.Columns("Cuenta")
            Me.columnNombreCuenta = Me.Columns("NombreCuenta")
            Me.columnMonto = Me.Columns("Monto")
            Me.columnDebe = Me.Columns("Debe")
            Me.columnHaber = Me.Columns("Haber")
            Me.columnDescripcionAsiento = Me.Columns("DescripcionAsiento")
            Me.columnTipocambio = Me.Columns("Tipocambio")
        End Sub
        
        Private Sub InitClass()
            Me.columnID_Detalle = New DataColumn("ID_Detalle", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_Detalle)
            Me.columnNumAsiento = New DataColumn("NumAsiento", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNumAsiento)
            Me.columnCuenta = New DataColumn("Cuenta", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuenta)
            Me.columnNombreCuenta = New DataColumn("NombreCuenta", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombreCuenta)
            Me.columnMonto = New DataColumn("Monto", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto)
            Me.columnDebe = New DataColumn("Debe", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDebe)
            Me.columnHaber = New DataColumn("Haber", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHaber)
            Me.columnDescripcionAsiento = New DataColumn("DescripcionAsiento", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcionAsiento)
            Me.columnTipocambio = New DataColumn("Tipocambio", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipocambio)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnID_Detalle}, true))
            Me.columnID_Detalle.AutoIncrement = true
            Me.columnID_Detalle.AllowDBNull = false
            Me.columnID_Detalle.ReadOnly = true
            Me.columnID_Detalle.Unique = true
            Me.columnNumAsiento.AllowDBNull = false
            Me.columnCuenta.AllowDBNull = false
            Me.columnNombreCuenta.AllowDBNull = false
            Me.columnMonto.AllowDBNull = false
            Me.columnDebe.AllowDBNull = false
            Me.columnHaber.AllowDBNull = false
            Me.columnDescripcionAsiento.AllowDBNull = false
        End Sub
        
        Public Function NewDetallesAsientosContableRow() As DetallesAsientosContableRow
            Return CType(Me.NewRow,DetallesAsientosContableRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DetallesAsientosContableRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DetallesAsientosContableRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DetallesAsientosContableRowChangedEvent) Is Nothing) Then
                RaiseEvent DetallesAsientosContableRowChanged(Me, New DetallesAsientosContableRowChangeEvent(CType(e.Row,DetallesAsientosContableRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DetallesAsientosContableRowChangingEvent) Is Nothing) Then
                RaiseEvent DetallesAsientosContableRowChanging(Me, New DetallesAsientosContableRowChangeEvent(CType(e.Row,DetallesAsientosContableRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DetallesAsientosContableRowDeletedEvent) Is Nothing) Then
                RaiseEvent DetallesAsientosContableRowDeleted(Me, New DetallesAsientosContableRowChangeEvent(CType(e.Row,DetallesAsientosContableRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DetallesAsientosContableRowDeletingEvent) Is Nothing) Then
                RaiseEvent DetallesAsientosContableRowDeleting(Me, New DetallesAsientosContableRowChangeEvent(CType(e.Row,DetallesAsientosContableRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDetallesAsientosContableRow(ByVal row As DetallesAsientosContableRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DetallesAsientosContableRow
        Inherits DataRow
        
        Private tableDetallesAsientosContable As DetallesAsientosContableDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDetallesAsientosContable = CType(Me.Table,DetallesAsientosContableDataTable)
        End Sub
        
        Public Property ID_Detalle As Long
            Get
                Return CType(Me(Me.tableDetallesAsientosContable.ID_DetalleColumn),Long)
            End Get
            Set
                Me(Me.tableDetallesAsientosContable.ID_DetalleColumn) = value
            End Set
        End Property
        
        Public Property NumAsiento As String
            Get
                Return CType(Me(Me.tableDetallesAsientosContable.NumAsientoColumn),String)
            End Get
            Set
                Me(Me.tableDetallesAsientosContable.NumAsientoColumn) = value
            End Set
        End Property
        
        Public Property Cuenta As String
            Get
                Return CType(Me(Me.tableDetallesAsientosContable.CuentaColumn),String)
            End Get
            Set
                Me(Me.tableDetallesAsientosContable.CuentaColumn) = value
            End Set
        End Property
        
        Public Property NombreCuenta As String
            Get
                Return CType(Me(Me.tableDetallesAsientosContable.NombreCuentaColumn),String)
            End Get
            Set
                Me(Me.tableDetallesAsientosContable.NombreCuentaColumn) = value
            End Set
        End Property
        
        Public Property Monto As Double
            Get
                Return CType(Me(Me.tableDetallesAsientosContable.MontoColumn),Double)
            End Get
            Set
                Me(Me.tableDetallesAsientosContable.MontoColumn) = value
            End Set
        End Property
        
        Public Property Debe As Boolean
            Get
                Return CType(Me(Me.tableDetallesAsientosContable.DebeColumn),Boolean)
            End Get
            Set
                Me(Me.tableDetallesAsientosContable.DebeColumn) = value
            End Set
        End Property
        
        Public Property Haber As Boolean
            Get
                Return CType(Me(Me.tableDetallesAsientosContable.HaberColumn),Boolean)
            End Get
            Set
                Me(Me.tableDetallesAsientosContable.HaberColumn) = value
            End Set
        End Property
        
        Public Property DescripcionAsiento As String
            Get
                Return CType(Me(Me.tableDetallesAsientosContable.DescripcionAsientoColumn),String)
            End Get
            Set
                Me(Me.tableDetallesAsientosContable.DescripcionAsientoColumn) = value
            End Set
        End Property
        
        Public Property Tipocambio As Double
            Get
                Try 
                    Return CType(Me(Me.tableDetallesAsientosContable.TipocambioColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallesAsientosContable.TipocambioColumn) = value
            End Set
        End Property
        
        Public Property AsientosContablesRow As AsientosContablesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AsientosContablesDetallesAsientosContable")),AsientosContablesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AsientosContablesDetallesAsientosContable"))
            End Set
        End Property
        
        Public Function IsTipocambioNull() As Boolean
            Return Me.IsNull(Me.tableDetallesAsientosContable.TipocambioColumn)
        End Function
        
        Public Sub SetTipocambioNull()
            Me(Me.tableDetallesAsientosContable.TipocambioColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DetallesAsientosContableRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DetallesAsientosContableRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DetallesAsientosContableRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DetallesAsientosContableRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Cuentas_bancariasDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCuenta As DataColumn
        
        Private columnCodigo_banco As DataColumn
        
        Private columnNombreCuenta As DataColumn
        
        Private columnId_CuentaBancaria As DataColumn
        
        Private columnDescripcion As DataColumn
        
        Private columnMonedaNombre As DataColumn
        
        Private columnSimbolo As DataColumn
        
        Private columnSaldo As DataColumn
        
        Private columnCod_Moneda As DataColumn
        
        Private columnExpr1 As DataColumn
        
        Private columnCuentaContable As DataColumn
        
        Private columnNombreCuentaContable As DataColumn
        
        Friend Sub New()
            MyBase.New("Cuentas_bancarias")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CuentaColumn As DataColumn
            Get
                Return Me.columnCuenta
            End Get
        End Property
        
        Friend ReadOnly Property Codigo_bancoColumn As DataColumn
            Get
                Return Me.columnCodigo_banco
            End Get
        End Property
        
        Friend ReadOnly Property NombreCuentaColumn As DataColumn
            Get
                Return Me.columnNombreCuenta
            End Get
        End Property
        
        Friend ReadOnly Property Id_CuentaBancariaColumn As DataColumn
            Get
                Return Me.columnId_CuentaBancaria
            End Get
        End Property
        
        Friend ReadOnly Property DescripcionColumn As DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        Friend ReadOnly Property MonedaNombreColumn As DataColumn
            Get
                Return Me.columnMonedaNombre
            End Get
        End Property
        
        Friend ReadOnly Property SimboloColumn As DataColumn
            Get
                Return Me.columnSimbolo
            End Get
        End Property
        
        Friend ReadOnly Property SaldoColumn As DataColumn
            Get
                Return Me.columnSaldo
            End Get
        End Property
        
        Friend ReadOnly Property Cod_MonedaColumn As DataColumn
            Get
                Return Me.columnCod_Moneda
            End Get
        End Property
        
        Friend ReadOnly Property Expr1Column As DataColumn
            Get
                Return Me.columnExpr1
            End Get
        End Property
        
        Friend ReadOnly Property CuentaContableColumn As DataColumn
            Get
                Return Me.columnCuentaContable
            End Get
        End Property
        
        Friend ReadOnly Property NombreCuentaContableColumn As DataColumn
            Get
                Return Me.columnNombreCuentaContable
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Cuentas_bancariasRow
            Get
                Return CType(Me.Rows(index),Cuentas_bancariasRow)
            End Get
        End Property
        
        Public Event Cuentas_bancariasRowChanged As Cuentas_bancariasRowChangeEventHandler
        
        Public Event Cuentas_bancariasRowChanging As Cuentas_bancariasRowChangeEventHandler
        
        Public Event Cuentas_bancariasRowDeleted As Cuentas_bancariasRowChangeEventHandler
        
        Public Event Cuentas_bancariasRowDeleting As Cuentas_bancariasRowChangeEventHandler
        
        Public Overloads Sub AddCuentas_bancariasRow(ByVal row As Cuentas_bancariasRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCuentas_bancariasRow(ByVal Cuenta As String, ByVal Codigo_banco As Long, ByVal NombreCuenta As String, ByVal Descripcion As String, ByVal MonedaNombre As String, ByVal Simbolo As String, ByVal Saldo As Double, ByVal Cod_Moneda As Integer, ByVal CuentaContable As String, ByVal NombreCuentaContable As String) As Cuentas_bancariasRow
            Dim rowCuentas_bancariasRow As Cuentas_bancariasRow = CType(Me.NewRow,Cuentas_bancariasRow)
            rowCuentas_bancariasRow.ItemArray = New Object() {Cuenta, Codigo_banco, NombreCuenta, Nothing, Descripcion, MonedaNombre, Simbolo, Saldo, Cod_Moneda, Nothing, CuentaContable, NombreCuentaContable}
            Me.Rows.Add(rowCuentas_bancariasRow)
            Return rowCuentas_bancariasRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Cuentas_bancariasDataTable = CType(MyBase.Clone,Cuentas_bancariasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Cuentas_bancariasDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCuenta = Me.Columns("Cuenta")
            Me.columnCodigo_banco = Me.Columns("Codigo_banco")
            Me.columnNombreCuenta = Me.Columns("NombreCuenta")
            Me.columnId_CuentaBancaria = Me.Columns("Id_CuentaBancaria")
            Me.columnDescripcion = Me.Columns("Descripcion")
            Me.columnMonedaNombre = Me.Columns("MonedaNombre")
            Me.columnSimbolo = Me.Columns("Simbolo")
            Me.columnSaldo = Me.Columns("Saldo")
            Me.columnCod_Moneda = Me.Columns("Cod_Moneda")
            Me.columnExpr1 = Me.Columns("Expr1")
            Me.columnCuentaContable = Me.Columns("CuentaContable")
            Me.columnNombreCuentaContable = Me.Columns("NombreCuentaContable")
        End Sub
        
        Private Sub InitClass()
            Me.columnCuenta = New DataColumn("Cuenta", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuenta)
            Me.columnCodigo_banco = New DataColumn("Codigo_banco", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodigo_banco)
            Me.columnNombreCuenta = New DataColumn("NombreCuenta", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombreCuenta)
            Me.columnId_CuentaBancaria = New DataColumn("Id_CuentaBancaria", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_CuentaBancaria)
            Me.columnDescripcion = New DataColumn("Descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcion)
            Me.columnMonedaNombre = New DataColumn("MonedaNombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonedaNombre)
            Me.columnSimbolo = New DataColumn("Simbolo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSimbolo)
            Me.columnSaldo = New DataColumn("Saldo", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldo)
            Me.columnCod_Moneda = New DataColumn("Cod_Moneda", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCod_Moneda)
            Me.columnExpr1 = New DataColumn("Expr1", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExpr1)
            Me.columnCuentaContable = New DataColumn("CuentaContable", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuentaContable)
            Me.columnNombreCuentaContable = New DataColumn("NombreCuentaContable", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombreCuentaContable)
            Me.columnCuenta.AllowDBNull = false
            Me.columnCodigo_banco.AllowDBNull = false
            Me.columnNombreCuenta.AllowDBNull = false
            Me.columnId_CuentaBancaria.AutoIncrement = true
            Me.columnId_CuentaBancaria.AllowDBNull = false
            Me.columnId_CuentaBancaria.ReadOnly = true
            Me.columnDescripcion.AllowDBNull = false
            Me.columnMonedaNombre.AllowDBNull = false
            Me.columnSimbolo.AllowDBNull = false
            Me.columnSaldo.ReadOnly = true
            Me.columnCod_Moneda.AllowDBNull = false
            Me.columnExpr1.AutoIncrement = true
            Me.columnExpr1.AllowDBNull = false
            Me.columnExpr1.ReadOnly = true
            Me.columnCuentaContable.AllowDBNull = false
            Me.columnNombreCuentaContable.AllowDBNull = false
        End Sub
        
        Public Function NewCuentas_bancariasRow() As Cuentas_bancariasRow
            Return CType(Me.NewRow,Cuentas_bancariasRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Cuentas_bancariasRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Cuentas_bancariasRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Cuentas_bancariasRowChangedEvent) Is Nothing) Then
                RaiseEvent Cuentas_bancariasRowChanged(Me, New Cuentas_bancariasRowChangeEvent(CType(e.Row,Cuentas_bancariasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Cuentas_bancariasRowChangingEvent) Is Nothing) Then
                RaiseEvent Cuentas_bancariasRowChanging(Me, New Cuentas_bancariasRowChangeEvent(CType(e.Row,Cuentas_bancariasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Cuentas_bancariasRowDeletedEvent) Is Nothing) Then
                RaiseEvent Cuentas_bancariasRowDeleted(Me, New Cuentas_bancariasRowChangeEvent(CType(e.Row,Cuentas_bancariasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Cuentas_bancariasRowDeletingEvent) Is Nothing) Then
                RaiseEvent Cuentas_bancariasRowDeleting(Me, New Cuentas_bancariasRowChangeEvent(CType(e.Row,Cuentas_bancariasRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCuentas_bancariasRow(ByVal row As Cuentas_bancariasRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Cuentas_bancariasRow
        Inherits DataRow
        
        Private tableCuentas_bancarias As Cuentas_bancariasDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCuentas_bancarias = CType(Me.Table,Cuentas_bancariasDataTable)
        End Sub
        
        Public Property Cuenta As String
            Get
                Return CType(Me(Me.tableCuentas_bancarias.CuentaColumn),String)
            End Get
            Set
                Me(Me.tableCuentas_bancarias.CuentaColumn) = value
            End Set
        End Property
        
        Public Property Codigo_banco As Long
            Get
                Return CType(Me(Me.tableCuentas_bancarias.Codigo_bancoColumn),Long)
            End Get
            Set
                Me(Me.tableCuentas_bancarias.Codigo_bancoColumn) = value
            End Set
        End Property
        
        Public Property NombreCuenta As String
            Get
                Return CType(Me(Me.tableCuentas_bancarias.NombreCuentaColumn),String)
            End Get
            Set
                Me(Me.tableCuentas_bancarias.NombreCuentaColumn) = value
            End Set
        End Property
        
        Public Property Id_CuentaBancaria As Integer
            Get
                Return CType(Me(Me.tableCuentas_bancarias.Id_CuentaBancariaColumn),Integer)
            End Get
            Set
                Me(Me.tableCuentas_bancarias.Id_CuentaBancariaColumn) = value
            End Set
        End Property
        
        Public Property Descripcion As String
            Get
                Return CType(Me(Me.tableCuentas_bancarias.DescripcionColumn),String)
            End Get
            Set
                Me(Me.tableCuentas_bancarias.DescripcionColumn) = value
            End Set
        End Property
        
        Public Property MonedaNombre As String
            Get
                Return CType(Me(Me.tableCuentas_bancarias.MonedaNombreColumn),String)
            End Get
            Set
                Me(Me.tableCuentas_bancarias.MonedaNombreColumn) = value
            End Set
        End Property
        
        Public Property Simbolo As String
            Get
                Return CType(Me(Me.tableCuentas_bancarias.SimboloColumn),String)
            End Get
            Set
                Me(Me.tableCuentas_bancarias.SimboloColumn) = value
            End Set
        End Property
        
        Public Property Saldo As Double
            Get
                Try 
                    Return CType(Me(Me.tableCuentas_bancarias.SaldoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCuentas_bancarias.SaldoColumn) = value
            End Set
        End Property
        
        Public Property Cod_Moneda As Integer
            Get
                Return CType(Me(Me.tableCuentas_bancarias.Cod_MonedaColumn),Integer)
            End Get
            Set
                Me(Me.tableCuentas_bancarias.Cod_MonedaColumn) = value
            End Set
        End Property
        
        Public Property Expr1 As Long
            Get
                Return CType(Me(Me.tableCuentas_bancarias.Expr1Column),Long)
            End Get
            Set
                Me(Me.tableCuentas_bancarias.Expr1Column) = value
            End Set
        End Property
        
        Public Property CuentaContable As String
            Get
                Return CType(Me(Me.tableCuentas_bancarias.CuentaContableColumn),String)
            End Get
            Set
                Me(Me.tableCuentas_bancarias.CuentaContableColumn) = value
            End Set
        End Property
        
        Public Property NombreCuentaContable As String
            Get
                Return CType(Me(Me.tableCuentas_bancarias.NombreCuentaContableColumn),String)
            End Get
            Set
                Me(Me.tableCuentas_bancarias.NombreCuentaContableColumn) = value
            End Set
        End Property
        
        Public Function IsSaldoNull() As Boolean
            Return Me.IsNull(Me.tableCuentas_bancarias.SaldoColumn)
        End Function
        
        Public Sub SetSaldoNull()
            Me(Me.tableCuentas_bancarias.SaldoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Cuentas_bancariasRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Cuentas_bancariasRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Cuentas_bancariasRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Cuentas_bancariasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
