'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DatasetGasto
    Inherits DataSet
    
    Private tableGastoDetalle As GastoDetalleDataTable
    
    Private tableCentroCosto As CentroCostoDataTable
    
    Private tableCentroCosto_Movimientos As CentroCosto_MovimientosDataTable
    
    Private tableCentroCostoDetalle As CentroCostoDetalleDataTable
    
    Private tableAsientosContables As AsientosContablesDataTable
    
    Private tableDetallesAsientosContable As DetallesAsientosContableDataTable
    
    Private relationAsientosContablesDetallesAsientosContable As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("GastoDetalle")) Is Nothing) Then
                Me.Tables.Add(New GastoDetalleDataTable(ds.Tables("GastoDetalle")))
            End If
            If (Not (ds.Tables("CentroCosto")) Is Nothing) Then
                Me.Tables.Add(New CentroCostoDataTable(ds.Tables("CentroCosto")))
            End If
            If (Not (ds.Tables("CentroCosto_Movimientos")) Is Nothing) Then
                Me.Tables.Add(New CentroCosto_MovimientosDataTable(ds.Tables("CentroCosto_Movimientos")))
            End If
            If (Not (ds.Tables("CentroCostoDetalle")) Is Nothing) Then
                Me.Tables.Add(New CentroCostoDetalleDataTable(ds.Tables("CentroCostoDetalle")))
            End If
            If (Not (ds.Tables("AsientosContables")) Is Nothing) Then
                Me.Tables.Add(New AsientosContablesDataTable(ds.Tables("AsientosContables")))
            End If
            If (Not (ds.Tables("DetallesAsientosContable")) Is Nothing) Then
                Me.Tables.Add(New DetallesAsientosContableDataTable(ds.Tables("DetallesAsientosContable")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GastoDetalle As GastoDetalleDataTable
        Get
            Return Me.tableGastoDetalle
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CentroCosto As CentroCostoDataTable
        Get
            Return Me.tableCentroCosto
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CentroCosto_Movimientos As CentroCosto_MovimientosDataTable
        Get
            Return Me.tableCentroCosto_Movimientos
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CentroCostoDetalle As CentroCostoDetalleDataTable
        Get
            Return Me.tableCentroCostoDetalle
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AsientosContables As AsientosContablesDataTable
        Get
            Return Me.tableAsientosContables
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DetallesAsientosContable As DetallesAsientosContableDataTable
        Get
            Return Me.tableDetallesAsientosContable
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DatasetGasto = CType(MyBase.Clone,DatasetGasto)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("GastoDetalle")) Is Nothing) Then
            Me.Tables.Add(New GastoDetalleDataTable(ds.Tables("GastoDetalle")))
        End If
        If (Not (ds.Tables("CentroCosto")) Is Nothing) Then
            Me.Tables.Add(New CentroCostoDataTable(ds.Tables("CentroCosto")))
        End If
        If (Not (ds.Tables("CentroCosto_Movimientos")) Is Nothing) Then
            Me.Tables.Add(New CentroCosto_MovimientosDataTable(ds.Tables("CentroCosto_Movimientos")))
        End If
        If (Not (ds.Tables("CentroCostoDetalle")) Is Nothing) Then
            Me.Tables.Add(New CentroCostoDetalleDataTable(ds.Tables("CentroCostoDetalle")))
        End If
        If (Not (ds.Tables("AsientosContables")) Is Nothing) Then
            Me.Tables.Add(New AsientosContablesDataTable(ds.Tables("AsientosContables")))
        End If
        If (Not (ds.Tables("DetallesAsientosContable")) Is Nothing) Then
            Me.Tables.Add(New DetallesAsientosContableDataTable(ds.Tables("DetallesAsientosContable")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableGastoDetalle = CType(Me.Tables("GastoDetalle"),GastoDetalleDataTable)
        If (Not (Me.tableGastoDetalle) Is Nothing) Then
            Me.tableGastoDetalle.InitVars
        End If
        Me.tableCentroCosto = CType(Me.Tables("CentroCosto"),CentroCostoDataTable)
        If (Not (Me.tableCentroCosto) Is Nothing) Then
            Me.tableCentroCosto.InitVars
        End If
        Me.tableCentroCosto_Movimientos = CType(Me.Tables("CentroCosto_Movimientos"),CentroCosto_MovimientosDataTable)
        If (Not (Me.tableCentroCosto_Movimientos) Is Nothing) Then
            Me.tableCentroCosto_Movimientos.InitVars
        End If
        Me.tableCentroCostoDetalle = CType(Me.Tables("CentroCostoDetalle"),CentroCostoDetalleDataTable)
        If (Not (Me.tableCentroCostoDetalle) Is Nothing) Then
            Me.tableCentroCostoDetalle.InitVars
        End If
        Me.tableAsientosContables = CType(Me.Tables("AsientosContables"),AsientosContablesDataTable)
        If (Not (Me.tableAsientosContables) Is Nothing) Then
            Me.tableAsientosContables.InitVars
        End If
        Me.tableDetallesAsientosContable = CType(Me.Tables("DetallesAsientosContable"),DetallesAsientosContableDataTable)
        If (Not (Me.tableDetallesAsientosContable) Is Nothing) Then
            Me.tableDetallesAsientosContable.InitVars
        End If
        Me.relationAsientosContablesDetallesAsientosContable = Me.Relations("AsientosContablesDetallesAsientosContable")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DatasetGasto"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DatasetGasto.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableGastoDetalle = New GastoDetalleDataTable
        Me.Tables.Add(Me.tableGastoDetalle)
        Me.tableCentroCosto = New CentroCostoDataTable
        Me.Tables.Add(Me.tableCentroCosto)
        Me.tableCentroCosto_Movimientos = New CentroCosto_MovimientosDataTable
        Me.Tables.Add(Me.tableCentroCosto_Movimientos)
        Me.tableCentroCostoDetalle = New CentroCostoDetalleDataTable
        Me.Tables.Add(Me.tableCentroCostoDetalle)
        Me.tableAsientosContables = New AsientosContablesDataTable
        Me.Tables.Add(Me.tableAsientosContables)
        Me.tableDetallesAsientosContable = New DetallesAsientosContableDataTable
        Me.Tables.Add(Me.tableDetallesAsientosContable)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("AsientosContablesDetallesAsientosContable", New DataColumn() {Me.tableAsientosContables.NumAsientoColumn}, New DataColumn() {Me.tableDetallesAsientosContable.NumAsientoColumn})
        Me.tableDetallesAsientosContable.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationAsientosContablesDetallesAsientosContable = New DataRelation("AsientosContablesDetallesAsientosContable", New DataColumn() {Me.tableAsientosContables.NumAsientoColumn}, New DataColumn() {Me.tableDetallesAsientosContable.NumAsientoColumn}, false)
        Me.Relations.Add(Me.relationAsientosContablesDetallesAsientosContable)
    End Sub
    
    Private Function ShouldSerializeGastoDetalle() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCentroCosto() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCentroCosto_Movimientos() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCentroCostoDetalle() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAsientosContables() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeDetallesAsientosContable() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub GastoDetalleRowChangeEventHandler(ByVal sender As Object, ByVal e As GastoDetalleRowChangeEvent)
    
    Public Delegate Sub CentroCostoRowChangeEventHandler(ByVal sender As Object, ByVal e As CentroCostoRowChangeEvent)
    
    Public Delegate Sub CentroCosto_MovimientosRowChangeEventHandler(ByVal sender As Object, ByVal e As CentroCosto_MovimientosRowChangeEvent)
    
    Public Delegate Sub CentroCostoDetalleRowChangeEventHandler(ByVal sender As Object, ByVal e As CentroCostoDetalleRowChangeEvent)
    
    Public Delegate Sub AsientosContablesRowChangeEventHandler(ByVal sender As Object, ByVal e As AsientosContablesRowChangeEvent)
    
    Public Delegate Sub DetallesAsientosContableRowChangeEventHandler(ByVal sender As Object, ByVal e As DetallesAsientosContableRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GastoDetalleDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCantidad As DataColumn
        
        Private columnIdCompra As DataColumn
        
        Private columnGravado As DataColumn
        
        Private columnExento As DataColumn
        
        Private columnDescuento As DataColumn
        
        Private columnImpuesto As DataColumn
        
        Private columnTotal As DataColumn
        
        Private columnCuentaContable As DataColumn
        
        Private columnImpuesto_p As DataColumn
        
        Private columnNuevoCostoBase As DataColumn
        
        Private columnCosto As DataColumn
        
        Private columnDescripcion As DataColumn
        
        Private columnCuentaContableDescripcion As DataColumn
        
        Private columnDescuento_P As DataColumn
        
        Private columnCodTipoCompra As DataColumn
        
        Private columnDescTipoCompra As DataColumn
        
        Private columnIdDetalle As DataColumn
        
        Friend Sub New()
            MyBase.New("GastoDetalle")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CantidadColumn As DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        Friend ReadOnly Property IdCompraColumn As DataColumn
            Get
                Return Me.columnIdCompra
            End Get
        End Property
        
        Friend ReadOnly Property GravadoColumn As DataColumn
            Get
                Return Me.columnGravado
            End Get
        End Property
        
        Friend ReadOnly Property ExentoColumn As DataColumn
            Get
                Return Me.columnExento
            End Get
        End Property
        
        Friend ReadOnly Property DescuentoColumn As DataColumn
            Get
                Return Me.columnDescuento
            End Get
        End Property
        
        Friend ReadOnly Property ImpuestoColumn As DataColumn
            Get
                Return Me.columnImpuesto
            End Get
        End Property
        
        Friend ReadOnly Property TotalColumn As DataColumn
            Get
                Return Me.columnTotal
            End Get
        End Property
        
        Friend ReadOnly Property CuentaContableColumn As DataColumn
            Get
                Return Me.columnCuentaContable
            End Get
        End Property
        
        Friend ReadOnly Property Impuesto_pColumn As DataColumn
            Get
                Return Me.columnImpuesto_p
            End Get
        End Property
        
        Friend ReadOnly Property NuevoCostoBaseColumn As DataColumn
            Get
                Return Me.columnNuevoCostoBase
            End Get
        End Property
        
        Friend ReadOnly Property CostoColumn As DataColumn
            Get
                Return Me.columnCosto
            End Get
        End Property
        
        Friend ReadOnly Property DescripcionColumn As DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        Friend ReadOnly Property CuentaContableDescripcionColumn As DataColumn
            Get
                Return Me.columnCuentaContableDescripcion
            End Get
        End Property
        
        Friend ReadOnly Property Descuento_PColumn As DataColumn
            Get
                Return Me.columnDescuento_P
            End Get
        End Property
        
        Friend ReadOnly Property CodTipoCompraColumn As DataColumn
            Get
                Return Me.columnCodTipoCompra
            End Get
        End Property
        
        Friend ReadOnly Property DescTipoCompraColumn As DataColumn
            Get
                Return Me.columnDescTipoCompra
            End Get
        End Property
        
        Friend ReadOnly Property IdDetalleColumn As DataColumn
            Get
                Return Me.columnIdDetalle
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GastoDetalleRow
            Get
                Return CType(Me.Rows(index),GastoDetalleRow)
            End Get
        End Property
        
        Public Event GastoDetalleRowChanged As GastoDetalleRowChangeEventHandler
        
        Public Event GastoDetalleRowChanging As GastoDetalleRowChangeEventHandler
        
        Public Event GastoDetalleRowDeleted As GastoDetalleRowChangeEventHandler
        
        Public Event GastoDetalleRowDeleting As GastoDetalleRowChangeEventHandler
        
        Public Overloads Sub AddGastoDetalleRow(ByVal row As GastoDetalleRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGastoDetalleRow( _
                    ByVal Cantidad As Double,  _
                    ByVal IdCompra As Double,  _
                    ByVal Gravado As Double,  _
                    ByVal Exento As Double,  _
                    ByVal Descuento As Double,  _
                    ByVal Impuesto As Double,  _
                    ByVal Total As Double,  _
                    ByVal CuentaContable As String,  _
                    ByVal Impuesto_p As Double,  _
                    ByVal NuevoCostoBase As Double,  _
                    ByVal Costo As Double,  _
                    ByVal Descripcion As String,  _
                    ByVal CuentaContableDescripcion As String,  _
                    ByVal Descuento_P As Double,  _
                    ByVal CodTipoCompra As Integer,  _
                    ByVal DescTipoCompra As String,  _
                    ByVal IdDetalle As Integer) As GastoDetalleRow
            Dim rowGastoDetalleRow As GastoDetalleRow = CType(Me.NewRow,GastoDetalleRow)
            rowGastoDetalleRow.ItemArray = New Object() {Cantidad, IdCompra, Gravado, Exento, Descuento, Impuesto, Total, CuentaContable, Impuesto_p, NuevoCostoBase, Costo, Descripcion, CuentaContableDescripcion, Descuento_P, CodTipoCompra, DescTipoCompra, IdDetalle}
            Me.Rows.Add(rowGastoDetalleRow)
            Return rowGastoDetalleRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GastoDetalleDataTable = CType(MyBase.Clone,GastoDetalleDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GastoDetalleDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCantidad = Me.Columns("Cantidad")
            Me.columnIdCompra = Me.Columns("IdCompra")
            Me.columnGravado = Me.Columns("Gravado")
            Me.columnExento = Me.Columns("Exento")
            Me.columnDescuento = Me.Columns("Descuento")
            Me.columnImpuesto = Me.Columns("Impuesto")
            Me.columnTotal = Me.Columns("Total")
            Me.columnCuentaContable = Me.Columns("CuentaContable")
            Me.columnImpuesto_p = Me.Columns("Impuesto_p")
            Me.columnNuevoCostoBase = Me.Columns("NuevoCostoBase")
            Me.columnCosto = Me.Columns("Costo")
            Me.columnDescripcion = Me.Columns("Descripcion")
            Me.columnCuentaContableDescripcion = Me.Columns("CuentaContableDescripcion")
            Me.columnDescuento_P = Me.Columns("Descuento_P")
            Me.columnCodTipoCompra = Me.Columns("CodTipoCompra")
            Me.columnDescTipoCompra = Me.Columns("DescTipoCompra")
            Me.columnIdDetalle = Me.Columns("IdDetalle")
        End Sub
        
        Private Sub InitClass()
            Me.columnCantidad = New DataColumn("Cantidad", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCantidad)
            Me.columnIdCompra = New DataColumn("IdCompra", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdCompra)
            Me.columnGravado = New DataColumn("Gravado", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGravado)
            Me.columnExento = New DataColumn("Exento", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExento)
            Me.columnDescuento = New DataColumn("Descuento", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescuento)
            Me.columnImpuesto = New DataColumn("Impuesto", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnImpuesto)
            Me.columnTotal = New DataColumn("Total", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotal)
            Me.columnCuentaContable = New DataColumn("CuentaContable", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuentaContable)
            Me.columnImpuesto_p = New DataColumn("Impuesto_p", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnImpuesto_p)
            Me.columnNuevoCostoBase = New DataColumn("NuevoCostoBase", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNuevoCostoBase)
            Me.columnCosto = New DataColumn("Costo", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCosto)
            Me.columnDescripcion = New DataColumn("Descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcion)
            Me.columnCuentaContableDescripcion = New DataColumn("CuentaContableDescripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuentaContableDescripcion)
            Me.columnDescuento_P = New DataColumn("Descuento_P", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescuento_P)
            Me.columnCodTipoCompra = New DataColumn("CodTipoCompra", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodTipoCompra)
            Me.columnDescTipoCompra = New DataColumn("DescTipoCompra", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescTipoCompra)
            Me.columnIdDetalle = New DataColumn("IdDetalle", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdDetalle)
            Me.columnCuentaContable.AllowDBNull = false
        End Sub
        
        Public Function NewGastoDetalleRow() As GastoDetalleRow
            Return CType(Me.NewRow,GastoDetalleRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GastoDetalleRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GastoDetalleRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GastoDetalleRowChangedEvent) Is Nothing) Then
                RaiseEvent GastoDetalleRowChanged(Me, New GastoDetalleRowChangeEvent(CType(e.Row,GastoDetalleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GastoDetalleRowChangingEvent) Is Nothing) Then
                RaiseEvent GastoDetalleRowChanging(Me, New GastoDetalleRowChangeEvent(CType(e.Row,GastoDetalleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GastoDetalleRowDeletedEvent) Is Nothing) Then
                RaiseEvent GastoDetalleRowDeleted(Me, New GastoDetalleRowChangeEvent(CType(e.Row,GastoDetalleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GastoDetalleRowDeletingEvent) Is Nothing) Then
                RaiseEvent GastoDetalleRowDeleting(Me, New GastoDetalleRowChangeEvent(CType(e.Row,GastoDetalleRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGastoDetalleRow(ByVal row As GastoDetalleRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GastoDetalleRow
        Inherits DataRow
        
        Private tableGastoDetalle As GastoDetalleDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGastoDetalle = CType(Me.Table,GastoDetalleDataTable)
        End Sub
        
        Public Property Cantidad As Double
            Get
                Try 
                    Return CType(Me(Me.tableGastoDetalle.CantidadColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGastoDetalle.CantidadColumn) = value
            End Set
        End Property
        
        Public Property IdCompra As Double
            Get
                Try 
                    Return CType(Me(Me.tableGastoDetalle.IdCompraColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGastoDetalle.IdCompraColumn) = value
            End Set
        End Property
        
        Public Property Gravado As Double
            Get
                Try 
                    Return CType(Me(Me.tableGastoDetalle.GravadoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGastoDetalle.GravadoColumn) = value
            End Set
        End Property
        
        Public Property Exento As Double
            Get
                Try 
                    Return CType(Me(Me.tableGastoDetalle.ExentoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGastoDetalle.ExentoColumn) = value
            End Set
        End Property
        
        Public Property Descuento As Double
            Get
                Try 
                    Return CType(Me(Me.tableGastoDetalle.DescuentoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGastoDetalle.DescuentoColumn) = value
            End Set
        End Property
        
        Public Property Impuesto As Double
            Get
                Try 
                    Return CType(Me(Me.tableGastoDetalle.ImpuestoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGastoDetalle.ImpuestoColumn) = value
            End Set
        End Property
        
        Public Property Total As Double
            Get
                Try 
                    Return CType(Me(Me.tableGastoDetalle.TotalColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGastoDetalle.TotalColumn) = value
            End Set
        End Property
        
        Public Property CuentaContable As String
            Get
                Return CType(Me(Me.tableGastoDetalle.CuentaContableColumn),String)
            End Get
            Set
                Me(Me.tableGastoDetalle.CuentaContableColumn) = value
            End Set
        End Property
        
        Public Property Impuesto_p As Double
            Get
                Try 
                    Return CType(Me(Me.tableGastoDetalle.Impuesto_pColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGastoDetalle.Impuesto_pColumn) = value
            End Set
        End Property
        
        Public Property NuevoCostoBase As Double
            Get
                Try 
                    Return CType(Me(Me.tableGastoDetalle.NuevoCostoBaseColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGastoDetalle.NuevoCostoBaseColumn) = value
            End Set
        End Property
        
        Public Property Costo As Double
            Get
                Try 
                    Return CType(Me(Me.tableGastoDetalle.CostoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGastoDetalle.CostoColumn) = value
            End Set
        End Property
        
        Public Property Descripcion As String
            Get
                Try 
                    Return CType(Me(Me.tableGastoDetalle.DescripcionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGastoDetalle.DescripcionColumn) = value
            End Set
        End Property
        
        Public Property CuentaContableDescripcion As String
            Get
                Try 
                    Return CType(Me(Me.tableGastoDetalle.CuentaContableDescripcionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGastoDetalle.CuentaContableDescripcionColumn) = value
            End Set
        End Property
        
        Public Property Descuento_P As Double
            Get
                Try 
                    Return CType(Me(Me.tableGastoDetalle.Descuento_PColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGastoDetalle.Descuento_PColumn) = value
            End Set
        End Property
        
        Public Property CodTipoCompra As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGastoDetalle.CodTipoCompraColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGastoDetalle.CodTipoCompraColumn) = value
            End Set
        End Property
        
        Public Property DescTipoCompra As String
            Get
                Try 
                    Return CType(Me(Me.tableGastoDetalle.DescTipoCompraColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGastoDetalle.DescTipoCompraColumn) = value
            End Set
        End Property
        
        Public Property IdDetalle As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGastoDetalle.IdDetalleColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGastoDetalle.IdDetalleColumn) = value
            End Set
        End Property
        
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tableGastoDetalle.CantidadColumn)
        End Function
        
        Public Sub SetCantidadNull()
            Me(Me.tableGastoDetalle.CantidadColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdCompraNull() As Boolean
            Return Me.IsNull(Me.tableGastoDetalle.IdCompraColumn)
        End Function
        
        Public Sub SetIdCompraNull()
            Me(Me.tableGastoDetalle.IdCompraColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGravadoNull() As Boolean
            Return Me.IsNull(Me.tableGastoDetalle.GravadoColumn)
        End Function
        
        Public Sub SetGravadoNull()
            Me(Me.tableGastoDetalle.GravadoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExentoNull() As Boolean
            Return Me.IsNull(Me.tableGastoDetalle.ExentoColumn)
        End Function
        
        Public Sub SetExentoNull()
            Me(Me.tableGastoDetalle.ExentoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescuentoNull() As Boolean
            Return Me.IsNull(Me.tableGastoDetalle.DescuentoColumn)
        End Function
        
        Public Sub SetDescuentoNull()
            Me(Me.tableGastoDetalle.DescuentoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsImpuestoNull() As Boolean
            Return Me.IsNull(Me.tableGastoDetalle.ImpuestoColumn)
        End Function
        
        Public Sub SetImpuestoNull()
            Me(Me.tableGastoDetalle.ImpuestoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotalNull() As Boolean
            Return Me.IsNull(Me.tableGastoDetalle.TotalColumn)
        End Function
        
        Public Sub SetTotalNull()
            Me(Me.tableGastoDetalle.TotalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsImpuesto_pNull() As Boolean
            Return Me.IsNull(Me.tableGastoDetalle.Impuesto_pColumn)
        End Function
        
        Public Sub SetImpuesto_pNull()
            Me(Me.tableGastoDetalle.Impuesto_pColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNuevoCostoBaseNull() As Boolean
            Return Me.IsNull(Me.tableGastoDetalle.NuevoCostoBaseColumn)
        End Function
        
        Public Sub SetNuevoCostoBaseNull()
            Me(Me.tableGastoDetalle.NuevoCostoBaseColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCostoNull() As Boolean
            Return Me.IsNull(Me.tableGastoDetalle.CostoColumn)
        End Function
        
        Public Sub SetCostoNull()
            Me(Me.tableGastoDetalle.CostoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableGastoDetalle.DescripcionColumn)
        End Function
        
        Public Sub SetDescripcionNull()
            Me(Me.tableGastoDetalle.DescripcionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCuentaContableDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableGastoDetalle.CuentaContableDescripcionColumn)
        End Function
        
        Public Sub SetCuentaContableDescripcionNull()
            Me(Me.tableGastoDetalle.CuentaContableDescripcionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescuento_PNull() As Boolean
            Return Me.IsNull(Me.tableGastoDetalle.Descuento_PColumn)
        End Function
        
        Public Sub SetDescuento_PNull()
            Me(Me.tableGastoDetalle.Descuento_PColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCodTipoCompraNull() As Boolean
            Return Me.IsNull(Me.tableGastoDetalle.CodTipoCompraColumn)
        End Function
        
        Public Sub SetCodTipoCompraNull()
            Me(Me.tableGastoDetalle.CodTipoCompraColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescTipoCompraNull() As Boolean
            Return Me.IsNull(Me.tableGastoDetalle.DescTipoCompraColumn)
        End Function
        
        Public Sub SetDescTipoCompraNull()
            Me(Me.tableGastoDetalle.DescTipoCompraColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdDetalleNull() As Boolean
            Return Me.IsNull(Me.tableGastoDetalle.IdDetalleColumn)
        End Function
        
        Public Sub SetIdDetalleNull()
            Me(Me.tableGastoDetalle.IdDetalleColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GastoDetalleRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GastoDetalleRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GastoDetalleRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GastoDetalleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CentroCostoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnCodigo As DataColumn
        
        Private columnNombre As DataColumn
        
        Friend Sub New()
            MyBase.New("CentroCosto")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property CodigoColumn As DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        Friend ReadOnly Property NombreColumn As DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CentroCostoRow
            Get
                Return CType(Me.Rows(index),CentroCostoRow)
            End Get
        End Property
        
        Public Event CentroCostoRowChanged As CentroCostoRowChangeEventHandler
        
        Public Event CentroCostoRowChanging As CentroCostoRowChangeEventHandler
        
        Public Event CentroCostoRowDeleted As CentroCostoRowChangeEventHandler
        
        Public Event CentroCostoRowDeleting As CentroCostoRowChangeEventHandler
        
        Public Overloads Sub AddCentroCostoRow(ByVal row As CentroCostoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCentroCostoRow(ByVal Codigo As String, ByVal Nombre As String) As CentroCostoRow
            Dim rowCentroCostoRow As CentroCostoRow = CType(Me.NewRow,CentroCostoRow)
            rowCentroCostoRow.ItemArray = New Object() {Nothing, Codigo, Nombre}
            Me.Rows.Add(rowCentroCostoRow)
            Return rowCentroCostoRow
        End Function
        
        Public Function FindById(ByVal Id As Integer) As CentroCostoRow
            Return CType(Me.Rows.Find(New Object() {Id}),CentroCostoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CentroCostoDataTable = CType(MyBase.Clone,CentroCostoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CentroCostoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnCodigo = Me.Columns("Codigo")
            Me.columnNombre = Me.Columns("Nombre")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnCodigo = New DataColumn("Codigo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodigo)
            Me.columnNombre = New DataColumn("Nombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombre)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
            Me.columnId.Unique = true
            Me.columnCodigo.AllowDBNull = false
            Me.columnNombre.AllowDBNull = false
        End Sub
        
        Public Function NewCentroCostoRow() As CentroCostoRow
            Return CType(Me.NewRow,CentroCostoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CentroCostoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CentroCostoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CentroCostoRowChangedEvent) Is Nothing) Then
                RaiseEvent CentroCostoRowChanged(Me, New CentroCostoRowChangeEvent(CType(e.Row,CentroCostoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CentroCostoRowChangingEvent) Is Nothing) Then
                RaiseEvent CentroCostoRowChanging(Me, New CentroCostoRowChangeEvent(CType(e.Row,CentroCostoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CentroCostoRowDeletedEvent) Is Nothing) Then
                RaiseEvent CentroCostoRowDeleted(Me, New CentroCostoRowChangeEvent(CType(e.Row,CentroCostoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CentroCostoRowDeletingEvent) Is Nothing) Then
                RaiseEvent CentroCostoRowDeleting(Me, New CentroCostoRowChangeEvent(CType(e.Row,CentroCostoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCentroCostoRow(ByVal row As CentroCostoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CentroCostoRow
        Inherits DataRow
        
        Private tableCentroCosto As CentroCostoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCentroCosto = CType(Me.Table,CentroCostoDataTable)
        End Sub
        
        Public Property Id As Integer
            Get
                Return CType(Me(Me.tableCentroCosto.IdColumn),Integer)
            End Get
            Set
                Me(Me.tableCentroCosto.IdColumn) = value
            End Set
        End Property
        
        Public Property Codigo As String
            Get
                Return CType(Me(Me.tableCentroCosto.CodigoColumn),String)
            End Get
            Set
                Me(Me.tableCentroCosto.CodigoColumn) = value
            End Set
        End Property
        
        Public Property Nombre As String
            Get
                Return CType(Me(Me.tableCentroCosto.NombreColumn),String)
            End Get
            Set
                Me(Me.tableCentroCosto.NombreColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CentroCostoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CentroCostoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CentroCostoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CentroCostoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CentroCosto_MovimientosDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnIdAsiento As DataColumn
        
        Private columnDocumento As DataColumn
        
        Private columnFecha As DataColumn
        
        Private columnIdCentroCosto As DataColumn
        
        Private columnMonto As DataColumn
        
        Private columnDebe As DataColumn
        
        Private columnHaber As DataColumn
        
        Private columnDescripcion As DataColumn
        
        Private columnCuentaContable As DataColumn
        
        Private columnNombreCuentaContable As DataColumn
        
        Private columnTipo As DataColumn
        
        Private columnIdDetalle As DataColumn
        
        Friend Sub New()
            MyBase.New("CentroCosto_Movimientos")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property IdAsientoColumn As DataColumn
            Get
                Return Me.columnIdAsiento
            End Get
        End Property
        
        Friend ReadOnly Property DocumentoColumn As DataColumn
            Get
                Return Me.columnDocumento
            End Get
        End Property
        
        Friend ReadOnly Property FechaColumn As DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        Friend ReadOnly Property IdCentroCostoColumn As DataColumn
            Get
                Return Me.columnIdCentroCosto
            End Get
        End Property
        
        Friend ReadOnly Property MontoColumn As DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        Friend ReadOnly Property DebeColumn As DataColumn
            Get
                Return Me.columnDebe
            End Get
        End Property
        
        Friend ReadOnly Property HaberColumn As DataColumn
            Get
                Return Me.columnHaber
            End Get
        End Property
        
        Friend ReadOnly Property DescripcionColumn As DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        Friend ReadOnly Property CuentaContableColumn As DataColumn
            Get
                Return Me.columnCuentaContable
            End Get
        End Property
        
        Friend ReadOnly Property NombreCuentaContableColumn As DataColumn
            Get
                Return Me.columnNombreCuentaContable
            End Get
        End Property
        
        Friend ReadOnly Property TipoColumn As DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        Friend ReadOnly Property IdDetalleColumn As DataColumn
            Get
                Return Me.columnIdDetalle
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CentroCosto_MovimientosRow
            Get
                Return CType(Me.Rows(index),CentroCosto_MovimientosRow)
            End Get
        End Property
        
        Public Event CentroCosto_MovimientosRowChanged As CentroCosto_MovimientosRowChangeEventHandler
        
        Public Event CentroCosto_MovimientosRowChanging As CentroCosto_MovimientosRowChangeEventHandler
        
        Public Event CentroCosto_MovimientosRowDeleted As CentroCosto_MovimientosRowChangeEventHandler
        
        Public Event CentroCosto_MovimientosRowDeleting As CentroCosto_MovimientosRowChangeEventHandler
        
        Public Overloads Sub AddCentroCosto_MovimientosRow(ByVal row As CentroCosto_MovimientosRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCentroCosto_MovimientosRow(ByVal IdAsiento As String, ByVal Documento As String, ByVal Fecha As Date, ByVal IdCentroCosto As Integer, ByVal Monto As Double, ByVal Debe As Boolean, ByVal Haber As Boolean, ByVal Descripcion As String, ByVal CuentaContable As String, ByVal NombreCuentaContable As String, ByVal Tipo As Integer, ByVal IdDetalle As Long) As CentroCosto_MovimientosRow
            Dim rowCentroCosto_MovimientosRow As CentroCosto_MovimientosRow = CType(Me.NewRow,CentroCosto_MovimientosRow)
            rowCentroCosto_MovimientosRow.ItemArray = New Object() {Nothing, IdAsiento, Documento, Fecha, IdCentroCosto, Monto, Debe, Haber, Descripcion, CuentaContable, NombreCuentaContable, Tipo, IdDetalle}
            Me.Rows.Add(rowCentroCosto_MovimientosRow)
            Return rowCentroCosto_MovimientosRow
        End Function
        
        Public Function FindById(ByVal Id As Long) As CentroCosto_MovimientosRow
            Return CType(Me.Rows.Find(New Object() {Id}),CentroCosto_MovimientosRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CentroCosto_MovimientosDataTable = CType(MyBase.Clone,CentroCosto_MovimientosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CentroCosto_MovimientosDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnIdAsiento = Me.Columns("IdAsiento")
            Me.columnDocumento = Me.Columns("Documento")
            Me.columnFecha = Me.Columns("Fecha")
            Me.columnIdCentroCosto = Me.Columns("IdCentroCosto")
            Me.columnMonto = Me.Columns("Monto")
            Me.columnDebe = Me.Columns("Debe")
            Me.columnHaber = Me.Columns("Haber")
            Me.columnDescripcion = Me.Columns("Descripcion")
            Me.columnCuentaContable = Me.Columns("CuentaContable")
            Me.columnNombreCuentaContable = Me.Columns("NombreCuentaContable")
            Me.columnTipo = Me.Columns("Tipo")
            Me.columnIdDetalle = Me.Columns("IdDetalle")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnIdAsiento = New DataColumn("IdAsiento", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdAsiento)
            Me.columnDocumento = New DataColumn("Documento", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDocumento)
            Me.columnFecha = New DataColumn("Fecha", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha)
            Me.columnIdCentroCosto = New DataColumn("IdCentroCosto", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdCentroCosto)
            Me.columnMonto = New DataColumn("Monto", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto)
            Me.columnDebe = New DataColumn("Debe", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDebe)
            Me.columnHaber = New DataColumn("Haber", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHaber)
            Me.columnDescripcion = New DataColumn("Descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcion)
            Me.columnCuentaContable = New DataColumn("CuentaContable", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuentaContable)
            Me.columnNombreCuentaContable = New DataColumn("NombreCuentaContable", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombreCuentaContable)
            Me.columnTipo = New DataColumn("Tipo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipo)
            Me.columnIdDetalle = New DataColumn("IdDetalle", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdDetalle)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
            Me.columnId.Unique = true
            Me.columnIdAsiento.AllowDBNull = false
            Me.columnDocumento.AllowDBNull = false
            Me.columnFecha.AllowDBNull = false
            Me.columnIdCentroCosto.AllowDBNull = false
            Me.columnMonto.AllowDBNull = false
            Me.columnDebe.AllowDBNull = false
            Me.columnHaber.AllowDBNull = false
            Me.columnCuentaContable.AllowDBNull = false
            Me.columnNombreCuentaContable.AllowDBNull = false
            Me.columnTipo.AllowDBNull = false
            Me.columnIdDetalle.AllowDBNull = false
        End Sub
        
        Public Function NewCentroCosto_MovimientosRow() As CentroCosto_MovimientosRow
            Return CType(Me.NewRow,CentroCosto_MovimientosRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CentroCosto_MovimientosRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CentroCosto_MovimientosRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CentroCosto_MovimientosRowChangedEvent) Is Nothing) Then
                RaiseEvent CentroCosto_MovimientosRowChanged(Me, New CentroCosto_MovimientosRowChangeEvent(CType(e.Row,CentroCosto_MovimientosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CentroCosto_MovimientosRowChangingEvent) Is Nothing) Then
                RaiseEvent CentroCosto_MovimientosRowChanging(Me, New CentroCosto_MovimientosRowChangeEvent(CType(e.Row,CentroCosto_MovimientosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CentroCosto_MovimientosRowDeletedEvent) Is Nothing) Then
                RaiseEvent CentroCosto_MovimientosRowDeleted(Me, New CentroCosto_MovimientosRowChangeEvent(CType(e.Row,CentroCosto_MovimientosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CentroCosto_MovimientosRowDeletingEvent) Is Nothing) Then
                RaiseEvent CentroCosto_MovimientosRowDeleting(Me, New CentroCosto_MovimientosRowChangeEvent(CType(e.Row,CentroCosto_MovimientosRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCentroCosto_MovimientosRow(ByVal row As CentroCosto_MovimientosRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CentroCosto_MovimientosRow
        Inherits DataRow
        
        Private tableCentroCosto_Movimientos As CentroCosto_MovimientosDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCentroCosto_Movimientos = CType(Me.Table,CentroCosto_MovimientosDataTable)
        End Sub
        
        Public Property Id As Long
            Get
                Return CType(Me(Me.tableCentroCosto_Movimientos.IdColumn),Long)
            End Get
            Set
                Me(Me.tableCentroCosto_Movimientos.IdColumn) = value
            End Set
        End Property
        
        Public Property IdAsiento As String
            Get
                Return CType(Me(Me.tableCentroCosto_Movimientos.IdAsientoColumn),String)
            End Get
            Set
                Me(Me.tableCentroCosto_Movimientos.IdAsientoColumn) = value
            End Set
        End Property
        
        Public Property Documento As String
            Get
                Return CType(Me(Me.tableCentroCosto_Movimientos.DocumentoColumn),String)
            End Get
            Set
                Me(Me.tableCentroCosto_Movimientos.DocumentoColumn) = value
            End Set
        End Property
        
        Public Property Fecha As Date
            Get
                Return CType(Me(Me.tableCentroCosto_Movimientos.FechaColumn),Date)
            End Get
            Set
                Me(Me.tableCentroCosto_Movimientos.FechaColumn) = value
            End Set
        End Property
        
        Public Property IdCentroCosto As Integer
            Get
                Return CType(Me(Me.tableCentroCosto_Movimientos.IdCentroCostoColumn),Integer)
            End Get
            Set
                Me(Me.tableCentroCosto_Movimientos.IdCentroCostoColumn) = value
            End Set
        End Property
        
        Public Property Monto As Double
            Get
                Return CType(Me(Me.tableCentroCosto_Movimientos.MontoColumn),Double)
            End Get
            Set
                Me(Me.tableCentroCosto_Movimientos.MontoColumn) = value
            End Set
        End Property
        
        Public Property Debe As Boolean
            Get
                Return CType(Me(Me.tableCentroCosto_Movimientos.DebeColumn),Boolean)
            End Get
            Set
                Me(Me.tableCentroCosto_Movimientos.DebeColumn) = value
            End Set
        End Property
        
        Public Property Haber As Boolean
            Get
                Return CType(Me(Me.tableCentroCosto_Movimientos.HaberColumn),Boolean)
            End Get
            Set
                Me(Me.tableCentroCosto_Movimientos.HaberColumn) = value
            End Set
        End Property
        
        Public Property Descripcion As String
            Get
                Try 
                    Return CType(Me(Me.tableCentroCosto_Movimientos.DescripcionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroCosto_Movimientos.DescripcionColumn) = value
            End Set
        End Property
        
        Public Property CuentaContable As String
            Get
                Return CType(Me(Me.tableCentroCosto_Movimientos.CuentaContableColumn),String)
            End Get
            Set
                Me(Me.tableCentroCosto_Movimientos.CuentaContableColumn) = value
            End Set
        End Property
        
        Public Property NombreCuentaContable As String
            Get
                Return CType(Me(Me.tableCentroCosto_Movimientos.NombreCuentaContableColumn),String)
            End Get
            Set
                Me(Me.tableCentroCosto_Movimientos.NombreCuentaContableColumn) = value
            End Set
        End Property
        
        Public Property Tipo As Integer
            Get
                Return CType(Me(Me.tableCentroCosto_Movimientos.TipoColumn),Integer)
            End Get
            Set
                Me(Me.tableCentroCosto_Movimientos.TipoColumn) = value
            End Set
        End Property
        
        Public Property IdDetalle As Long
            Get
                Return CType(Me(Me.tableCentroCosto_Movimientos.IdDetalleColumn),Long)
            End Get
            Set
                Me(Me.tableCentroCosto_Movimientos.IdDetalleColumn) = value
            End Set
        End Property
        
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableCentroCosto_Movimientos.DescripcionColumn)
        End Function
        
        Public Sub SetDescripcionNull()
            Me(Me.tableCentroCosto_Movimientos.DescripcionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CentroCosto_MovimientosRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CentroCosto_MovimientosRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CentroCosto_MovimientosRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CentroCosto_MovimientosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CentroCostoDetalleDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCentroCosto As DataColumn
        
        Private columnMonto As DataColumn
        
        Private columnDescripcion As DataColumn
        
        Private columnid As DataColumn
        
        Friend Sub New()
            MyBase.New("CentroCostoDetalle")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CentroCostoColumn As DataColumn
            Get
                Return Me.columnCentroCosto
            End Get
        End Property
        
        Friend ReadOnly Property MontoColumn As DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        Friend ReadOnly Property DescripcionColumn As DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        Friend ReadOnly Property idColumn As DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CentroCostoDetalleRow
            Get
                Return CType(Me.Rows(index),CentroCostoDetalleRow)
            End Get
        End Property
        
        Public Event CentroCostoDetalleRowChanged As CentroCostoDetalleRowChangeEventHandler
        
        Public Event CentroCostoDetalleRowChanging As CentroCostoDetalleRowChangeEventHandler
        
        Public Event CentroCostoDetalleRowDeleted As CentroCostoDetalleRowChangeEventHandler
        
        Public Event CentroCostoDetalleRowDeleting As CentroCostoDetalleRowChangeEventHandler
        
        Public Overloads Sub AddCentroCostoDetalleRow(ByVal row As CentroCostoDetalleRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCentroCostoDetalleRow(ByVal CentroCosto As String, ByVal Monto As Double, ByVal Descripcion As String, ByVal id As Integer) As CentroCostoDetalleRow
            Dim rowCentroCostoDetalleRow As CentroCostoDetalleRow = CType(Me.NewRow,CentroCostoDetalleRow)
            rowCentroCostoDetalleRow.ItemArray = New Object() {CentroCosto, Monto, Descripcion, id}
            Me.Rows.Add(rowCentroCostoDetalleRow)
            Return rowCentroCostoDetalleRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CentroCostoDetalleDataTable = CType(MyBase.Clone,CentroCostoDetalleDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CentroCostoDetalleDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCentroCosto = Me.Columns("CentroCosto")
            Me.columnMonto = Me.Columns("Monto")
            Me.columnDescripcion = Me.Columns("Descripcion")
            Me.columnid = Me.Columns("id")
        End Sub
        
        Private Sub InitClass()
            Me.columnCentroCosto = New DataColumn("CentroCosto", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCentroCosto)
            Me.columnMonto = New DataColumn("Monto", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto)
            Me.columnDescripcion = New DataColumn("Descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcion)
            Me.columnid = New DataColumn("id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid)
        End Sub
        
        Public Function NewCentroCostoDetalleRow() As CentroCostoDetalleRow
            Return CType(Me.NewRow,CentroCostoDetalleRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CentroCostoDetalleRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CentroCostoDetalleRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CentroCostoDetalleRowChangedEvent) Is Nothing) Then
                RaiseEvent CentroCostoDetalleRowChanged(Me, New CentroCostoDetalleRowChangeEvent(CType(e.Row,CentroCostoDetalleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CentroCostoDetalleRowChangingEvent) Is Nothing) Then
                RaiseEvent CentroCostoDetalleRowChanging(Me, New CentroCostoDetalleRowChangeEvent(CType(e.Row,CentroCostoDetalleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CentroCostoDetalleRowDeletedEvent) Is Nothing) Then
                RaiseEvent CentroCostoDetalleRowDeleted(Me, New CentroCostoDetalleRowChangeEvent(CType(e.Row,CentroCostoDetalleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CentroCostoDetalleRowDeletingEvent) Is Nothing) Then
                RaiseEvent CentroCostoDetalleRowDeleting(Me, New CentroCostoDetalleRowChangeEvent(CType(e.Row,CentroCostoDetalleRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCentroCostoDetalleRow(ByVal row As CentroCostoDetalleRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CentroCostoDetalleRow
        Inherits DataRow
        
        Private tableCentroCostoDetalle As CentroCostoDetalleDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCentroCostoDetalle = CType(Me.Table,CentroCostoDetalleDataTable)
        End Sub
        
        Public Property CentroCosto As String
            Get
                Try 
                    Return CType(Me(Me.tableCentroCostoDetalle.CentroCostoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroCostoDetalle.CentroCostoColumn) = value
            End Set
        End Property
        
        Public Property Monto As Double
            Get
                Try 
                    Return CType(Me(Me.tableCentroCostoDetalle.MontoColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroCostoDetalle.MontoColumn) = value
            End Set
        End Property
        
        Public Property Descripcion As String
            Get
                Try 
                    Return CType(Me(Me.tableCentroCostoDetalle.DescripcionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroCostoDetalle.DescripcionColumn) = value
            End Set
        End Property
        
        Public Property id As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCentroCostoDetalle.idColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentroCostoDetalle.idColumn) = value
            End Set
        End Property
        
        Public Function IsCentroCostoNull() As Boolean
            Return Me.IsNull(Me.tableCentroCostoDetalle.CentroCostoColumn)
        End Function
        
        Public Sub SetCentroCostoNull()
            Me(Me.tableCentroCostoDetalle.CentroCostoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMontoNull() As Boolean
            Return Me.IsNull(Me.tableCentroCostoDetalle.MontoColumn)
        End Function
        
        Public Sub SetMontoNull()
            Me(Me.tableCentroCostoDetalle.MontoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableCentroCostoDetalle.DescripcionColumn)
        End Function
        
        Public Sub SetDescripcionNull()
            Me(Me.tableCentroCostoDetalle.DescripcionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsidNull() As Boolean
            Return Me.IsNull(Me.tableCentroCostoDetalle.idColumn)
        End Function
        
        Public Sub SetidNull()
            Me(Me.tableCentroCostoDetalle.idColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CentroCostoDetalleRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CentroCostoDetalleRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CentroCostoDetalleRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CentroCostoDetalleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AsientosContablesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnNumAsiento As DataColumn
        
        Private columnFecha As DataColumn
        
        Private columnIdNumDoc As DataColumn
        
        Private columnNumDoc As DataColumn
        
        Private columnBeneficiario As DataColumn
        
        Private columnTipoDoc As DataColumn
        
        Private columnAccion As DataColumn
        
        Private columnAnulado As DataColumn
        
        Private columnFechaEntrada As DataColumn
        
        Private columnMayorizado As DataColumn
        
        Private columnPeriodo As DataColumn
        
        Private columnNumMayorizado As DataColumn
        
        Private columnModulo As DataColumn
        
        Private columnObservaciones As DataColumn
        
        Private columnNombreUsuario As DataColumn
        
        Private columnTotalDebe As DataColumn
        
        Private columnTotalHaber As DataColumn
        
        Private columnCodMoneda As DataColumn
        
        Private columnTipoCambio As DataColumn
        
        Friend Sub New()
            MyBase.New("AsientosContables")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property NumAsientoColumn As DataColumn
            Get
                Return Me.columnNumAsiento
            End Get
        End Property
        
        Friend ReadOnly Property FechaColumn As DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        Friend ReadOnly Property IdNumDocColumn As DataColumn
            Get
                Return Me.columnIdNumDoc
            End Get
        End Property
        
        Friend ReadOnly Property NumDocColumn As DataColumn
            Get
                Return Me.columnNumDoc
            End Get
        End Property
        
        Friend ReadOnly Property BeneficiarioColumn As DataColumn
            Get
                Return Me.columnBeneficiario
            End Get
        End Property
        
        Friend ReadOnly Property TipoDocColumn As DataColumn
            Get
                Return Me.columnTipoDoc
            End Get
        End Property
        
        Friend ReadOnly Property AccionColumn As DataColumn
            Get
                Return Me.columnAccion
            End Get
        End Property
        
        Friend ReadOnly Property AnuladoColumn As DataColumn
            Get
                Return Me.columnAnulado
            End Get
        End Property
        
        Friend ReadOnly Property FechaEntradaColumn As DataColumn
            Get
                Return Me.columnFechaEntrada
            End Get
        End Property
        
        Friend ReadOnly Property MayorizadoColumn As DataColumn
            Get
                Return Me.columnMayorizado
            End Get
        End Property
        
        Friend ReadOnly Property PeriodoColumn As DataColumn
            Get
                Return Me.columnPeriodo
            End Get
        End Property
        
        Friend ReadOnly Property NumMayorizadoColumn As DataColumn
            Get
                Return Me.columnNumMayorizado
            End Get
        End Property
        
        Friend ReadOnly Property ModuloColumn As DataColumn
            Get
                Return Me.columnModulo
            End Get
        End Property
        
        Friend ReadOnly Property ObservacionesColumn As DataColumn
            Get
                Return Me.columnObservaciones
            End Get
        End Property
        
        Friend ReadOnly Property NombreUsuarioColumn As DataColumn
            Get
                Return Me.columnNombreUsuario
            End Get
        End Property
        
        Friend ReadOnly Property TotalDebeColumn As DataColumn
            Get
                Return Me.columnTotalDebe
            End Get
        End Property
        
        Friend ReadOnly Property TotalHaberColumn As DataColumn
            Get
                Return Me.columnTotalHaber
            End Get
        End Property
        
        Friend ReadOnly Property CodMonedaColumn As DataColumn
            Get
                Return Me.columnCodMoneda
            End Get
        End Property
        
        Friend ReadOnly Property TipoCambioColumn As DataColumn
            Get
                Return Me.columnTipoCambio
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AsientosContablesRow
            Get
                Return CType(Me.Rows(index),AsientosContablesRow)
            End Get
        End Property
        
        Public Event AsientosContablesRowChanged As AsientosContablesRowChangeEventHandler
        
        Public Event AsientosContablesRowChanging As AsientosContablesRowChangeEventHandler
        
        Public Event AsientosContablesRowDeleted As AsientosContablesRowChangeEventHandler
        
        Public Event AsientosContablesRowDeleting As AsientosContablesRowChangeEventHandler
        
        Public Overloads Sub AddAsientosContablesRow(ByVal row As AsientosContablesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAsientosContablesRow( _
                    ByVal NumAsiento As String,  _
                    ByVal Fecha As Date,  _
                    ByVal IdNumDoc As Long,  _
                    ByVal NumDoc As String,  _
                    ByVal Beneficiario As String,  _
                    ByVal TipoDoc As Integer,  _
                    ByVal Accion As String,  _
                    ByVal Anulado As Boolean,  _
                    ByVal FechaEntrada As Date,  _
                    ByVal Mayorizado As Boolean,  _
                    ByVal Periodo As String,  _
                    ByVal NumMayorizado As Decimal,  _
                    ByVal Modulo As String,  _
                    ByVal Observaciones As String,  _
                    ByVal NombreUsuario As String,  _
                    ByVal TotalDebe As Double,  _
                    ByVal TotalHaber As Double,  _
                    ByVal CodMoneda As Integer,  _
                    ByVal TipoCambio As Double) As AsientosContablesRow
            Dim rowAsientosContablesRow As AsientosContablesRow = CType(Me.NewRow,AsientosContablesRow)
            rowAsientosContablesRow.ItemArray = New Object() {NumAsiento, Fecha, IdNumDoc, NumDoc, Beneficiario, TipoDoc, Accion, Anulado, FechaEntrada, Mayorizado, Periodo, NumMayorizado, Modulo, Observaciones, NombreUsuario, TotalDebe, TotalHaber, CodMoneda, TipoCambio}
            Me.Rows.Add(rowAsientosContablesRow)
            Return rowAsientosContablesRow
        End Function
        
        Public Function FindByNumAsiento(ByVal NumAsiento As String) As AsientosContablesRow
            Return CType(Me.Rows.Find(New Object() {NumAsiento}),AsientosContablesRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AsientosContablesDataTable = CType(MyBase.Clone,AsientosContablesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AsientosContablesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnNumAsiento = Me.Columns("NumAsiento")
            Me.columnFecha = Me.Columns("Fecha")
            Me.columnIdNumDoc = Me.Columns("IdNumDoc")
            Me.columnNumDoc = Me.Columns("NumDoc")
            Me.columnBeneficiario = Me.Columns("Beneficiario")
            Me.columnTipoDoc = Me.Columns("TipoDoc")
            Me.columnAccion = Me.Columns("Accion")
            Me.columnAnulado = Me.Columns("Anulado")
            Me.columnFechaEntrada = Me.Columns("FechaEntrada")
            Me.columnMayorizado = Me.Columns("Mayorizado")
            Me.columnPeriodo = Me.Columns("Periodo")
            Me.columnNumMayorizado = Me.Columns("NumMayorizado")
            Me.columnModulo = Me.Columns("Modulo")
            Me.columnObservaciones = Me.Columns("Observaciones")
            Me.columnNombreUsuario = Me.Columns("NombreUsuario")
            Me.columnTotalDebe = Me.Columns("TotalDebe")
            Me.columnTotalHaber = Me.Columns("TotalHaber")
            Me.columnCodMoneda = Me.Columns("CodMoneda")
            Me.columnTipoCambio = Me.Columns("TipoCambio")
        End Sub
        
        Private Sub InitClass()
            Me.columnNumAsiento = New DataColumn("NumAsiento", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNumAsiento)
            Me.columnFecha = New DataColumn("Fecha", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha)
            Me.columnIdNumDoc = New DataColumn("IdNumDoc", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdNumDoc)
            Me.columnNumDoc = New DataColumn("NumDoc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNumDoc)
            Me.columnBeneficiario = New DataColumn("Beneficiario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBeneficiario)
            Me.columnTipoDoc = New DataColumn("TipoDoc", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipoDoc)
            Me.columnAccion = New DataColumn("Accion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAccion)
            Me.columnAnulado = New DataColumn("Anulado", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAnulado)
            Me.columnFechaEntrada = New DataColumn("FechaEntrada", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaEntrada)
            Me.columnMayorizado = New DataColumn("Mayorizado", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMayorizado)
            Me.columnPeriodo = New DataColumn("Periodo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPeriodo)
            Me.columnNumMayorizado = New DataColumn("NumMayorizado", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNumMayorizado)
            Me.columnModulo = New DataColumn("Modulo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModulo)
            Me.columnObservaciones = New DataColumn("Observaciones", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnObservaciones)
            Me.columnNombreUsuario = New DataColumn("NombreUsuario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombreUsuario)
            Me.columnTotalDebe = New DataColumn("TotalDebe", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotalDebe)
            Me.columnTotalHaber = New DataColumn("TotalHaber", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotalHaber)
            Me.columnCodMoneda = New DataColumn("CodMoneda", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodMoneda)
            Me.columnTipoCambio = New DataColumn("TipoCambio", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipoCambio)
            Me.Constraints.Add(New UniqueConstraint("DatasetGastoKey1", New DataColumn() {Me.columnNumAsiento}, true))
            Me.columnNumAsiento.AllowDBNull = false
            Me.columnNumAsiento.Unique = true
            Me.columnFecha.AllowDBNull = false
            Me.columnIdNumDoc.AllowDBNull = false
            Me.columnNumDoc.AllowDBNull = false
            Me.columnBeneficiario.AllowDBNull = false
            Me.columnTipoDoc.AllowDBNull = false
            Me.columnAccion.AllowDBNull = false
            Me.columnAnulado.AllowDBNull = false
            Me.columnFechaEntrada.AllowDBNull = false
            Me.columnMayorizado.AllowDBNull = false
            Me.columnPeriodo.AllowDBNull = false
            Me.columnNumMayorizado.AllowDBNull = false
            Me.columnModulo.AllowDBNull = false
            Me.columnObservaciones.AllowDBNull = false
            Me.columnNombreUsuario.AllowDBNull = false
            Me.columnTotalDebe.AllowDBNull = false
            Me.columnTotalHaber.AllowDBNull = false
            Me.columnCodMoneda.AllowDBNull = false
            Me.columnTipoCambio.AllowDBNull = false
        End Sub
        
        Public Function NewAsientosContablesRow() As AsientosContablesRow
            Return CType(Me.NewRow,AsientosContablesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AsientosContablesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AsientosContablesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AsientosContablesRowChangedEvent) Is Nothing) Then
                RaiseEvent AsientosContablesRowChanged(Me, New AsientosContablesRowChangeEvent(CType(e.Row,AsientosContablesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AsientosContablesRowChangingEvent) Is Nothing) Then
                RaiseEvent AsientosContablesRowChanging(Me, New AsientosContablesRowChangeEvent(CType(e.Row,AsientosContablesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AsientosContablesRowDeletedEvent) Is Nothing) Then
                RaiseEvent AsientosContablesRowDeleted(Me, New AsientosContablesRowChangeEvent(CType(e.Row,AsientosContablesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AsientosContablesRowDeletingEvent) Is Nothing) Then
                RaiseEvent AsientosContablesRowDeleting(Me, New AsientosContablesRowChangeEvent(CType(e.Row,AsientosContablesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAsientosContablesRow(ByVal row As AsientosContablesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AsientosContablesRow
        Inherits DataRow
        
        Private tableAsientosContables As AsientosContablesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAsientosContables = CType(Me.Table,AsientosContablesDataTable)
        End Sub
        
        Public Property NumAsiento As String
            Get
                Return CType(Me(Me.tableAsientosContables.NumAsientoColumn),String)
            End Get
            Set
                Me(Me.tableAsientosContables.NumAsientoColumn) = value
            End Set
        End Property
        
        Public Property Fecha As Date
            Get
                Return CType(Me(Me.tableAsientosContables.FechaColumn),Date)
            End Get
            Set
                Me(Me.tableAsientosContables.FechaColumn) = value
            End Set
        End Property
        
        Public Property IdNumDoc As Long
            Get
                Return CType(Me(Me.tableAsientosContables.IdNumDocColumn),Long)
            End Get
            Set
                Me(Me.tableAsientosContables.IdNumDocColumn) = value
            End Set
        End Property
        
        Public Property NumDoc As String
            Get
                Return CType(Me(Me.tableAsientosContables.NumDocColumn),String)
            End Get
            Set
                Me(Me.tableAsientosContables.NumDocColumn) = value
            End Set
        End Property
        
        Public Property Beneficiario As String
            Get
                Return CType(Me(Me.tableAsientosContables.BeneficiarioColumn),String)
            End Get
            Set
                Me(Me.tableAsientosContables.BeneficiarioColumn) = value
            End Set
        End Property
        
        Public Property TipoDoc As Integer
            Get
                Return CType(Me(Me.tableAsientosContables.TipoDocColumn),Integer)
            End Get
            Set
                Me(Me.tableAsientosContables.TipoDocColumn) = value
            End Set
        End Property
        
        Public Property Accion As String
            Get
                Return CType(Me(Me.tableAsientosContables.AccionColumn),String)
            End Get
            Set
                Me(Me.tableAsientosContables.AccionColumn) = value
            End Set
        End Property
        
        Public Property Anulado As Boolean
            Get
                Return CType(Me(Me.tableAsientosContables.AnuladoColumn),Boolean)
            End Get
            Set
                Me(Me.tableAsientosContables.AnuladoColumn) = value
            End Set
        End Property
        
        Public Property FechaEntrada As Date
            Get
                Return CType(Me(Me.tableAsientosContables.FechaEntradaColumn),Date)
            End Get
            Set
                Me(Me.tableAsientosContables.FechaEntradaColumn) = value
            End Set
        End Property
        
        Public Property Mayorizado As Boolean
            Get
                Return CType(Me(Me.tableAsientosContables.MayorizadoColumn),Boolean)
            End Get
            Set
                Me(Me.tableAsientosContables.MayorizadoColumn) = value
            End Set
        End Property
        
        Public Property Periodo As String
            Get
                Return CType(Me(Me.tableAsientosContables.PeriodoColumn),String)
            End Get
            Set
                Me(Me.tableAsientosContables.PeriodoColumn) = value
            End Set
        End Property
        
        Public Property NumMayorizado As Decimal
            Get
                Return CType(Me(Me.tableAsientosContables.NumMayorizadoColumn),Decimal)
            End Get
            Set
                Me(Me.tableAsientosContables.NumMayorizadoColumn) = value
            End Set
        End Property
        
        Public Property Modulo As String
            Get
                Return CType(Me(Me.tableAsientosContables.ModuloColumn),String)
            End Get
            Set
                Me(Me.tableAsientosContables.ModuloColumn) = value
            End Set
        End Property
        
        Public Property Observaciones As String
            Get
                Return CType(Me(Me.tableAsientosContables.ObservacionesColumn),String)
            End Get
            Set
                Me(Me.tableAsientosContables.ObservacionesColumn) = value
            End Set
        End Property
        
        Public Property NombreUsuario As String
            Get
                Return CType(Me(Me.tableAsientosContables.NombreUsuarioColumn),String)
            End Get
            Set
                Me(Me.tableAsientosContables.NombreUsuarioColumn) = value
            End Set
        End Property
        
        Public Property TotalDebe As Double
            Get
                Return CType(Me(Me.tableAsientosContables.TotalDebeColumn),Double)
            End Get
            Set
                Me(Me.tableAsientosContables.TotalDebeColumn) = value
            End Set
        End Property
        
        Public Property TotalHaber As Double
            Get
                Return CType(Me(Me.tableAsientosContables.TotalHaberColumn),Double)
            End Get
            Set
                Me(Me.tableAsientosContables.TotalHaberColumn) = value
            End Set
        End Property
        
        Public Property CodMoneda As Integer
            Get
                Return CType(Me(Me.tableAsientosContables.CodMonedaColumn),Integer)
            End Get
            Set
                Me(Me.tableAsientosContables.CodMonedaColumn) = value
            End Set
        End Property
        
        Public Property TipoCambio As Double
            Get
                Return CType(Me(Me.tableAsientosContables.TipoCambioColumn),Double)
            End Get
            Set
                Me(Me.tableAsientosContables.TipoCambioColumn) = value
            End Set
        End Property
        
        Public Function GetDetallesAsientosContableRows() As DetallesAsientosContableRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("AsientosContablesDetallesAsientosContable")),DetallesAsientosContableRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AsientosContablesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AsientosContablesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AsientosContablesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AsientosContablesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DetallesAsientosContableDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID_Detalle As DataColumn
        
        Private columnNumAsiento As DataColumn
        
        Private columnCuenta As DataColumn
        
        Private columnNombreCuenta As DataColumn
        
        Private columnMonto As DataColumn
        
        Private columnDebe As DataColumn
        
        Private columnHaber As DataColumn
        
        Private columnDescripcionAsiento As DataColumn
        
        Private columnTipocambio As DataColumn
        
        Friend Sub New()
            MyBase.New("DetallesAsientosContable")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ID_DetalleColumn As DataColumn
            Get
                Return Me.columnID_Detalle
            End Get
        End Property
        
        Friend ReadOnly Property NumAsientoColumn As DataColumn
            Get
                Return Me.columnNumAsiento
            End Get
        End Property
        
        Friend ReadOnly Property CuentaColumn As DataColumn
            Get
                Return Me.columnCuenta
            End Get
        End Property
        
        Friend ReadOnly Property NombreCuentaColumn As DataColumn
            Get
                Return Me.columnNombreCuenta
            End Get
        End Property
        
        Friend ReadOnly Property MontoColumn As DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        Friend ReadOnly Property DebeColumn As DataColumn
            Get
                Return Me.columnDebe
            End Get
        End Property
        
        Friend ReadOnly Property HaberColumn As DataColumn
            Get
                Return Me.columnHaber
            End Get
        End Property
        
        Friend ReadOnly Property DescripcionAsientoColumn As DataColumn
            Get
                Return Me.columnDescripcionAsiento
            End Get
        End Property
        
        Friend ReadOnly Property TipocambioColumn As DataColumn
            Get
                Return Me.columnTipocambio
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DetallesAsientosContableRow
            Get
                Return CType(Me.Rows(index),DetallesAsientosContableRow)
            End Get
        End Property
        
        Public Event DetallesAsientosContableRowChanged As DetallesAsientosContableRowChangeEventHandler
        
        Public Event DetallesAsientosContableRowChanging As DetallesAsientosContableRowChangeEventHandler
        
        Public Event DetallesAsientosContableRowDeleted As DetallesAsientosContableRowChangeEventHandler
        
        Public Event DetallesAsientosContableRowDeleting As DetallesAsientosContableRowChangeEventHandler
        
        Public Overloads Sub AddDetallesAsientosContableRow(ByVal row As DetallesAsientosContableRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDetallesAsientosContableRow(ByVal parentAsientosContablesRowByAsientosContablesDetallesAsientosContable As AsientosContablesRow, ByVal Cuenta As String, ByVal NombreCuenta As String, ByVal Monto As Double, ByVal Debe As Boolean, ByVal Haber As Boolean, ByVal DescripcionAsiento As String, ByVal Tipocambio As Double) As DetallesAsientosContableRow
            Dim rowDetallesAsientosContableRow As DetallesAsientosContableRow = CType(Me.NewRow,DetallesAsientosContableRow)
            rowDetallesAsientosContableRow.ItemArray = New Object() {Nothing, parentAsientosContablesRowByAsientosContablesDetallesAsientosContable(0), Cuenta, NombreCuenta, Monto, Debe, Haber, DescripcionAsiento, Tipocambio}
            Me.Rows.Add(rowDetallesAsientosContableRow)
            Return rowDetallesAsientosContableRow
        End Function
        
        Public Function FindByID_Detalle(ByVal ID_Detalle As Long) As DetallesAsientosContableRow
            Return CType(Me.Rows.Find(New Object() {ID_Detalle}),DetallesAsientosContableRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DetallesAsientosContableDataTable = CType(MyBase.Clone,DetallesAsientosContableDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DetallesAsientosContableDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID_Detalle = Me.Columns("ID_Detalle")
            Me.columnNumAsiento = Me.Columns("NumAsiento")
            Me.columnCuenta = Me.Columns("Cuenta")
            Me.columnNombreCuenta = Me.Columns("NombreCuenta")
            Me.columnMonto = Me.Columns("Monto")
            Me.columnDebe = Me.Columns("Debe")
            Me.columnHaber = Me.Columns("Haber")
            Me.columnDescripcionAsiento = Me.Columns("DescripcionAsiento")
            Me.columnTipocambio = Me.Columns("Tipocambio")
        End Sub
        
        Private Sub InitClass()
            Me.columnID_Detalle = New DataColumn("ID_Detalle", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID_Detalle)
            Me.columnNumAsiento = New DataColumn("NumAsiento", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNumAsiento)
            Me.columnCuenta = New DataColumn("Cuenta", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuenta)
            Me.columnNombreCuenta = New DataColumn("NombreCuenta", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombreCuenta)
            Me.columnMonto = New DataColumn("Monto", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto)
            Me.columnDebe = New DataColumn("Debe", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDebe)
            Me.columnHaber = New DataColumn("Haber", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHaber)
            Me.columnDescripcionAsiento = New DataColumn("DescripcionAsiento", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcionAsiento)
            Me.columnTipocambio = New DataColumn("Tipocambio", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipocambio)
            Me.Constraints.Add(New UniqueConstraint("DatasetGastoKey2", New DataColumn() {Me.columnID_Detalle}, true))
            Me.columnID_Detalle.AutoIncrement = true
            Me.columnID_Detalle.AllowDBNull = false
            Me.columnID_Detalle.ReadOnly = true
            Me.columnID_Detalle.Unique = true
            Me.columnNumAsiento.AllowDBNull = false
            Me.columnCuenta.AllowDBNull = false
            Me.columnNombreCuenta.AllowDBNull = false
            Me.columnMonto.AllowDBNull = false
            Me.columnDebe.AllowDBNull = false
            Me.columnHaber.AllowDBNull = false
            Me.columnDescripcionAsiento.AllowDBNull = false
        End Sub
        
        Public Function NewDetallesAsientosContableRow() As DetallesAsientosContableRow
            Return CType(Me.NewRow,DetallesAsientosContableRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DetallesAsientosContableRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DetallesAsientosContableRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DetallesAsientosContableRowChangedEvent) Is Nothing) Then
                RaiseEvent DetallesAsientosContableRowChanged(Me, New DetallesAsientosContableRowChangeEvent(CType(e.Row,DetallesAsientosContableRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DetallesAsientosContableRowChangingEvent) Is Nothing) Then
                RaiseEvent DetallesAsientosContableRowChanging(Me, New DetallesAsientosContableRowChangeEvent(CType(e.Row,DetallesAsientosContableRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DetallesAsientosContableRowDeletedEvent) Is Nothing) Then
                RaiseEvent DetallesAsientosContableRowDeleted(Me, New DetallesAsientosContableRowChangeEvent(CType(e.Row,DetallesAsientosContableRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DetallesAsientosContableRowDeletingEvent) Is Nothing) Then
                RaiseEvent DetallesAsientosContableRowDeleting(Me, New DetallesAsientosContableRowChangeEvent(CType(e.Row,DetallesAsientosContableRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDetallesAsientosContableRow(ByVal row As DetallesAsientosContableRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DetallesAsientosContableRow
        Inherits DataRow
        
        Private tableDetallesAsientosContable As DetallesAsientosContableDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDetallesAsientosContable = CType(Me.Table,DetallesAsientosContableDataTable)
        End Sub
        
        Public Property ID_Detalle As Long
            Get
                Return CType(Me(Me.tableDetallesAsientosContable.ID_DetalleColumn),Long)
            End Get
            Set
                Me(Me.tableDetallesAsientosContable.ID_DetalleColumn) = value
            End Set
        End Property
        
        Public Property NumAsiento As String
            Get
                Return CType(Me(Me.tableDetallesAsientosContable.NumAsientoColumn),String)
            End Get
            Set
                Me(Me.tableDetallesAsientosContable.NumAsientoColumn) = value
            End Set
        End Property
        
        Public Property Cuenta As String
            Get
                Return CType(Me(Me.tableDetallesAsientosContable.CuentaColumn),String)
            End Get
            Set
                Me(Me.tableDetallesAsientosContable.CuentaColumn) = value
            End Set
        End Property
        
        Public Property NombreCuenta As String
            Get
                Return CType(Me(Me.tableDetallesAsientosContable.NombreCuentaColumn),String)
            End Get
            Set
                Me(Me.tableDetallesAsientosContable.NombreCuentaColumn) = value
            End Set
        End Property
        
        Public Property Monto As Double
            Get
                Return CType(Me(Me.tableDetallesAsientosContable.MontoColumn),Double)
            End Get
            Set
                Me(Me.tableDetallesAsientosContable.MontoColumn) = value
            End Set
        End Property
        
        Public Property Debe As Boolean
            Get
                Return CType(Me(Me.tableDetallesAsientosContable.DebeColumn),Boolean)
            End Get
            Set
                Me(Me.tableDetallesAsientosContable.DebeColumn) = value
            End Set
        End Property
        
        Public Property Haber As Boolean
            Get
                Return CType(Me(Me.tableDetallesAsientosContable.HaberColumn),Boolean)
            End Get
            Set
                Me(Me.tableDetallesAsientosContable.HaberColumn) = value
            End Set
        End Property
        
        Public Property DescripcionAsiento As String
            Get
                Return CType(Me(Me.tableDetallesAsientosContable.DescripcionAsientoColumn),String)
            End Get
            Set
                Me(Me.tableDetallesAsientosContable.DescripcionAsientoColumn) = value
            End Set
        End Property
        
        Public Property Tipocambio As Double
            Get
                Try 
                    Return CType(Me(Me.tableDetallesAsientosContable.TipocambioColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallesAsientosContable.TipocambioColumn) = value
            End Set
        End Property
        
        Public Property AsientosContablesRow As AsientosContablesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AsientosContablesDetallesAsientosContable")),AsientosContablesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AsientosContablesDetallesAsientosContable"))
            End Set
        End Property
        
        Public Function IsTipocambioNull() As Boolean
            Return Me.IsNull(Me.tableDetallesAsientosContable.TipocambioColumn)
        End Function
        
        Public Sub SetTipocambioNull()
            Me(Me.tableDetallesAsientosContable.TipocambioColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DetallesAsientosContableRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DetallesAsientosContableRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DetallesAsientosContableRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DetallesAsientosContableRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
