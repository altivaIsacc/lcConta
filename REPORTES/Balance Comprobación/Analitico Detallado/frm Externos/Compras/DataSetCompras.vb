'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DataSetCompras
    Inherits DataSet
    
    Private tableProveedores As ProveedoresDataTable
    
    Private tableordencompra As ordencompraDataTable
    
    Private tabledetalle_ordencompra As detalle_ordencompraDataTable
    
    Private tableMonedas As MonedasDataTable
    
    Private tableMoneda As MonedaDataTable
    
    Private tableUsuarios As UsuariosDataTable
    
    Private tableBodega As BodegaDataTable
    
    Private tablearticulos_comprados As articulos_compradosDataTable
    
    Private tablecompras As comprasDataTable
    
    Private relationUsuarioscompras As DataRelation
    
    Private relationMonedacompras As DataRelation
    
    Private relationProveedorescompras As DataRelation
    
    Private relationcomprasarticulos_comprados As DataRelation
    
    Private relationordencompradetalle_ordencompra As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Proveedores")) Is Nothing) Then
                Me.Tables.Add(New ProveedoresDataTable(ds.Tables("Proveedores")))
            End If
            If (Not (ds.Tables("ordencompra")) Is Nothing) Then
                Me.Tables.Add(New ordencompraDataTable(ds.Tables("ordencompra")))
            End If
            If (Not (ds.Tables("detalle_ordencompra")) Is Nothing) Then
                Me.Tables.Add(New detalle_ordencompraDataTable(ds.Tables("detalle_ordencompra")))
            End If
            If (Not (ds.Tables("Monedas")) Is Nothing) Then
                Me.Tables.Add(New MonedasDataTable(ds.Tables("Monedas")))
            End If
            If (Not (ds.Tables("Moneda")) Is Nothing) Then
                Me.Tables.Add(New MonedaDataTable(ds.Tables("Moneda")))
            End If
            If (Not (ds.Tables("Usuarios")) Is Nothing) Then
                Me.Tables.Add(New UsuariosDataTable(ds.Tables("Usuarios")))
            End If
            If (Not (ds.Tables("Bodega")) Is Nothing) Then
                Me.Tables.Add(New BodegaDataTable(ds.Tables("Bodega")))
            End If
            If (Not (ds.Tables("articulos_comprados")) Is Nothing) Then
                Me.Tables.Add(New articulos_compradosDataTable(ds.Tables("articulos_comprados")))
            End If
            If (Not (ds.Tables("compras")) Is Nothing) Then
                Me.Tables.Add(New comprasDataTable(ds.Tables("compras")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Proveedores As ProveedoresDataTable
        Get
            Return Me.tableProveedores
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ordencompra As ordencompraDataTable
        Get
            Return Me.tableordencompra
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property detalle_ordencompra As detalle_ordencompraDataTable
        Get
            Return Me.tabledetalle_ordencompra
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Monedas As MonedasDataTable
        Get
            Return Me.tableMonedas
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Moneda As MonedaDataTable
        Get
            Return Me.tableMoneda
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Usuarios As UsuariosDataTable
        Get
            Return Me.tableUsuarios
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Bodega As BodegaDataTable
        Get
            Return Me.tableBodega
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property articulos_comprados As articulos_compradosDataTable
        Get
            Return Me.tablearticulos_comprados
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property compras As comprasDataTable
        Get
            Return Me.tablecompras
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DataSetCompras = CType(MyBase.Clone,DataSetCompras)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Proveedores")) Is Nothing) Then
            Me.Tables.Add(New ProveedoresDataTable(ds.Tables("Proveedores")))
        End If
        If (Not (ds.Tables("ordencompra")) Is Nothing) Then
            Me.Tables.Add(New ordencompraDataTable(ds.Tables("ordencompra")))
        End If
        If (Not (ds.Tables("detalle_ordencompra")) Is Nothing) Then
            Me.Tables.Add(New detalle_ordencompraDataTable(ds.Tables("detalle_ordencompra")))
        End If
        If (Not (ds.Tables("Monedas")) Is Nothing) Then
            Me.Tables.Add(New MonedasDataTable(ds.Tables("Monedas")))
        End If
        If (Not (ds.Tables("Moneda")) Is Nothing) Then
            Me.Tables.Add(New MonedaDataTable(ds.Tables("Moneda")))
        End If
        If (Not (ds.Tables("Usuarios")) Is Nothing) Then
            Me.Tables.Add(New UsuariosDataTable(ds.Tables("Usuarios")))
        End If
        If (Not (ds.Tables("Bodega")) Is Nothing) Then
            Me.Tables.Add(New BodegaDataTable(ds.Tables("Bodega")))
        End If
        If (Not (ds.Tables("articulos_comprados")) Is Nothing) Then
            Me.Tables.Add(New articulos_compradosDataTable(ds.Tables("articulos_comprados")))
        End If
        If (Not (ds.Tables("compras")) Is Nothing) Then
            Me.Tables.Add(New comprasDataTable(ds.Tables("compras")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableProveedores = CType(Me.Tables("Proveedores"),ProveedoresDataTable)
        If (Not (Me.tableProveedores) Is Nothing) Then
            Me.tableProveedores.InitVars
        End If
        Me.tableordencompra = CType(Me.Tables("ordencompra"),ordencompraDataTable)
        If (Not (Me.tableordencompra) Is Nothing) Then
            Me.tableordencompra.InitVars
        End If
        Me.tabledetalle_ordencompra = CType(Me.Tables("detalle_ordencompra"),detalle_ordencompraDataTable)
        If (Not (Me.tabledetalle_ordencompra) Is Nothing) Then
            Me.tabledetalle_ordencompra.InitVars
        End If
        Me.tableMonedas = CType(Me.Tables("Monedas"),MonedasDataTable)
        If (Not (Me.tableMonedas) Is Nothing) Then
            Me.tableMonedas.InitVars
        End If
        Me.tableMoneda = CType(Me.Tables("Moneda"),MonedaDataTable)
        If (Not (Me.tableMoneda) Is Nothing) Then
            Me.tableMoneda.InitVars
        End If
        Me.tableUsuarios = CType(Me.Tables("Usuarios"),UsuariosDataTable)
        If (Not (Me.tableUsuarios) Is Nothing) Then
            Me.tableUsuarios.InitVars
        End If
        Me.tableBodega = CType(Me.Tables("Bodega"),BodegaDataTable)
        If (Not (Me.tableBodega) Is Nothing) Then
            Me.tableBodega.InitVars
        End If
        Me.tablearticulos_comprados = CType(Me.Tables("articulos_comprados"),articulos_compradosDataTable)
        If (Not (Me.tablearticulos_comprados) Is Nothing) Then
            Me.tablearticulos_comprados.InitVars
        End If
        Me.tablecompras = CType(Me.Tables("compras"),comprasDataTable)
        If (Not (Me.tablecompras) Is Nothing) Then
            Me.tablecompras.InitVars
        End If
        Me.relationUsuarioscompras = Me.Relations("Usuarioscompras")
        Me.relationMonedacompras = Me.Relations("Monedacompras")
        Me.relationProveedorescompras = Me.Relations("Proveedorescompras")
        Me.relationcomprasarticulos_comprados = Me.Relations("comprasarticulos_comprados")
        Me.relationordencompradetalle_ordencompra = Me.Relations("ordencompradetalle_ordencompra")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DataSetCompras"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DataSetCompras.xsd"
        Me.Locale = New System.Globalization.CultureInfo("es-CR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableProveedores = New ProveedoresDataTable
        Me.Tables.Add(Me.tableProveedores)
        Me.tableordencompra = New ordencompraDataTable
        Me.Tables.Add(Me.tableordencompra)
        Me.tabledetalle_ordencompra = New detalle_ordencompraDataTable
        Me.Tables.Add(Me.tabledetalle_ordencompra)
        Me.tableMonedas = New MonedasDataTable
        Me.Tables.Add(Me.tableMonedas)
        Me.tableMoneda = New MonedaDataTable
        Me.Tables.Add(Me.tableMoneda)
        Me.tableUsuarios = New UsuariosDataTable
        Me.Tables.Add(Me.tableUsuarios)
        Me.tableBodega = New BodegaDataTable
        Me.Tables.Add(Me.tableBodega)
        Me.tablearticulos_comprados = New articulos_compradosDataTable
        Me.Tables.Add(Me.tablearticulos_comprados)
        Me.tablecompras = New comprasDataTable
        Me.Tables.Add(Me.tablecompras)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("ordencompradetalle_ordencompra", New DataColumn() {Me.tableordencompra.OrdenColumn}, New DataColumn() {Me.tabledetalle_ordencompra.OrdenColumn})
        Me.tabledetalle_ordencompra.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("comprasarticulos_comprados", New DataColumn() {Me.tablecompras.Id_CompraColumn}, New DataColumn() {Me.tablearticulos_comprados.IdCompraColumn})
        Me.tablearticulos_comprados.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Usuarioscompras", New DataColumn() {Me.tableUsuarios.CedulaColumn}, New DataColumn() {Me.tablecompras.CedulaUsuarioColumn})
        Me.tablecompras.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Monedacompras", New DataColumn() {Me.tableMoneda.CodMonedaColumn}, New DataColumn() {Me.tablecompras.Cod_MonedaCompraColumn})
        Me.tablecompras.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Proveedorescompras", New DataColumn() {Me.tableProveedores.CodigoProvColumn}, New DataColumn() {Me.tablecompras.CodigoProvColumn})
        Me.tablecompras.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationUsuarioscompras = New DataRelation("Usuarioscompras", New DataColumn() {Me.tableUsuarios.CedulaColumn}, New DataColumn() {Me.tablecompras.CedulaUsuarioColumn}, false)
        Me.Relations.Add(Me.relationUsuarioscompras)
        Me.relationMonedacompras = New DataRelation("Monedacompras", New DataColumn() {Me.tableMoneda.CodMonedaColumn}, New DataColumn() {Me.tablecompras.Cod_MonedaCompraColumn}, false)
        Me.Relations.Add(Me.relationMonedacompras)
        Me.relationProveedorescompras = New DataRelation("Proveedorescompras", New DataColumn() {Me.tableProveedores.CodigoProvColumn}, New DataColumn() {Me.tablecompras.CodigoProvColumn}, false)
        Me.Relations.Add(Me.relationProveedorescompras)
        Me.relationcomprasarticulos_comprados = New DataRelation("comprasarticulos_comprados", New DataColumn() {Me.tablecompras.Id_CompraColumn}, New DataColumn() {Me.tablearticulos_comprados.IdCompraColumn}, false)
        Me.Relations.Add(Me.relationcomprasarticulos_comprados)
        Me.relationordencompradetalle_ordencompra = New DataRelation("ordencompradetalle_ordencompra", New DataColumn() {Me.tableordencompra.OrdenColumn}, New DataColumn() {Me.tabledetalle_ordencompra.OrdenColumn}, false)
        Me.Relations.Add(Me.relationordencompradetalle_ordencompra)
    End Sub
    
    Private Function ShouldSerializeProveedores() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeordencompra() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializedetalle_ordencompra() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeMonedas() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeMoneda() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeUsuarios() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBodega() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializearticulos_comprados() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializecompras() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub ProveedoresRowChangeEventHandler(ByVal sender As Object, ByVal e As ProveedoresRowChangeEvent)
    
    Public Delegate Sub ordencompraRowChangeEventHandler(ByVal sender As Object, ByVal e As ordencompraRowChangeEvent)
    
    Public Delegate Sub detalle_ordencompraRowChangeEventHandler(ByVal sender As Object, ByVal e As detalle_ordencompraRowChangeEvent)
    
    Public Delegate Sub MonedasRowChangeEventHandler(ByVal sender As Object, ByVal e As MonedasRowChangeEvent)
    
    Public Delegate Sub MonedaRowChangeEventHandler(ByVal sender As Object, ByVal e As MonedaRowChangeEvent)
    
    Public Delegate Sub UsuariosRowChangeEventHandler(ByVal sender As Object, ByVal e As UsuariosRowChangeEvent)
    
    Public Delegate Sub BodegaRowChangeEventHandler(ByVal sender As Object, ByVal e As BodegaRowChangeEvent)
    
    Public Delegate Sub articulos_compradosRowChangeEventHandler(ByVal sender As Object, ByVal e As articulos_compradosRowChangeEvent)
    
    Public Delegate Sub comprasRowChangeEventHandler(ByVal sender As Object, ByVal e As comprasRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProveedoresDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCodigoProv As DataColumn
        
        Private columnCedula As DataColumn
        
        Private columnNombre As DataColumn
        
        Private columnContacto As DataColumn
        
        Private columnTelefono_Cont As DataColumn
        
        Private columnObservaciones As DataColumn
        
        Private columnTelefono1 As DataColumn
        
        Private columnTelefono2 As DataColumn
        
        Private columnFax1 As DataColumn
        
        Private columnFax2 As DataColumn
        
        Private columnEmail As DataColumn
        
        Private columnDireccion As DataColumn
        
        Private columnMontoCredito As DataColumn
        
        Private columnPlazo As DataColumn
        
        Private columnCostoTotal As DataColumn
        
        Private columnImpIncluido As DataColumn
        
        Private columnPedidosMes As DataColumn
        
        Private columnUtilidad_Inventario As DataColumn
        
        Private columnUtilidad_Fija As DataColumn
        
        Friend Sub New()
            MyBase.New("Proveedores")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CodigoProvColumn As DataColumn
            Get
                Return Me.columnCodigoProv
            End Get
        End Property
        
        Friend ReadOnly Property CedulaColumn As DataColumn
            Get
                Return Me.columnCedula
            End Get
        End Property
        
        Friend ReadOnly Property NombreColumn As DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        Friend ReadOnly Property ContactoColumn As DataColumn
            Get
                Return Me.columnContacto
            End Get
        End Property
        
        Friend ReadOnly Property Telefono_ContColumn As DataColumn
            Get
                Return Me.columnTelefono_Cont
            End Get
        End Property
        
        Friend ReadOnly Property ObservacionesColumn As DataColumn
            Get
                Return Me.columnObservaciones
            End Get
        End Property
        
        Friend ReadOnly Property Telefono1Column As DataColumn
            Get
                Return Me.columnTelefono1
            End Get
        End Property
        
        Friend ReadOnly Property Telefono2Column As DataColumn
            Get
                Return Me.columnTelefono2
            End Get
        End Property
        
        Friend ReadOnly Property Fax1Column As DataColumn
            Get
                Return Me.columnFax1
            End Get
        End Property
        
        Friend ReadOnly Property Fax2Column As DataColumn
            Get
                Return Me.columnFax2
            End Get
        End Property
        
        Friend ReadOnly Property EmailColumn As DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        Friend ReadOnly Property DireccionColumn As DataColumn
            Get
                Return Me.columnDireccion
            End Get
        End Property
        
        Friend ReadOnly Property MontoCreditoColumn As DataColumn
            Get
                Return Me.columnMontoCredito
            End Get
        End Property
        
        Friend ReadOnly Property PlazoColumn As DataColumn
            Get
                Return Me.columnPlazo
            End Get
        End Property
        
        Friend ReadOnly Property CostoTotalColumn As DataColumn
            Get
                Return Me.columnCostoTotal
            End Get
        End Property
        
        Friend ReadOnly Property ImpIncluidoColumn As DataColumn
            Get
                Return Me.columnImpIncluido
            End Get
        End Property
        
        Friend ReadOnly Property PedidosMesColumn As DataColumn
            Get
                Return Me.columnPedidosMes
            End Get
        End Property
        
        Friend ReadOnly Property Utilidad_InventarioColumn As DataColumn
            Get
                Return Me.columnUtilidad_Inventario
            End Get
        End Property
        
        Friend ReadOnly Property Utilidad_FijaColumn As DataColumn
            Get
                Return Me.columnUtilidad_Fija
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProveedoresRow
            Get
                Return CType(Me.Rows(index),ProveedoresRow)
            End Get
        End Property
        
        Public Event ProveedoresRowChanged As ProveedoresRowChangeEventHandler
        
        Public Event ProveedoresRowChanging As ProveedoresRowChangeEventHandler
        
        Public Event ProveedoresRowDeleted As ProveedoresRowChangeEventHandler
        
        Public Event ProveedoresRowDeleting As ProveedoresRowChangeEventHandler
        
        Public Overloads Sub AddProveedoresRow(ByVal row As ProveedoresRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddProveedoresRow( _
                    ByVal CodigoProv As Integer,  _
                    ByVal Cedula As String,  _
                    ByVal Nombre As String,  _
                    ByVal Contacto As String,  _
                    ByVal Telefono_Cont As String,  _
                    ByVal Observaciones As String,  _
                    ByVal Telefono1 As String,  _
                    ByVal Telefono2 As String,  _
                    ByVal Fax1 As String,  _
                    ByVal Fax2 As String,  _
                    ByVal Email As String,  _
                    ByVal Direccion As String,  _
                    ByVal MontoCredito As Double,  _
                    ByVal Plazo As Integer,  _
                    ByVal CostoTotal As Boolean,  _
                    ByVal ImpIncluido As Boolean,  _
                    ByVal PedidosMes As Integer,  _
                    ByVal Utilidad_Inventario As Double,  _
                    ByVal Utilidad_Fija As Boolean) As ProveedoresRow
            Dim rowProveedoresRow As ProveedoresRow = CType(Me.NewRow,ProveedoresRow)
            rowProveedoresRow.ItemArray = New Object() {CodigoProv, Cedula, Nombre, Contacto, Telefono_Cont, Observaciones, Telefono1, Telefono2, Fax1, Fax2, Email, Direccion, MontoCredito, Plazo, CostoTotal, ImpIncluido, PedidosMes, Utilidad_Inventario, Utilidad_Fija}
            Me.Rows.Add(rowProveedoresRow)
            Return rowProveedoresRow
        End Function
        
        Public Function FindByCodigoProv(ByVal CodigoProv As Integer) As ProveedoresRow
            Return CType(Me.Rows.Find(New Object() {CodigoProv}),ProveedoresRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ProveedoresDataTable = CType(MyBase.Clone,ProveedoresDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ProveedoresDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCodigoProv = Me.Columns("CodigoProv")
            Me.columnCedula = Me.Columns("Cedula")
            Me.columnNombre = Me.Columns("Nombre")
            Me.columnContacto = Me.Columns("Contacto")
            Me.columnTelefono_Cont = Me.Columns("Telefono_Cont")
            Me.columnObservaciones = Me.Columns("Observaciones")
            Me.columnTelefono1 = Me.Columns("Telefono1")
            Me.columnTelefono2 = Me.Columns("Telefono2")
            Me.columnFax1 = Me.Columns("Fax1")
            Me.columnFax2 = Me.Columns("Fax2")
            Me.columnEmail = Me.Columns("Email")
            Me.columnDireccion = Me.Columns("Direccion")
            Me.columnMontoCredito = Me.Columns("MontoCredito")
            Me.columnPlazo = Me.Columns("Plazo")
            Me.columnCostoTotal = Me.Columns("CostoTotal")
            Me.columnImpIncluido = Me.Columns("ImpIncluido")
            Me.columnPedidosMes = Me.Columns("PedidosMes")
            Me.columnUtilidad_Inventario = Me.Columns("Utilidad_Inventario")
            Me.columnUtilidad_Fija = Me.Columns("Utilidad_Fija")
        End Sub
        
        Private Sub InitClass()
            Me.columnCodigoProv = New DataColumn("CodigoProv", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodigoProv)
            Me.columnCedula = New DataColumn("Cedula", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCedula)
            Me.columnNombre = New DataColumn("Nombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombre)
            Me.columnContacto = New DataColumn("Contacto", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnContacto)
            Me.columnTelefono_Cont = New DataColumn("Telefono_Cont", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTelefono_Cont)
            Me.columnObservaciones = New DataColumn("Observaciones", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnObservaciones)
            Me.columnTelefono1 = New DataColumn("Telefono1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTelefono1)
            Me.columnTelefono2 = New DataColumn("Telefono2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTelefono2)
            Me.columnFax1 = New DataColumn("Fax1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFax1)
            Me.columnFax2 = New DataColumn("Fax2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFax2)
            Me.columnEmail = New DataColumn("Email", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmail)
            Me.columnDireccion = New DataColumn("Direccion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDireccion)
            Me.columnMontoCredito = New DataColumn("MontoCredito", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMontoCredito)
            Me.columnPlazo = New DataColumn("Plazo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPlazo)
            Me.columnCostoTotal = New DataColumn("CostoTotal", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCostoTotal)
            Me.columnImpIncluido = New DataColumn("ImpIncluido", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnImpIncluido)
            Me.columnPedidosMes = New DataColumn("PedidosMes", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPedidosMes)
            Me.columnUtilidad_Inventario = New DataColumn("Utilidad_Inventario", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUtilidad_Inventario)
            Me.columnUtilidad_Fija = New DataColumn("Utilidad_Fija", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUtilidad_Fija)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCodigoProv}, true))
            Me.columnCodigoProv.AllowDBNull = false
            Me.columnCodigoProv.Unique = true
            Me.columnCedula.AllowDBNull = false
            Me.columnNombre.AllowDBNull = false
            Me.columnContacto.AllowDBNull = false
            Me.columnTelefono_Cont.AllowDBNull = false
            Me.columnObservaciones.AllowDBNull = false
            Me.columnTelefono1.AllowDBNull = false
            Me.columnTelefono2.AllowDBNull = false
            Me.columnFax1.AllowDBNull = false
            Me.columnFax2.AllowDBNull = false
            Me.columnEmail.AllowDBNull = false
            Me.columnDireccion.AllowDBNull = false
            Me.columnMontoCredito.AllowDBNull = false
            Me.columnPlazo.AllowDBNull = false
            Me.columnCostoTotal.AllowDBNull = false
            Me.columnImpIncluido.AllowDBNull = false
            Me.columnPedidosMes.AllowDBNull = false
            Me.columnUtilidad_Inventario.AllowDBNull = false
            Me.columnUtilidad_Fija.AllowDBNull = false
        End Sub
        
        Public Function NewProveedoresRow() As ProveedoresRow
            Return CType(Me.NewRow,ProveedoresRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ProveedoresRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ProveedoresRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProveedoresRowChangedEvent) Is Nothing) Then
                RaiseEvent ProveedoresRowChanged(Me, New ProveedoresRowChangeEvent(CType(e.Row,ProveedoresRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProveedoresRowChangingEvent) Is Nothing) Then
                RaiseEvent ProveedoresRowChanging(Me, New ProveedoresRowChangeEvent(CType(e.Row,ProveedoresRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProveedoresRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProveedoresRowDeleted(Me, New ProveedoresRowChangeEvent(CType(e.Row,ProveedoresRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProveedoresRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProveedoresRowDeleting(Me, New ProveedoresRowChangeEvent(CType(e.Row,ProveedoresRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveProveedoresRow(ByVal row As ProveedoresRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProveedoresRow
        Inherits DataRow
        
        Private tableProveedores As ProveedoresDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableProveedores = CType(Me.Table,ProveedoresDataTable)
        End Sub
        
        Public Property CodigoProv As Integer
            Get
                Return CType(Me(Me.tableProveedores.CodigoProvColumn),Integer)
            End Get
            Set
                Me(Me.tableProveedores.CodigoProvColumn) = value
            End Set
        End Property
        
        Public Property Cedula As String
            Get
                Return CType(Me(Me.tableProveedores.CedulaColumn),String)
            End Get
            Set
                Me(Me.tableProveedores.CedulaColumn) = value
            End Set
        End Property
        
        Public Property Nombre As String
            Get
                Return CType(Me(Me.tableProveedores.NombreColumn),String)
            End Get
            Set
                Me(Me.tableProveedores.NombreColumn) = value
            End Set
        End Property
        
        Public Property Contacto As String
            Get
                Return CType(Me(Me.tableProveedores.ContactoColumn),String)
            End Get
            Set
                Me(Me.tableProveedores.ContactoColumn) = value
            End Set
        End Property
        
        Public Property Telefono_Cont As String
            Get
                Return CType(Me(Me.tableProveedores.Telefono_ContColumn),String)
            End Get
            Set
                Me(Me.tableProveedores.Telefono_ContColumn) = value
            End Set
        End Property
        
        Public Property Observaciones As String
            Get
                Return CType(Me(Me.tableProveedores.ObservacionesColumn),String)
            End Get
            Set
                Me(Me.tableProveedores.ObservacionesColumn) = value
            End Set
        End Property
        
        Public Property Telefono1 As String
            Get
                Return CType(Me(Me.tableProveedores.Telefono1Column),String)
            End Get
            Set
                Me(Me.tableProveedores.Telefono1Column) = value
            End Set
        End Property
        
        Public Property Telefono2 As String
            Get
                Return CType(Me(Me.tableProveedores.Telefono2Column),String)
            End Get
            Set
                Me(Me.tableProveedores.Telefono2Column) = value
            End Set
        End Property
        
        Public Property Fax1 As String
            Get
                Return CType(Me(Me.tableProveedores.Fax1Column),String)
            End Get
            Set
                Me(Me.tableProveedores.Fax1Column) = value
            End Set
        End Property
        
        Public Property Fax2 As String
            Get
                Return CType(Me(Me.tableProveedores.Fax2Column),String)
            End Get
            Set
                Me(Me.tableProveedores.Fax2Column) = value
            End Set
        End Property
        
        Public Property Email As String
            Get
                Return CType(Me(Me.tableProveedores.EmailColumn),String)
            End Get
            Set
                Me(Me.tableProveedores.EmailColumn) = value
            End Set
        End Property
        
        Public Property Direccion As String
            Get
                Return CType(Me(Me.tableProveedores.DireccionColumn),String)
            End Get
            Set
                Me(Me.tableProveedores.DireccionColumn) = value
            End Set
        End Property
        
        Public Property MontoCredito As Double
            Get
                Return CType(Me(Me.tableProveedores.MontoCreditoColumn),Double)
            End Get
            Set
                Me(Me.tableProveedores.MontoCreditoColumn) = value
            End Set
        End Property
        
        Public Property Plazo As Integer
            Get
                Return CType(Me(Me.tableProveedores.PlazoColumn),Integer)
            End Get
            Set
                Me(Me.tableProveedores.PlazoColumn) = value
            End Set
        End Property
        
        Public Property CostoTotal As Boolean
            Get
                Return CType(Me(Me.tableProveedores.CostoTotalColumn),Boolean)
            End Get
            Set
                Me(Me.tableProveedores.CostoTotalColumn) = value
            End Set
        End Property
        
        Public Property ImpIncluido As Boolean
            Get
                Return CType(Me(Me.tableProveedores.ImpIncluidoColumn),Boolean)
            End Get
            Set
                Me(Me.tableProveedores.ImpIncluidoColumn) = value
            End Set
        End Property
        
        Public Property PedidosMes As Integer
            Get
                Return CType(Me(Me.tableProveedores.PedidosMesColumn),Integer)
            End Get
            Set
                Me(Me.tableProveedores.PedidosMesColumn) = value
            End Set
        End Property
        
        Public Property Utilidad_Inventario As Double
            Get
                Return CType(Me(Me.tableProveedores.Utilidad_InventarioColumn),Double)
            End Get
            Set
                Me(Me.tableProveedores.Utilidad_InventarioColumn) = value
            End Set
        End Property
        
        Public Property Utilidad_Fija As Boolean
            Get
                Return CType(Me(Me.tableProveedores.Utilidad_FijaColumn),Boolean)
            End Get
            Set
                Me(Me.tableProveedores.Utilidad_FijaColumn) = value
            End Set
        End Property
        
        Public Function GetcomprasRows() As comprasRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Proveedorescompras")),comprasRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ProveedoresRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ProveedoresRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ProveedoresRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ProveedoresRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ordencompraDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnOrden As DataColumn
        
        Private columnProveedor As DataColumn
        
        Private columnNombre As DataColumn
        
        Private columnFecha As DataColumn
        
        Private columncontado As DataColumn
        
        Private columncredito As DataColumn
        
        Private columndiascredito As DataColumn
        
        Private columnPlazo As DataColumn
        
        Private columnDescuento As DataColumn
        
        Private columnImpuesto As DataColumn
        
        Private columnTotal As DataColumn
        
        Private columnObservaciones As DataColumn
        
        Private columnUsuario As DataColumn
        
        Private columnNombreUsuario As DataColumn
        
        Private columnentregar As DataColumn
        
        Private columnCod_Moneda As DataColumn
        
        Private columnSubTotalGravado As DataColumn
        
        Private columnSubTotalExento As DataColumn
        
        Private columnSubTotal As DataColumn
        
        Friend Sub New()
            MyBase.New("ordencompra")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property OrdenColumn As DataColumn
            Get
                Return Me.columnOrden
            End Get
        End Property
        
        Friend ReadOnly Property ProveedorColumn As DataColumn
            Get
                Return Me.columnProveedor
            End Get
        End Property
        
        Friend ReadOnly Property NombreColumn As DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        Friend ReadOnly Property FechaColumn As DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        Friend ReadOnly Property contadoColumn As DataColumn
            Get
                Return Me.columncontado
            End Get
        End Property
        
        Friend ReadOnly Property creditoColumn As DataColumn
            Get
                Return Me.columncredito
            End Get
        End Property
        
        Friend ReadOnly Property diascreditoColumn As DataColumn
            Get
                Return Me.columndiascredito
            End Get
        End Property
        
        Friend ReadOnly Property PlazoColumn As DataColumn
            Get
                Return Me.columnPlazo
            End Get
        End Property
        
        Friend ReadOnly Property DescuentoColumn As DataColumn
            Get
                Return Me.columnDescuento
            End Get
        End Property
        
        Friend ReadOnly Property ImpuestoColumn As DataColumn
            Get
                Return Me.columnImpuesto
            End Get
        End Property
        
        Friend ReadOnly Property TotalColumn As DataColumn
            Get
                Return Me.columnTotal
            End Get
        End Property
        
        Friend ReadOnly Property ObservacionesColumn As DataColumn
            Get
                Return Me.columnObservaciones
            End Get
        End Property
        
        Friend ReadOnly Property UsuarioColumn As DataColumn
            Get
                Return Me.columnUsuario
            End Get
        End Property
        
        Friend ReadOnly Property NombreUsuarioColumn As DataColumn
            Get
                Return Me.columnNombreUsuario
            End Get
        End Property
        
        Friend ReadOnly Property entregarColumn As DataColumn
            Get
                Return Me.columnentregar
            End Get
        End Property
        
        Friend ReadOnly Property Cod_MonedaColumn As DataColumn
            Get
                Return Me.columnCod_Moneda
            End Get
        End Property
        
        Friend ReadOnly Property SubTotalGravadoColumn As DataColumn
            Get
                Return Me.columnSubTotalGravado
            End Get
        End Property
        
        Friend ReadOnly Property SubTotalExentoColumn As DataColumn
            Get
                Return Me.columnSubTotalExento
            End Get
        End Property
        
        Friend ReadOnly Property SubTotalColumn As DataColumn
            Get
                Return Me.columnSubTotal
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ordencompraRow
            Get
                Return CType(Me.Rows(index),ordencompraRow)
            End Get
        End Property
        
        Public Event ordencompraRowChanged As ordencompraRowChangeEventHandler
        
        Public Event ordencompraRowChanging As ordencompraRowChangeEventHandler
        
        Public Event ordencompraRowDeleted As ordencompraRowChangeEventHandler
        
        Public Event ordencompraRowDeleting As ordencompraRowChangeEventHandler
        
        Public Overloads Sub AddordencompraRow(ByVal row As ordencompraRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddordencompraRow( _
                    ByVal Proveedor As Integer,  _
                    ByVal Nombre As String,  _
                    ByVal Fecha As Date,  _
                    ByVal contado As Boolean,  _
                    ByVal credito As Boolean,  _
                    ByVal diascredito As Double,  _
                    ByVal Plazo As Integer,  _
                    ByVal Descuento As Double,  _
                    ByVal Impuesto As Double,  _
                    ByVal Total As Double,  _
                    ByVal Observaciones As String,  _
                    ByVal Usuario As String,  _
                    ByVal NombreUsuario As String,  _
                    ByVal entregar As String,  _
                    ByVal Cod_Moneda As Integer,  _
                    ByVal SubTotalGravado As Double,  _
                    ByVal SubTotalExento As Double,  _
                    ByVal SubTotal As Double) As ordencompraRow
            Dim rowordencompraRow As ordencompraRow = CType(Me.NewRow,ordencompraRow)
            rowordencompraRow.ItemArray = New Object() {Nothing, Proveedor, Nombre, Fecha, contado, credito, diascredito, Plazo, Descuento, Impuesto, Total, Observaciones, Usuario, NombreUsuario, entregar, Cod_Moneda, SubTotalGravado, SubTotalExento, SubTotal}
            Me.Rows.Add(rowordencompraRow)
            Return rowordencompraRow
        End Function
        
        Public Function FindByOrden(ByVal Orden As Long) As ordencompraRow
            Return CType(Me.Rows.Find(New Object() {Orden}),ordencompraRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ordencompraDataTable = CType(MyBase.Clone,ordencompraDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ordencompraDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnOrden = Me.Columns("Orden")
            Me.columnProveedor = Me.Columns("Proveedor")
            Me.columnNombre = Me.Columns("Nombre")
            Me.columnFecha = Me.Columns("Fecha")
            Me.columncontado = Me.Columns("contado")
            Me.columncredito = Me.Columns("credito")
            Me.columndiascredito = Me.Columns("diascredito")
            Me.columnPlazo = Me.Columns("Plazo")
            Me.columnDescuento = Me.Columns("Descuento")
            Me.columnImpuesto = Me.Columns("Impuesto")
            Me.columnTotal = Me.Columns("Total")
            Me.columnObservaciones = Me.Columns("Observaciones")
            Me.columnUsuario = Me.Columns("Usuario")
            Me.columnNombreUsuario = Me.Columns("NombreUsuario")
            Me.columnentregar = Me.Columns("entregar")
            Me.columnCod_Moneda = Me.Columns("Cod_Moneda")
            Me.columnSubTotalGravado = Me.Columns("SubTotalGravado")
            Me.columnSubTotalExento = Me.Columns("SubTotalExento")
            Me.columnSubTotal = Me.Columns("SubTotal")
        End Sub
        
        Private Sub InitClass()
            Me.columnOrden = New DataColumn("Orden", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrden)
            Me.columnProveedor = New DataColumn("Proveedor", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnProveedor)
            Me.columnNombre = New DataColumn("Nombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombre)
            Me.columnFecha = New DataColumn("Fecha", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha)
            Me.columncontado = New DataColumn("contado", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncontado)
            Me.columncredito = New DataColumn("credito", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncredito)
            Me.columndiascredito = New DataColumn("diascredito", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndiascredito)
            Me.columnPlazo = New DataColumn("Plazo", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPlazo)
            Me.columnDescuento = New DataColumn("Descuento", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescuento)
            Me.columnImpuesto = New DataColumn("Impuesto", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnImpuesto)
            Me.columnTotal = New DataColumn("Total", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotal)
            Me.columnObservaciones = New DataColumn("Observaciones", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnObservaciones)
            Me.columnUsuario = New DataColumn("Usuario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUsuario)
            Me.columnNombreUsuario = New DataColumn("NombreUsuario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombreUsuario)
            Me.columnentregar = New DataColumn("entregar", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnentregar)
            Me.columnCod_Moneda = New DataColumn("Cod_Moneda", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCod_Moneda)
            Me.columnSubTotalGravado = New DataColumn("SubTotalGravado", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSubTotalGravado)
            Me.columnSubTotalExento = New DataColumn("SubTotalExento", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSubTotalExento)
            Me.columnSubTotal = New DataColumn("SubTotal", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSubTotal)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnOrden}, true))
            Me.columnOrden.AutoIncrement = true
            Me.columnOrden.AllowDBNull = false
            Me.columnOrden.ReadOnly = true
            Me.columnOrden.Unique = true
            Me.columnProveedor.AllowDBNull = false
            Me.columnNombre.AllowDBNull = false
            Me.columnFecha.AllowDBNull = false
            Me.columncontado.AllowDBNull = false
            Me.columncredito.AllowDBNull = false
            Me.columndiascredito.AllowDBNull = false
            Me.columnPlazo.AllowDBNull = false
            Me.columnDescuento.AllowDBNull = false
            Me.columnImpuesto.AllowDBNull = false
            Me.columnTotal.AllowDBNull = false
            Me.columnObservaciones.AllowDBNull = false
            Me.columnUsuario.AllowDBNull = false
            Me.columnNombreUsuario.AllowDBNull = false
            Me.columnentregar.AllowDBNull = false
            Me.columnCod_Moneda.AllowDBNull = false
            Me.columnSubTotalGravado.AllowDBNull = false
            Me.columnSubTotalExento.AllowDBNull = false
            Me.columnSubTotal.AllowDBNull = false
        End Sub
        
        Public Function NewordencompraRow() As ordencompraRow
            Return CType(Me.NewRow,ordencompraRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ordencompraRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ordencompraRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ordencompraRowChangedEvent) Is Nothing) Then
                RaiseEvent ordencompraRowChanged(Me, New ordencompraRowChangeEvent(CType(e.Row,ordencompraRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ordencompraRowChangingEvent) Is Nothing) Then
                RaiseEvent ordencompraRowChanging(Me, New ordencompraRowChangeEvent(CType(e.Row,ordencompraRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ordencompraRowDeletedEvent) Is Nothing) Then
                RaiseEvent ordencompraRowDeleted(Me, New ordencompraRowChangeEvent(CType(e.Row,ordencompraRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ordencompraRowDeletingEvent) Is Nothing) Then
                RaiseEvent ordencompraRowDeleting(Me, New ordencompraRowChangeEvent(CType(e.Row,ordencompraRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveordencompraRow(ByVal row As ordencompraRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ordencompraRow
        Inherits DataRow
        
        Private tableordencompra As ordencompraDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableordencompra = CType(Me.Table,ordencompraDataTable)
        End Sub
        
        Public Property Orden As Long
            Get
                Return CType(Me(Me.tableordencompra.OrdenColumn),Long)
            End Get
            Set
                Me(Me.tableordencompra.OrdenColumn) = value
            End Set
        End Property
        
        Public Property Proveedor As Integer
            Get
                Return CType(Me(Me.tableordencompra.ProveedorColumn),Integer)
            End Get
            Set
                Me(Me.tableordencompra.ProveedorColumn) = value
            End Set
        End Property
        
        Public Property Nombre As String
            Get
                Return CType(Me(Me.tableordencompra.NombreColumn),String)
            End Get
            Set
                Me(Me.tableordencompra.NombreColumn) = value
            End Set
        End Property
        
        Public Property Fecha As Date
            Get
                Return CType(Me(Me.tableordencompra.FechaColumn),Date)
            End Get
            Set
                Me(Me.tableordencompra.FechaColumn) = value
            End Set
        End Property
        
        Public Property contado As Boolean
            Get
                Return CType(Me(Me.tableordencompra.contadoColumn),Boolean)
            End Get
            Set
                Me(Me.tableordencompra.contadoColumn) = value
            End Set
        End Property
        
        Public Property credito As Boolean
            Get
                Return CType(Me(Me.tableordencompra.creditoColumn),Boolean)
            End Get
            Set
                Me(Me.tableordencompra.creditoColumn) = value
            End Set
        End Property
        
        Public Property diascredito As Double
            Get
                Return CType(Me(Me.tableordencompra.diascreditoColumn),Double)
            End Get
            Set
                Me(Me.tableordencompra.diascreditoColumn) = value
            End Set
        End Property
        
        Public Property Plazo As Integer
            Get
                Return CType(Me(Me.tableordencompra.PlazoColumn),Integer)
            End Get
            Set
                Me(Me.tableordencompra.PlazoColumn) = value
            End Set
        End Property
        
        Public Property Descuento As Double
            Get
                Return CType(Me(Me.tableordencompra.DescuentoColumn),Double)
            End Get
            Set
                Me(Me.tableordencompra.DescuentoColumn) = value
            End Set
        End Property
        
        Public Property Impuesto As Double
            Get
                Return CType(Me(Me.tableordencompra.ImpuestoColumn),Double)
            End Get
            Set
                Me(Me.tableordencompra.ImpuestoColumn) = value
            End Set
        End Property
        
        Public Property Total As Double
            Get
                Return CType(Me(Me.tableordencompra.TotalColumn),Double)
            End Get
            Set
                Me(Me.tableordencompra.TotalColumn) = value
            End Set
        End Property
        
        Public Property Observaciones As String
            Get
                Return CType(Me(Me.tableordencompra.ObservacionesColumn),String)
            End Get
            Set
                Me(Me.tableordencompra.ObservacionesColumn) = value
            End Set
        End Property
        
        Public Property Usuario As String
            Get
                Return CType(Me(Me.tableordencompra.UsuarioColumn),String)
            End Get
            Set
                Me(Me.tableordencompra.UsuarioColumn) = value
            End Set
        End Property
        
        Public Property NombreUsuario As String
            Get
                Return CType(Me(Me.tableordencompra.NombreUsuarioColumn),String)
            End Get
            Set
                Me(Me.tableordencompra.NombreUsuarioColumn) = value
            End Set
        End Property
        
        Public Property entregar As String
            Get
                Return CType(Me(Me.tableordencompra.entregarColumn),String)
            End Get
            Set
                Me(Me.tableordencompra.entregarColumn) = value
            End Set
        End Property
        
        Public Property Cod_Moneda As Integer
            Get
                Return CType(Me(Me.tableordencompra.Cod_MonedaColumn),Integer)
            End Get
            Set
                Me(Me.tableordencompra.Cod_MonedaColumn) = value
            End Set
        End Property
        
        Public Property SubTotalGravado As Double
            Get
                Return CType(Me(Me.tableordencompra.SubTotalGravadoColumn),Double)
            End Get
            Set
                Me(Me.tableordencompra.SubTotalGravadoColumn) = value
            End Set
        End Property
        
        Public Property SubTotalExento As Double
            Get
                Return CType(Me(Me.tableordencompra.SubTotalExentoColumn),Double)
            End Get
            Set
                Me(Me.tableordencompra.SubTotalExentoColumn) = value
            End Set
        End Property
        
        Public Property SubTotal As Double
            Get
                Return CType(Me(Me.tableordencompra.SubTotalColumn),Double)
            End Get
            Set
                Me(Me.tableordencompra.SubTotalColumn) = value
            End Set
        End Property
        
        Public Function Getdetalle_ordencompraRows() As detalle_ordencompraRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("ordencompradetalle_ordencompra")),detalle_ordencompraRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ordencompraRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ordencompraRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ordencompraRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ordencompraRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class detalle_ordencompraDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnOrden As DataColumn
        
        Private columnCodigo As DataColumn
        
        Private columnDescripcion As DataColumn
        
        Private columnCostoUnitario As DataColumn
        
        Private columnCantidad As DataColumn
        
        Private columnTotalCompra As DataColumn
        
        Private columnPorc_Descuento As DataColumn
        
        Private columnDescuento As DataColumn
        
        Private columnPorc_Impuesto As DataColumn
        
        Private columnimpuesto As DataColumn
        
        Private columnOtrosCargos As DataColumn
        
        Private columnMonto_Flete As DataColumn
        
        Private columnCosto As DataColumn
        
        Private columnGravado As DataColumn
        
        Private columnExento As DataColumn
        
        Friend Sub New()
            MyBase.New("detalle_ordencompra")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property OrdenColumn As DataColumn
            Get
                Return Me.columnOrden
            End Get
        End Property
        
        Friend ReadOnly Property CodigoColumn As DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        Friend ReadOnly Property DescripcionColumn As DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        Friend ReadOnly Property CostoUnitarioColumn As DataColumn
            Get
                Return Me.columnCostoUnitario
            End Get
        End Property
        
        Friend ReadOnly Property CantidadColumn As DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        Friend ReadOnly Property TotalCompraColumn As DataColumn
            Get
                Return Me.columnTotalCompra
            End Get
        End Property
        
        Friend ReadOnly Property Porc_DescuentoColumn As DataColumn
            Get
                Return Me.columnPorc_Descuento
            End Get
        End Property
        
        Friend ReadOnly Property DescuentoColumn As DataColumn
            Get
                Return Me.columnDescuento
            End Get
        End Property
        
        Friend ReadOnly Property Porc_ImpuestoColumn As DataColumn
            Get
                Return Me.columnPorc_Impuesto
            End Get
        End Property
        
        Friend ReadOnly Property impuestoColumn As DataColumn
            Get
                Return Me.columnimpuesto
            End Get
        End Property
        
        Friend ReadOnly Property OtrosCargosColumn As DataColumn
            Get
                Return Me.columnOtrosCargos
            End Get
        End Property
        
        Friend ReadOnly Property Monto_FleteColumn As DataColumn
            Get
                Return Me.columnMonto_Flete
            End Get
        End Property
        
        Friend ReadOnly Property CostoColumn As DataColumn
            Get
                Return Me.columnCosto
            End Get
        End Property
        
        Friend ReadOnly Property GravadoColumn As DataColumn
            Get
                Return Me.columnGravado
            End Get
        End Property
        
        Friend ReadOnly Property ExentoColumn As DataColumn
            Get
                Return Me.columnExento
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As detalle_ordencompraRow
            Get
                Return CType(Me.Rows(index),detalle_ordencompraRow)
            End Get
        End Property
        
        Public Event detalle_ordencompraRowChanged As detalle_ordencompraRowChangeEventHandler
        
        Public Event detalle_ordencompraRowChanging As detalle_ordencompraRowChangeEventHandler
        
        Public Event detalle_ordencompraRowDeleted As detalle_ordencompraRowChangeEventHandler
        
        Public Event detalle_ordencompraRowDeleting As detalle_ordencompraRowChangeEventHandler
        
        Public Overloads Sub Adddetalle_ordencompraRow(ByVal row As detalle_ordencompraRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Adddetalle_ordencompraRow(ByVal parentordencompraRowByordencompradetalle_ordencompra As ordencompraRow, ByVal Codigo As Long, ByVal Descripcion As String, ByVal CostoUnitario As Double, ByVal Cantidad As Double, ByVal TotalCompra As Double, ByVal Porc_Descuento As Double, ByVal Descuento As Double, ByVal Porc_Impuesto As Double, ByVal impuesto As Double, ByVal OtrosCargos As Double, ByVal Monto_Flete As Double, ByVal Costo As Double, ByVal Gravado As Double, ByVal Exento As Double) As detalle_ordencompraRow
            Dim rowdetalle_ordencompraRow As detalle_ordencompraRow = CType(Me.NewRow,detalle_ordencompraRow)
            rowdetalle_ordencompraRow.ItemArray = New Object() {Nothing, parentordencompraRowByordencompradetalle_ordencompra(0), Codigo, Descripcion, CostoUnitario, Cantidad, TotalCompra, Porc_Descuento, Descuento, Porc_Impuesto, impuesto, OtrosCargos, Monto_Flete, Costo, Gravado, Exento}
            Me.Rows.Add(rowdetalle_ordencompraRow)
            Return rowdetalle_ordencompraRow
        End Function
        
        Public Function FindById(ByVal Id As Integer) As detalle_ordencompraRow
            Return CType(Me.Rows.Find(New Object() {Id}),detalle_ordencompraRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As detalle_ordencompraDataTable = CType(MyBase.Clone,detalle_ordencompraDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New detalle_ordencompraDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnOrden = Me.Columns("Orden")
            Me.columnCodigo = Me.Columns("Codigo")
            Me.columnDescripcion = Me.Columns("Descripcion")
            Me.columnCostoUnitario = Me.Columns("CostoUnitario")
            Me.columnCantidad = Me.Columns("Cantidad")
            Me.columnTotalCompra = Me.Columns("TotalCompra")
            Me.columnPorc_Descuento = Me.Columns("Porc_Descuento")
            Me.columnDescuento = Me.Columns("Descuento")
            Me.columnPorc_Impuesto = Me.Columns("Porc_Impuesto")
            Me.columnimpuesto = Me.Columns("impuesto")
            Me.columnOtrosCargos = Me.Columns("OtrosCargos")
            Me.columnMonto_Flete = Me.Columns("Monto_Flete")
            Me.columnCosto = Me.Columns("Costo")
            Me.columnGravado = Me.Columns("Gravado")
            Me.columnExento = Me.Columns("Exento")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnOrden = New DataColumn("Orden", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrden)
            Me.columnCodigo = New DataColumn("Codigo", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodigo)
            Me.columnDescripcion = New DataColumn("Descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcion)
            Me.columnCostoUnitario = New DataColumn("CostoUnitario", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCostoUnitario)
            Me.columnCantidad = New DataColumn("Cantidad", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCantidad)
            Me.columnTotalCompra = New DataColumn("TotalCompra", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotalCompra)
            Me.columnPorc_Descuento = New DataColumn("Porc_Descuento", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPorc_Descuento)
            Me.columnDescuento = New DataColumn("Descuento", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescuento)
            Me.columnPorc_Impuesto = New DataColumn("Porc_Impuesto", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPorc_Impuesto)
            Me.columnimpuesto = New DataColumn("impuesto", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnimpuesto)
            Me.columnOtrosCargos = New DataColumn("OtrosCargos", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOtrosCargos)
            Me.columnMonto_Flete = New DataColumn("Monto_Flete", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto_Flete)
            Me.columnCosto = New DataColumn("Costo", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCosto)
            Me.columnGravado = New DataColumn("Gravado", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGravado)
            Me.columnExento = New DataColumn("Exento", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExento)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
            Me.columnId.Unique = true
            Me.columnOrden.AllowDBNull = false
            Me.columnCodigo.AllowDBNull = false
            Me.columnDescripcion.AllowDBNull = false
            Me.columnCostoUnitario.AllowDBNull = false
            Me.columnCantidad.AllowDBNull = false
            Me.columnTotalCompra.AllowDBNull = false
            Me.columnPorc_Descuento.AllowDBNull = false
            Me.columnDescuento.AllowDBNull = false
            Me.columnPorc_Impuesto.AllowDBNull = false
            Me.columnimpuesto.AllowDBNull = false
            Me.columnOtrosCargos.AllowDBNull = false
            Me.columnMonto_Flete.AllowDBNull = false
            Me.columnCosto.AllowDBNull = false
            Me.columnGravado.AllowDBNull = false
            Me.columnExento.AllowDBNull = false
        End Sub
        
        Public Function Newdetalle_ordencompraRow() As detalle_ordencompraRow
            Return CType(Me.NewRow,detalle_ordencompraRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New detalle_ordencompraRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(detalle_ordencompraRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.detalle_ordencompraRowChangedEvent) Is Nothing) Then
                RaiseEvent detalle_ordencompraRowChanged(Me, New detalle_ordencompraRowChangeEvent(CType(e.Row,detalle_ordencompraRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.detalle_ordencompraRowChangingEvent) Is Nothing) Then
                RaiseEvent detalle_ordencompraRowChanging(Me, New detalle_ordencompraRowChangeEvent(CType(e.Row,detalle_ordencompraRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.detalle_ordencompraRowDeletedEvent) Is Nothing) Then
                RaiseEvent detalle_ordencompraRowDeleted(Me, New detalle_ordencompraRowChangeEvent(CType(e.Row,detalle_ordencompraRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.detalle_ordencompraRowDeletingEvent) Is Nothing) Then
                RaiseEvent detalle_ordencompraRowDeleting(Me, New detalle_ordencompraRowChangeEvent(CType(e.Row,detalle_ordencompraRow), e.Action))
            End If
        End Sub
        
        Public Sub Removedetalle_ordencompraRow(ByVal row As detalle_ordencompraRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class detalle_ordencompraRow
        Inherits DataRow
        
        Private tabledetalle_ordencompra As detalle_ordencompraDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabledetalle_ordencompra = CType(Me.Table,detalle_ordencompraDataTable)
        End Sub
        
        Public Property Id As Integer
            Get
                Return CType(Me(Me.tabledetalle_ordencompra.IdColumn),Integer)
            End Get
            Set
                Me(Me.tabledetalle_ordencompra.IdColumn) = value
            End Set
        End Property
        
        Public Property Orden As Long
            Get
                Return CType(Me(Me.tabledetalle_ordencompra.OrdenColumn),Long)
            End Get
            Set
                Me(Me.tabledetalle_ordencompra.OrdenColumn) = value
            End Set
        End Property
        
        Public Property Codigo As Long
            Get
                Return CType(Me(Me.tabledetalle_ordencompra.CodigoColumn),Long)
            End Get
            Set
                Me(Me.tabledetalle_ordencompra.CodigoColumn) = value
            End Set
        End Property
        
        Public Property Descripcion As String
            Get
                Return CType(Me(Me.tabledetalle_ordencompra.DescripcionColumn),String)
            End Get
            Set
                Me(Me.tabledetalle_ordencompra.DescripcionColumn) = value
            End Set
        End Property
        
        Public Property CostoUnitario As Double
            Get
                Return CType(Me(Me.tabledetalle_ordencompra.CostoUnitarioColumn),Double)
            End Get
            Set
                Me(Me.tabledetalle_ordencompra.CostoUnitarioColumn) = value
            End Set
        End Property
        
        Public Property Cantidad As Double
            Get
                Return CType(Me(Me.tabledetalle_ordencompra.CantidadColumn),Double)
            End Get
            Set
                Me(Me.tabledetalle_ordencompra.CantidadColumn) = value
            End Set
        End Property
        
        Public Property TotalCompra As Double
            Get
                Return CType(Me(Me.tabledetalle_ordencompra.TotalCompraColumn),Double)
            End Get
            Set
                Me(Me.tabledetalle_ordencompra.TotalCompraColumn) = value
            End Set
        End Property
        
        Public Property Porc_Descuento As Double
            Get
                Return CType(Me(Me.tabledetalle_ordencompra.Porc_DescuentoColumn),Double)
            End Get
            Set
                Me(Me.tabledetalle_ordencompra.Porc_DescuentoColumn) = value
            End Set
        End Property
        
        Public Property Descuento As Double
            Get
                Return CType(Me(Me.tabledetalle_ordencompra.DescuentoColumn),Double)
            End Get
            Set
                Me(Me.tabledetalle_ordencompra.DescuentoColumn) = value
            End Set
        End Property
        
        Public Property Porc_Impuesto As Double
            Get
                Return CType(Me(Me.tabledetalle_ordencompra.Porc_ImpuestoColumn),Double)
            End Get
            Set
                Me(Me.tabledetalle_ordencompra.Porc_ImpuestoColumn) = value
            End Set
        End Property
        
        Public Property impuesto As Double
            Get
                Return CType(Me(Me.tabledetalle_ordencompra.impuestoColumn),Double)
            End Get
            Set
                Me(Me.tabledetalle_ordencompra.impuestoColumn) = value
            End Set
        End Property
        
        Public Property OtrosCargos As Double
            Get
                Return CType(Me(Me.tabledetalle_ordencompra.OtrosCargosColumn),Double)
            End Get
            Set
                Me(Me.tabledetalle_ordencompra.OtrosCargosColumn) = value
            End Set
        End Property
        
        Public Property Monto_Flete As Double
            Get
                Return CType(Me(Me.tabledetalle_ordencompra.Monto_FleteColumn),Double)
            End Get
            Set
                Me(Me.tabledetalle_ordencompra.Monto_FleteColumn) = value
            End Set
        End Property
        
        Public Property Costo As Double
            Get
                Return CType(Me(Me.tabledetalle_ordencompra.CostoColumn),Double)
            End Get
            Set
                Me(Me.tabledetalle_ordencompra.CostoColumn) = value
            End Set
        End Property
        
        Public Property Gravado As Double
            Get
                Return CType(Me(Me.tabledetalle_ordencompra.GravadoColumn),Double)
            End Get
            Set
                Me(Me.tabledetalle_ordencompra.GravadoColumn) = value
            End Set
        End Property
        
        Public Property Exento As Double
            Get
                Return CType(Me(Me.tabledetalle_ordencompra.ExentoColumn),Double)
            End Get
            Set
                Me(Me.tabledetalle_ordencompra.ExentoColumn) = value
            End Set
        End Property
        
        Public Property ordencompraRow As ordencompraRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ordencompradetalle_ordencompra")),ordencompraRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ordencompradetalle_ordencompra"))
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class detalle_ordencompraRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As detalle_ordencompraRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As detalle_ordencompraRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As detalle_ordencompraRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MonedasDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCodMoneda As DataColumn
        
        Private columnMonedaNombre As DataColumn
        
        Private columnValorVenta As DataColumn
        
        Private columnValorCompra As DataColumn
        
        Private columnSimbolo As DataColumn
        
        Friend Sub New()
            MyBase.New("Monedas")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CodMonedaColumn As DataColumn
            Get
                Return Me.columnCodMoneda
            End Get
        End Property
        
        Friend ReadOnly Property MonedaNombreColumn As DataColumn
            Get
                Return Me.columnMonedaNombre
            End Get
        End Property
        
        Friend ReadOnly Property ValorVentaColumn As DataColumn
            Get
                Return Me.columnValorVenta
            End Get
        End Property
        
        Friend ReadOnly Property ValorCompraColumn As DataColumn
            Get
                Return Me.columnValorCompra
            End Get
        End Property
        
        Friend ReadOnly Property SimboloColumn As DataColumn
            Get
                Return Me.columnSimbolo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MonedasRow
            Get
                Return CType(Me.Rows(index),MonedasRow)
            End Get
        End Property
        
        Public Event MonedasRowChanged As MonedasRowChangeEventHandler
        
        Public Event MonedasRowChanging As MonedasRowChangeEventHandler
        
        Public Event MonedasRowDeleted As MonedasRowChangeEventHandler
        
        Public Event MonedasRowDeleting As MonedasRowChangeEventHandler
        
        Public Overloads Sub AddMonedasRow(ByVal row As MonedasRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMonedasRow(ByVal CodMoneda As Integer, ByVal MonedaNombre As String, ByVal ValorVenta As Double, ByVal ValorCompra As Double, ByVal Simbolo As String) As MonedasRow
            Dim rowMonedasRow As MonedasRow = CType(Me.NewRow,MonedasRow)
            rowMonedasRow.ItemArray = New Object() {CodMoneda, MonedaNombre, ValorVenta, ValorCompra, Simbolo}
            Me.Rows.Add(rowMonedasRow)
            Return rowMonedasRow
        End Function
        
        Public Function FindByCodMoneda(ByVal CodMoneda As Integer) As MonedasRow
            Return CType(Me.Rows.Find(New Object() {CodMoneda}),MonedasRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MonedasDataTable = CType(MyBase.Clone,MonedasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MonedasDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCodMoneda = Me.Columns("CodMoneda")
            Me.columnMonedaNombre = Me.Columns("MonedaNombre")
            Me.columnValorVenta = Me.Columns("ValorVenta")
            Me.columnValorCompra = Me.Columns("ValorCompra")
            Me.columnSimbolo = Me.Columns("Simbolo")
        End Sub
        
        Private Sub InitClass()
            Me.columnCodMoneda = New DataColumn("CodMoneda", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodMoneda)
            Me.columnMonedaNombre = New DataColumn("MonedaNombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonedaNombre)
            Me.columnValorVenta = New DataColumn("ValorVenta", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValorVenta)
            Me.columnValorCompra = New DataColumn("ValorCompra", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValorCompra)
            Me.columnSimbolo = New DataColumn("Simbolo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSimbolo)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCodMoneda}, true))
            Me.columnCodMoneda.AllowDBNull = false
            Me.columnCodMoneda.Unique = true
            Me.columnMonedaNombre.AllowDBNull = false
            Me.columnValorVenta.AllowDBNull = false
            Me.columnValorCompra.AllowDBNull = false
            Me.columnSimbolo.AllowDBNull = false
        End Sub
        
        Public Function NewMonedasRow() As MonedasRow
            Return CType(Me.NewRow,MonedasRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MonedasRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MonedasRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MonedasRowChangedEvent) Is Nothing) Then
                RaiseEvent MonedasRowChanged(Me, New MonedasRowChangeEvent(CType(e.Row,MonedasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MonedasRowChangingEvent) Is Nothing) Then
                RaiseEvent MonedasRowChanging(Me, New MonedasRowChangeEvent(CType(e.Row,MonedasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MonedasRowDeletedEvent) Is Nothing) Then
                RaiseEvent MonedasRowDeleted(Me, New MonedasRowChangeEvent(CType(e.Row,MonedasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MonedasRowDeletingEvent) Is Nothing) Then
                RaiseEvent MonedasRowDeleting(Me, New MonedasRowChangeEvent(CType(e.Row,MonedasRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMonedasRow(ByVal row As MonedasRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MonedasRow
        Inherits DataRow
        
        Private tableMonedas As MonedasDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMonedas = CType(Me.Table,MonedasDataTable)
        End Sub
        
        Public Property CodMoneda As Integer
            Get
                Return CType(Me(Me.tableMonedas.CodMonedaColumn),Integer)
            End Get
            Set
                Me(Me.tableMonedas.CodMonedaColumn) = value
            End Set
        End Property
        
        Public Property MonedaNombre As String
            Get
                Return CType(Me(Me.tableMonedas.MonedaNombreColumn),String)
            End Get
            Set
                Me(Me.tableMonedas.MonedaNombreColumn) = value
            End Set
        End Property
        
        Public Property ValorVenta As Double
            Get
                Return CType(Me(Me.tableMonedas.ValorVentaColumn),Double)
            End Get
            Set
                Me(Me.tableMonedas.ValorVentaColumn) = value
            End Set
        End Property
        
        Public Property ValorCompra As Double
            Get
                Return CType(Me(Me.tableMonedas.ValorCompraColumn),Double)
            End Get
            Set
                Me(Me.tableMonedas.ValorCompraColumn) = value
            End Set
        End Property
        
        Public Property Simbolo As String
            Get
                Return CType(Me(Me.tableMonedas.SimboloColumn),String)
            End Get
            Set
                Me(Me.tableMonedas.SimboloColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MonedasRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MonedasRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MonedasRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MonedasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MonedaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCodMoneda As DataColumn
        
        Private columnMonedaNombre As DataColumn
        
        Private columnValorVenta As DataColumn
        
        Private columnValorCompra As DataColumn
        
        Private columnSimbolo As DataColumn
        
        Friend Sub New()
            MyBase.New("Moneda")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CodMonedaColumn As DataColumn
            Get
                Return Me.columnCodMoneda
            End Get
        End Property
        
        Friend ReadOnly Property MonedaNombreColumn As DataColumn
            Get
                Return Me.columnMonedaNombre
            End Get
        End Property
        
        Friend ReadOnly Property ValorVentaColumn As DataColumn
            Get
                Return Me.columnValorVenta
            End Get
        End Property
        
        Friend ReadOnly Property ValorCompraColumn As DataColumn
            Get
                Return Me.columnValorCompra
            End Get
        End Property
        
        Friend ReadOnly Property SimboloColumn As DataColumn
            Get
                Return Me.columnSimbolo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MonedaRow
            Get
                Return CType(Me.Rows(index),MonedaRow)
            End Get
        End Property
        
        Public Event MonedaRowChanged As MonedaRowChangeEventHandler
        
        Public Event MonedaRowChanging As MonedaRowChangeEventHandler
        
        Public Event MonedaRowDeleted As MonedaRowChangeEventHandler
        
        Public Event MonedaRowDeleting As MonedaRowChangeEventHandler
        
        Public Overloads Sub AddMonedaRow(ByVal row As MonedaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMonedaRow(ByVal MonedaNombre As String, ByVal ValorVenta As Double, ByVal ValorCompra As Double, ByVal Simbolo As String) As MonedaRow
            Dim rowMonedaRow As MonedaRow = CType(Me.NewRow,MonedaRow)
            rowMonedaRow.ItemArray = New Object() {Nothing, MonedaNombre, ValorVenta, ValorCompra, Simbolo}
            Me.Rows.Add(rowMonedaRow)
            Return rowMonedaRow
        End Function
        
        Public Function FindByCodMoneda(ByVal CodMoneda As Integer) As MonedaRow
            Return CType(Me.Rows.Find(New Object() {CodMoneda}),MonedaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MonedaDataTable = CType(MyBase.Clone,MonedaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MonedaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCodMoneda = Me.Columns("CodMoneda")
            Me.columnMonedaNombre = Me.Columns("MonedaNombre")
            Me.columnValorVenta = Me.Columns("ValorVenta")
            Me.columnValorCompra = Me.Columns("ValorCompra")
            Me.columnSimbolo = Me.Columns("Simbolo")
        End Sub
        
        Private Sub InitClass()
            Me.columnCodMoneda = New DataColumn("CodMoneda", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodMoneda)
            Me.columnMonedaNombre = New DataColumn("MonedaNombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonedaNombre)
            Me.columnValorVenta = New DataColumn("ValorVenta", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValorVenta)
            Me.columnValorCompra = New DataColumn("ValorCompra", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValorCompra)
            Me.columnSimbolo = New DataColumn("Simbolo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSimbolo)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCodMoneda}, true))
            Me.columnCodMoneda.AutoIncrement = true
            Me.columnCodMoneda.AllowDBNull = false
            Me.columnCodMoneda.ReadOnly = true
            Me.columnCodMoneda.Unique = true
            Me.columnMonedaNombre.AllowDBNull = false
            Me.columnValorVenta.AllowDBNull = false
            Me.columnValorCompra.AllowDBNull = false
            Me.columnSimbolo.AllowDBNull = false
        End Sub
        
        Public Function NewMonedaRow() As MonedaRow
            Return CType(Me.NewRow,MonedaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MonedaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MonedaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MonedaRowChangedEvent) Is Nothing) Then
                RaiseEvent MonedaRowChanged(Me, New MonedaRowChangeEvent(CType(e.Row,MonedaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MonedaRowChangingEvent) Is Nothing) Then
                RaiseEvent MonedaRowChanging(Me, New MonedaRowChangeEvent(CType(e.Row,MonedaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MonedaRowDeletedEvent) Is Nothing) Then
                RaiseEvent MonedaRowDeleted(Me, New MonedaRowChangeEvent(CType(e.Row,MonedaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MonedaRowDeletingEvent) Is Nothing) Then
                RaiseEvent MonedaRowDeleting(Me, New MonedaRowChangeEvent(CType(e.Row,MonedaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMonedaRow(ByVal row As MonedaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MonedaRow
        Inherits DataRow
        
        Private tableMoneda As MonedaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMoneda = CType(Me.Table,MonedaDataTable)
        End Sub
        
        Public Property CodMoneda As Integer
            Get
                Return CType(Me(Me.tableMoneda.CodMonedaColumn),Integer)
            End Get
            Set
                Me(Me.tableMoneda.CodMonedaColumn) = value
            End Set
        End Property
        
        Public Property MonedaNombre As String
            Get
                Return CType(Me(Me.tableMoneda.MonedaNombreColumn),String)
            End Get
            Set
                Me(Me.tableMoneda.MonedaNombreColumn) = value
            End Set
        End Property
        
        Public Property ValorVenta As Double
            Get
                Return CType(Me(Me.tableMoneda.ValorVentaColumn),Double)
            End Get
            Set
                Me(Me.tableMoneda.ValorVentaColumn) = value
            End Set
        End Property
        
        Public Property ValorCompra As Double
            Get
                Return CType(Me(Me.tableMoneda.ValorCompraColumn),Double)
            End Get
            Set
                Me(Me.tableMoneda.ValorCompraColumn) = value
            End Set
        End Property
        
        Public Property Simbolo As String
            Get
                Return CType(Me(Me.tableMoneda.SimboloColumn),String)
            End Get
            Set
                Me(Me.tableMoneda.SimboloColumn) = value
            End Set
        End Property
        
        Public Function GetcomprasRows() As comprasRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Monedacompras")),comprasRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MonedaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MonedaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MonedaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MonedaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UsuariosDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId_Usuario As DataColumn
        
        Private columnNombre As DataColumn
        
        Private columnClave_Interna As DataColumn
        
        Private columnClave_Entrada As DataColumn
        
        Private columnPerfil As DataColumn
        
        Private columnFoto As DataColumn
        
        Private columnIniciales As DataColumn
        
        Private columnCedula As DataColumn
        
        Private columnCambiarPrecio As DataColumn
        
        Private columnPorc_Precio As DataColumn
        
        Private columnAplicar_Desc As DataColumn
        
        Private columnPorc_Desc As DataColumn
        
        Private columnExist_Negativa As DataColumn
        
        Friend Sub New()
            MyBase.New("Usuarios")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Id_UsuarioColumn As DataColumn
            Get
                Return Me.columnId_Usuario
            End Get
        End Property
        
        Friend ReadOnly Property NombreColumn As DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        Friend ReadOnly Property Clave_InternaColumn As DataColumn
            Get
                Return Me.columnClave_Interna
            End Get
        End Property
        
        Friend ReadOnly Property Clave_EntradaColumn As DataColumn
            Get
                Return Me.columnClave_Entrada
            End Get
        End Property
        
        Friend ReadOnly Property PerfilColumn As DataColumn
            Get
                Return Me.columnPerfil
            End Get
        End Property
        
        Friend ReadOnly Property FotoColumn As DataColumn
            Get
                Return Me.columnFoto
            End Get
        End Property
        
        Friend ReadOnly Property InicialesColumn As DataColumn
            Get
                Return Me.columnIniciales
            End Get
        End Property
        
        Friend ReadOnly Property CedulaColumn As DataColumn
            Get
                Return Me.columnCedula
            End Get
        End Property
        
        Friend ReadOnly Property CambiarPrecioColumn As DataColumn
            Get
                Return Me.columnCambiarPrecio
            End Get
        End Property
        
        Friend ReadOnly Property Porc_PrecioColumn As DataColumn
            Get
                Return Me.columnPorc_Precio
            End Get
        End Property
        
        Friend ReadOnly Property Aplicar_DescColumn As DataColumn
            Get
                Return Me.columnAplicar_Desc
            End Get
        End Property
        
        Friend ReadOnly Property Porc_DescColumn As DataColumn
            Get
                Return Me.columnPorc_Desc
            End Get
        End Property
        
        Friend ReadOnly Property Exist_NegativaColumn As DataColumn
            Get
                Return Me.columnExist_Negativa
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As UsuariosRow
            Get
                Return CType(Me.Rows(index),UsuariosRow)
            End Get
        End Property
        
        Public Event UsuariosRowChanged As UsuariosRowChangeEventHandler
        
        Public Event UsuariosRowChanging As UsuariosRowChangeEventHandler
        
        Public Event UsuariosRowDeleted As UsuariosRowChangeEventHandler
        
        Public Event UsuariosRowDeleting As UsuariosRowChangeEventHandler
        
        Public Overloads Sub AddUsuariosRow(ByVal row As UsuariosRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddUsuariosRow(ByVal Id_Usuario As String, ByVal Nombre As String, ByVal Clave_Interna As String, ByVal Clave_Entrada As String, ByVal Perfil As Integer, ByVal Foto() As Byte, ByVal Iniciales As String, ByVal Cedula As String, ByVal CambiarPrecio As Boolean, ByVal Porc_Precio As Double, ByVal Aplicar_Desc As Boolean, ByVal Porc_Desc As Double, ByVal Exist_Negativa As Boolean) As UsuariosRow
            Dim rowUsuariosRow As UsuariosRow = CType(Me.NewRow,UsuariosRow)
            rowUsuariosRow.ItemArray = New Object() {Id_Usuario, Nombre, Clave_Interna, Clave_Entrada, Perfil, Foto, Iniciales, Cedula, CambiarPrecio, Porc_Precio, Aplicar_Desc, Porc_Desc, Exist_Negativa}
            Me.Rows.Add(rowUsuariosRow)
            Return rowUsuariosRow
        End Function
        
        Public Function FindById_Usuario(ByVal Id_Usuario As String) As UsuariosRow
            Return CType(Me.Rows.Find(New Object() {Id_Usuario}),UsuariosRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As UsuariosDataTable = CType(MyBase.Clone,UsuariosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New UsuariosDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId_Usuario = Me.Columns("Id_Usuario")
            Me.columnNombre = Me.Columns("Nombre")
            Me.columnClave_Interna = Me.Columns("Clave_Interna")
            Me.columnClave_Entrada = Me.Columns("Clave_Entrada")
            Me.columnPerfil = Me.Columns("Perfil")
            Me.columnFoto = Me.Columns("Foto")
            Me.columnIniciales = Me.Columns("Iniciales")
            Me.columnCedula = Me.Columns("Cedula")
            Me.columnCambiarPrecio = Me.Columns("CambiarPrecio")
            Me.columnPorc_Precio = Me.Columns("Porc_Precio")
            Me.columnAplicar_Desc = Me.Columns("Aplicar_Desc")
            Me.columnPorc_Desc = Me.Columns("Porc_Desc")
            Me.columnExist_Negativa = Me.Columns("Exist_Negativa")
        End Sub
        
        Private Sub InitClass()
            Me.columnId_Usuario = New DataColumn("Id_Usuario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Usuario)
            Me.columnNombre = New DataColumn("Nombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombre)
            Me.columnClave_Interna = New DataColumn("Clave_Interna", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnClave_Interna)
            Me.columnClave_Entrada = New DataColumn("Clave_Entrada", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnClave_Entrada)
            Me.columnPerfil = New DataColumn("Perfil", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPerfil)
            Me.columnFoto = New DataColumn("Foto", GetType(System.Byte()), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFoto)
            Me.columnIniciales = New DataColumn("Iniciales", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIniciales)
            Me.columnCedula = New DataColumn("Cedula", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCedula)
            Me.columnCambiarPrecio = New DataColumn("CambiarPrecio", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCambiarPrecio)
            Me.columnPorc_Precio = New DataColumn("Porc_Precio", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPorc_Precio)
            Me.columnAplicar_Desc = New DataColumn("Aplicar_Desc", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAplicar_Desc)
            Me.columnPorc_Desc = New DataColumn("Porc_Desc", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPorc_Desc)
            Me.columnExist_Negativa = New DataColumn("Exist_Negativa", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExist_Negativa)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId_Usuario}, true))
            Me.Constraints.Add(New UniqueConstraint("Constraint2", New DataColumn() {Me.columnCedula}, false))
            Me.columnId_Usuario.AllowDBNull = false
            Me.columnId_Usuario.Unique = true
            Me.columnNombre.AllowDBNull = false
            Me.columnClave_Interna.AllowDBNull = false
            Me.columnClave_Entrada.AllowDBNull = false
            Me.columnPerfil.AllowDBNull = false
            Me.columnIniciales.AllowDBNull = false
            Me.columnCedula.AllowDBNull = false
            Me.columnCedula.Unique = true
            Me.columnCambiarPrecio.AllowDBNull = false
            Me.columnPorc_Precio.AllowDBNull = false
            Me.columnAplicar_Desc.AllowDBNull = false
            Me.columnPorc_Desc.AllowDBNull = false
            Me.columnExist_Negativa.AllowDBNull = false
        End Sub
        
        Public Function NewUsuariosRow() As UsuariosRow
            Return CType(Me.NewRow,UsuariosRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New UsuariosRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(UsuariosRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UsuariosRowChangedEvent) Is Nothing) Then
                RaiseEvent UsuariosRowChanged(Me, New UsuariosRowChangeEvent(CType(e.Row,UsuariosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UsuariosRowChangingEvent) Is Nothing) Then
                RaiseEvent UsuariosRowChanging(Me, New UsuariosRowChangeEvent(CType(e.Row,UsuariosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UsuariosRowDeletedEvent) Is Nothing) Then
                RaiseEvent UsuariosRowDeleted(Me, New UsuariosRowChangeEvent(CType(e.Row,UsuariosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UsuariosRowDeletingEvent) Is Nothing) Then
                RaiseEvent UsuariosRowDeleting(Me, New UsuariosRowChangeEvent(CType(e.Row,UsuariosRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveUsuariosRow(ByVal row As UsuariosRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UsuariosRow
        Inherits DataRow
        
        Private tableUsuarios As UsuariosDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableUsuarios = CType(Me.Table,UsuariosDataTable)
        End Sub
        
        Public Property Id_Usuario As String
            Get
                Return CType(Me(Me.tableUsuarios.Id_UsuarioColumn),String)
            End Get
            Set
                Me(Me.tableUsuarios.Id_UsuarioColumn) = value
            End Set
        End Property
        
        Public Property Nombre As String
            Get
                Return CType(Me(Me.tableUsuarios.NombreColumn),String)
            End Get
            Set
                Me(Me.tableUsuarios.NombreColumn) = value
            End Set
        End Property
        
        Public Property Clave_Interna As String
            Get
                Return CType(Me(Me.tableUsuarios.Clave_InternaColumn),String)
            End Get
            Set
                Me(Me.tableUsuarios.Clave_InternaColumn) = value
            End Set
        End Property
        
        Public Property Clave_Entrada As String
            Get
                Return CType(Me(Me.tableUsuarios.Clave_EntradaColumn),String)
            End Get
            Set
                Me(Me.tableUsuarios.Clave_EntradaColumn) = value
            End Set
        End Property
        
        Public Property Perfil As Integer
            Get
                Return CType(Me(Me.tableUsuarios.PerfilColumn),Integer)
            End Get
            Set
                Me(Me.tableUsuarios.PerfilColumn) = value
            End Set
        End Property
        
        Public Property Foto As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableUsuarios.FotoColumn),Byte())
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUsuarios.FotoColumn) = value
            End Set
        End Property
        
        Public Property Iniciales As String
            Get
                Return CType(Me(Me.tableUsuarios.InicialesColumn),String)
            End Get
            Set
                Me(Me.tableUsuarios.InicialesColumn) = value
            End Set
        End Property
        
        Public Property Cedula As String
            Get
                Return CType(Me(Me.tableUsuarios.CedulaColumn),String)
            End Get
            Set
                Me(Me.tableUsuarios.CedulaColumn) = value
            End Set
        End Property
        
        Public Property CambiarPrecio As Boolean
            Get
                Return CType(Me(Me.tableUsuarios.CambiarPrecioColumn),Boolean)
            End Get
            Set
                Me(Me.tableUsuarios.CambiarPrecioColumn) = value
            End Set
        End Property
        
        Public Property Porc_Precio As Double
            Get
                Return CType(Me(Me.tableUsuarios.Porc_PrecioColumn),Double)
            End Get
            Set
                Me(Me.tableUsuarios.Porc_PrecioColumn) = value
            End Set
        End Property
        
        Public Property Aplicar_Desc As Boolean
            Get
                Return CType(Me(Me.tableUsuarios.Aplicar_DescColumn),Boolean)
            End Get
            Set
                Me(Me.tableUsuarios.Aplicar_DescColumn) = value
            End Set
        End Property
        
        Public Property Porc_Desc As Double
            Get
                Return CType(Me(Me.tableUsuarios.Porc_DescColumn),Double)
            End Get
            Set
                Me(Me.tableUsuarios.Porc_DescColumn) = value
            End Set
        End Property
        
        Public Property Exist_Negativa As Boolean
            Get
                Return CType(Me(Me.tableUsuarios.Exist_NegativaColumn),Boolean)
            End Get
            Set
                Me(Me.tableUsuarios.Exist_NegativaColumn) = value
            End Set
        End Property
        
        Public Function IsFotoNull() As Boolean
            Return Me.IsNull(Me.tableUsuarios.FotoColumn)
        End Function
        
        Public Sub SetFotoNull()
            Me(Me.tableUsuarios.FotoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetcomprasRows() As comprasRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Usuarioscompras")),comprasRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UsuariosRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As UsuariosRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As UsuariosRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As UsuariosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BodegaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIdBodega As DataColumn
        
        Private columnNombre As DataColumn
        
        Friend Sub New()
            MyBase.New("Bodega")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdBodegaColumn As DataColumn
            Get
                Return Me.columnIdBodega
            End Get
        End Property
        
        Friend ReadOnly Property NombreColumn As DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BodegaRow
            Get
                Return CType(Me.Rows(index),BodegaRow)
            End Get
        End Property
        
        Public Event BodegaRowChanged As BodegaRowChangeEventHandler
        
        Public Event BodegaRowChanging As BodegaRowChangeEventHandler
        
        Public Event BodegaRowDeleted As BodegaRowChangeEventHandler
        
        Public Event BodegaRowDeleting As BodegaRowChangeEventHandler
        
        Public Overloads Sub AddBodegaRow(ByVal row As BodegaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBodegaRow(ByVal Nombre As String) As BodegaRow
            Dim rowBodegaRow As BodegaRow = CType(Me.NewRow,BodegaRow)
            rowBodegaRow.ItemArray = New Object() {Nothing, Nombre}
            Me.Rows.Add(rowBodegaRow)
            Return rowBodegaRow
        End Function
        
        Public Function FindByIdBodega(ByVal IdBodega As Long) As BodegaRow
            Return CType(Me.Rows.Find(New Object() {IdBodega}),BodegaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BodegaDataTable = CType(MyBase.Clone,BodegaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BodegaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIdBodega = Me.Columns("IdBodega")
            Me.columnNombre = Me.Columns("Nombre")
        End Sub
        
        Private Sub InitClass()
            Me.columnIdBodega = New DataColumn("IdBodega", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdBodega)
            Me.columnNombre = New DataColumn("Nombre", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombre)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnIdBodega}, true))
            Me.columnIdBodega.AutoIncrement = true
            Me.columnIdBodega.AllowDBNull = false
            Me.columnIdBodega.ReadOnly = true
            Me.columnIdBodega.Unique = true
            Me.columnNombre.AllowDBNull = false
        End Sub
        
        Public Function NewBodegaRow() As BodegaRow
            Return CType(Me.NewRow,BodegaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BodegaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BodegaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BodegaRowChangedEvent) Is Nothing) Then
                RaiseEvent BodegaRowChanged(Me, New BodegaRowChangeEvent(CType(e.Row,BodegaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BodegaRowChangingEvent) Is Nothing) Then
                RaiseEvent BodegaRowChanging(Me, New BodegaRowChangeEvent(CType(e.Row,BodegaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BodegaRowDeletedEvent) Is Nothing) Then
                RaiseEvent BodegaRowDeleted(Me, New BodegaRowChangeEvent(CType(e.Row,BodegaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BodegaRowDeletingEvent) Is Nothing) Then
                RaiseEvent BodegaRowDeleting(Me, New BodegaRowChangeEvent(CType(e.Row,BodegaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBodegaRow(ByVal row As BodegaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BodegaRow
        Inherits DataRow
        
        Private tableBodega As BodegaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBodega = CType(Me.Table,BodegaDataTable)
        End Sub
        
        Public Property IdBodega As Long
            Get
                Return CType(Me(Me.tableBodega.IdBodegaColumn),Long)
            End Get
            Set
                Me(Me.tableBodega.IdBodegaColumn) = value
            End Set
        End Property
        
        Public Property Nombre As String
            Get
                Return CType(Me(Me.tableBodega.NombreColumn),String)
            End Get
            Set
                Me(Me.tableBodega.NombreColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BodegaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BodegaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BodegaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BodegaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class articulos_compradosDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId_ArticuloComprados As DataColumn
        
        Private columnIdCompra As DataColumn
        
        Private columnCodigo As DataColumn
        
        Private columnDescripcion As DataColumn
        
        Private columnBase As DataColumn
        
        Private columnMonto_Flete As DataColumn
        
        Private columnOtrosCargos As DataColumn
        
        Private columnCosto As DataColumn
        
        Private columnCantidad As DataColumn
        
        Private columnGravado As DataColumn
        
        Private columnExento As DataColumn
        
        Private columnDescuento_P As DataColumn
        
        Private columnDescuento As DataColumn
        
        Private columnImpuesto_P As DataColumn
        
        Private columnImpuesto As DataColumn
        
        Private columnTotal As DataColumn
        
        Private columnDevoluciones As DataColumn
        
        Private columnNuevoCostoBase As DataColumn
        
        Private columnBarras As DataColumn
        
        Private columnbodega_id As DataColumn
        
        Private columnPorcFactor As DataColumn
        
        Private columnMontoFactor As DataColumn
        
        Friend Sub New()
            MyBase.New("articulos_comprados")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Id_ArticuloCompradosColumn As DataColumn
            Get
                Return Me.columnId_ArticuloComprados
            End Get
        End Property
        
        Friend ReadOnly Property IdCompraColumn As DataColumn
            Get
                Return Me.columnIdCompra
            End Get
        End Property
        
        Friend ReadOnly Property CodigoColumn As DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        Friend ReadOnly Property DescripcionColumn As DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        Friend ReadOnly Property BaseColumn As DataColumn
            Get
                Return Me.columnBase
            End Get
        End Property
        
        Friend ReadOnly Property Monto_FleteColumn As DataColumn
            Get
                Return Me.columnMonto_Flete
            End Get
        End Property
        
        Friend ReadOnly Property OtrosCargosColumn As DataColumn
            Get
                Return Me.columnOtrosCargos
            End Get
        End Property
        
        Friend ReadOnly Property CostoColumn As DataColumn
            Get
                Return Me.columnCosto
            End Get
        End Property
        
        Friend ReadOnly Property CantidadColumn As DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        Friend ReadOnly Property GravadoColumn As DataColumn
            Get
                Return Me.columnGravado
            End Get
        End Property
        
        Friend ReadOnly Property ExentoColumn As DataColumn
            Get
                Return Me.columnExento
            End Get
        End Property
        
        Friend ReadOnly Property Descuento_PColumn As DataColumn
            Get
                Return Me.columnDescuento_P
            End Get
        End Property
        
        Friend ReadOnly Property DescuentoColumn As DataColumn
            Get
                Return Me.columnDescuento
            End Get
        End Property
        
        Friend ReadOnly Property Impuesto_PColumn As DataColumn
            Get
                Return Me.columnImpuesto_P
            End Get
        End Property
        
        Friend ReadOnly Property ImpuestoColumn As DataColumn
            Get
                Return Me.columnImpuesto
            End Get
        End Property
        
        Friend ReadOnly Property TotalColumn As DataColumn
            Get
                Return Me.columnTotal
            End Get
        End Property
        
        Friend ReadOnly Property DevolucionesColumn As DataColumn
            Get
                Return Me.columnDevoluciones
            End Get
        End Property
        
        Friend ReadOnly Property NuevoCostoBaseColumn As DataColumn
            Get
                Return Me.columnNuevoCostoBase
            End Get
        End Property
        
        Friend ReadOnly Property BarrasColumn As DataColumn
            Get
                Return Me.columnBarras
            End Get
        End Property
        
        Friend ReadOnly Property bodega_idColumn As DataColumn
            Get
                Return Me.columnbodega_id
            End Get
        End Property
        
        Friend ReadOnly Property PorcFactorColumn As DataColumn
            Get
                Return Me.columnPorcFactor
            End Get
        End Property
        
        Friend ReadOnly Property MontoFactorColumn As DataColumn
            Get
                Return Me.columnMontoFactor
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As articulos_compradosRow
            Get
                Return CType(Me.Rows(index),articulos_compradosRow)
            End Get
        End Property
        
        Public Event articulos_compradosRowChanged As articulos_compradosRowChangeEventHandler
        
        Public Event articulos_compradosRowChanging As articulos_compradosRowChangeEventHandler
        
        Public Event articulos_compradosRowDeleted As articulos_compradosRowChangeEventHandler
        
        Public Event articulos_compradosRowDeleting As articulos_compradosRowChangeEventHandler
        
        Public Overloads Sub Addarticulos_compradosRow(ByVal row As articulos_compradosRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addarticulos_compradosRow( _
                    ByVal parentcomprasRowBycomprasarticulos_comprados As comprasRow,  _
                    ByVal Codigo As Long,  _
                    ByVal Descripcion As String,  _
                    ByVal Base As Double,  _
                    ByVal Monto_Flete As Double,  _
                    ByVal OtrosCargos As Double,  _
                    ByVal Costo As Double,  _
                    ByVal Cantidad As Double,  _
                    ByVal Gravado As Double,  _
                    ByVal Exento As Double,  _
                    ByVal Descuento_P As Double,  _
                    ByVal Descuento As Double,  _
                    ByVal Impuesto_P As Double,  _
                    ByVal Impuesto As Double,  _
                    ByVal Total As Double,  _
                    ByVal Devoluciones As Double,  _
                    ByVal NuevoCostoBase As Double,  _
                    ByVal Barras As String,  _
                    ByVal bodega_id As Integer,  _
                    ByVal PorcFactor As Single,  _
                    ByVal MontoFactor As Single) As articulos_compradosRow
            Dim rowarticulos_compradosRow As articulos_compradosRow = CType(Me.NewRow,articulos_compradosRow)
            rowarticulos_compradosRow.ItemArray = New Object() {Nothing, parentcomprasRowBycomprasarticulos_comprados(20), Codigo, Descripcion, Base, Monto_Flete, OtrosCargos, Costo, Cantidad, Gravado, Exento, Descuento_P, Descuento, Impuesto_P, Impuesto, Total, Devoluciones, NuevoCostoBase, Barras, bodega_id, PorcFactor, MontoFactor}
            Me.Rows.Add(rowarticulos_compradosRow)
            Return rowarticulos_compradosRow
        End Function
        
        Public Function FindById_ArticuloComprados(ByVal Id_ArticuloComprados As Long) As articulos_compradosRow
            Return CType(Me.Rows.Find(New Object() {Id_ArticuloComprados}),articulos_compradosRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As articulos_compradosDataTable = CType(MyBase.Clone,articulos_compradosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New articulos_compradosDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId_ArticuloComprados = Me.Columns("Id_ArticuloComprados")
            Me.columnIdCompra = Me.Columns("IdCompra")
            Me.columnCodigo = Me.Columns("Codigo")
            Me.columnDescripcion = Me.Columns("Descripcion")
            Me.columnBase = Me.Columns("Base")
            Me.columnMonto_Flete = Me.Columns("Monto_Flete")
            Me.columnOtrosCargos = Me.Columns("OtrosCargos")
            Me.columnCosto = Me.Columns("Costo")
            Me.columnCantidad = Me.Columns("Cantidad")
            Me.columnGravado = Me.Columns("Gravado")
            Me.columnExento = Me.Columns("Exento")
            Me.columnDescuento_P = Me.Columns("Descuento_P")
            Me.columnDescuento = Me.Columns("Descuento")
            Me.columnImpuesto_P = Me.Columns("Impuesto_P")
            Me.columnImpuesto = Me.Columns("Impuesto")
            Me.columnTotal = Me.Columns("Total")
            Me.columnDevoluciones = Me.Columns("Devoluciones")
            Me.columnNuevoCostoBase = Me.Columns("NuevoCostoBase")
            Me.columnBarras = Me.Columns("Barras")
            Me.columnbodega_id = Me.Columns("bodega_id")
            Me.columnPorcFactor = Me.Columns("PorcFactor")
            Me.columnMontoFactor = Me.Columns("MontoFactor")
        End Sub
        
        Private Sub InitClass()
            Me.columnId_ArticuloComprados = New DataColumn("Id_ArticuloComprados", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_ArticuloComprados)
            Me.columnIdCompra = New DataColumn("IdCompra", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdCompra)
            Me.columnCodigo = New DataColumn("Codigo", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodigo)
            Me.columnDescripcion = New DataColumn("Descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcion)
            Me.columnBase = New DataColumn("Base", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBase)
            Me.columnMonto_Flete = New DataColumn("Monto_Flete", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto_Flete)
            Me.columnOtrosCargos = New DataColumn("OtrosCargos", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOtrosCargos)
            Me.columnCosto = New DataColumn("Costo", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCosto)
            Me.columnCantidad = New DataColumn("Cantidad", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCantidad)
            Me.columnGravado = New DataColumn("Gravado", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGravado)
            Me.columnExento = New DataColumn("Exento", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExento)
            Me.columnDescuento_P = New DataColumn("Descuento_P", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescuento_P)
            Me.columnDescuento = New DataColumn("Descuento", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescuento)
            Me.columnImpuesto_P = New DataColumn("Impuesto_P", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnImpuesto_P)
            Me.columnImpuesto = New DataColumn("Impuesto", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnImpuesto)
            Me.columnTotal = New DataColumn("Total", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotal)
            Me.columnDevoluciones = New DataColumn("Devoluciones", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDevoluciones)
            Me.columnNuevoCostoBase = New DataColumn("NuevoCostoBase", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNuevoCostoBase)
            Me.columnBarras = New DataColumn("Barras", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBarras)
            Me.columnbodega_id = New DataColumn("bodega_id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbodega_id)
            Me.columnPorcFactor = New DataColumn("PorcFactor", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPorcFactor)
            Me.columnMontoFactor = New DataColumn("MontoFactor", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMontoFactor)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId_ArticuloComprados}, true))
            Me.columnId_ArticuloComprados.AutoIncrement = true
            Me.columnId_ArticuloComprados.AllowDBNull = false
            Me.columnId_ArticuloComprados.ReadOnly = true
            Me.columnId_ArticuloComprados.Unique = true
            Me.columnIdCompra.AllowDBNull = false
            Me.columnCodigo.AllowDBNull = false
            Me.columnDescripcion.AllowDBNull = false
            Me.columnBase.AllowDBNull = false
            Me.columnMonto_Flete.AllowDBNull = false
            Me.columnOtrosCargos.AllowDBNull = false
            Me.columnCosto.AllowDBNull = false
            Me.columnCantidad.AllowDBNull = false
            Me.columnCantidad.DefaultValue = 0
            Me.columnGravado.AllowDBNull = false
            Me.columnExento.AllowDBNull = false
            Me.columnDescuento_P.AllowDBNull = false
            Me.columnDescuento.AllowDBNull = false
            Me.columnImpuesto_P.AllowDBNull = false
            Me.columnImpuesto.AllowDBNull = false
            Me.columnTotal.AllowDBNull = false
            Me.columnDevoluciones.AllowDBNull = false
            Me.columnNuevoCostoBase.AllowDBNull = false
            Me.columnBarras.AllowDBNull = false
            Me.columnbodega_id.AllowDBNull = false
            Me.columnPorcFactor.AllowDBNull = false
            Me.columnMontoFactor.AllowDBNull = false
        End Sub
        
        Public Function Newarticulos_compradosRow() As articulos_compradosRow
            Return CType(Me.NewRow,articulos_compradosRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New articulos_compradosRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(articulos_compradosRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.articulos_compradosRowChangedEvent) Is Nothing) Then
                RaiseEvent articulos_compradosRowChanged(Me, New articulos_compradosRowChangeEvent(CType(e.Row,articulos_compradosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.articulos_compradosRowChangingEvent) Is Nothing) Then
                RaiseEvent articulos_compradosRowChanging(Me, New articulos_compradosRowChangeEvent(CType(e.Row,articulos_compradosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.articulos_compradosRowDeletedEvent) Is Nothing) Then
                RaiseEvent articulos_compradosRowDeleted(Me, New articulos_compradosRowChangeEvent(CType(e.Row,articulos_compradosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.articulos_compradosRowDeletingEvent) Is Nothing) Then
                RaiseEvent articulos_compradosRowDeleting(Me, New articulos_compradosRowChangeEvent(CType(e.Row,articulos_compradosRow), e.Action))
            End If
        End Sub
        
        Public Sub Removearticulos_compradosRow(ByVal row As articulos_compradosRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class articulos_compradosRow
        Inherits DataRow
        
        Private tablearticulos_comprados As articulos_compradosDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablearticulos_comprados = CType(Me.Table,articulos_compradosDataTable)
        End Sub
        
        Public Property Id_ArticuloComprados As Long
            Get
                Return CType(Me(Me.tablearticulos_comprados.Id_ArticuloCompradosColumn),Long)
            End Get
            Set
                Me(Me.tablearticulos_comprados.Id_ArticuloCompradosColumn) = value
            End Set
        End Property
        
        Public Property IdCompra As Long
            Get
                Return CType(Me(Me.tablearticulos_comprados.IdCompraColumn),Long)
            End Get
            Set
                Me(Me.tablearticulos_comprados.IdCompraColumn) = value
            End Set
        End Property
        
        Public Property Codigo As Long
            Get
                Return CType(Me(Me.tablearticulos_comprados.CodigoColumn),Long)
            End Get
            Set
                Me(Me.tablearticulos_comprados.CodigoColumn) = value
            End Set
        End Property
        
        Public Property Descripcion As String
            Get
                Return CType(Me(Me.tablearticulos_comprados.DescripcionColumn),String)
            End Get
            Set
                Me(Me.tablearticulos_comprados.DescripcionColumn) = value
            End Set
        End Property
        
        Public Property Base As Double
            Get
                Return CType(Me(Me.tablearticulos_comprados.BaseColumn),Double)
            End Get
            Set
                Me(Me.tablearticulos_comprados.BaseColumn) = value
            End Set
        End Property
        
        Public Property Monto_Flete As Double
            Get
                Return CType(Me(Me.tablearticulos_comprados.Monto_FleteColumn),Double)
            End Get
            Set
                Me(Me.tablearticulos_comprados.Monto_FleteColumn) = value
            End Set
        End Property
        
        Public Property OtrosCargos As Double
            Get
                Return CType(Me(Me.tablearticulos_comprados.OtrosCargosColumn),Double)
            End Get
            Set
                Me(Me.tablearticulos_comprados.OtrosCargosColumn) = value
            End Set
        End Property
        
        Public Property Costo As Double
            Get
                Return CType(Me(Me.tablearticulos_comprados.CostoColumn),Double)
            End Get
            Set
                Me(Me.tablearticulos_comprados.CostoColumn) = value
            End Set
        End Property
        
        Public Property Cantidad As Double
            Get
                Return CType(Me(Me.tablearticulos_comprados.CantidadColumn),Double)
            End Get
            Set
                Me(Me.tablearticulos_comprados.CantidadColumn) = value
            End Set
        End Property
        
        Public Property Gravado As Double
            Get
                Return CType(Me(Me.tablearticulos_comprados.GravadoColumn),Double)
            End Get
            Set
                Me(Me.tablearticulos_comprados.GravadoColumn) = value
            End Set
        End Property
        
        Public Property Exento As Double
            Get
                Return CType(Me(Me.tablearticulos_comprados.ExentoColumn),Double)
            End Get
            Set
                Me(Me.tablearticulos_comprados.ExentoColumn) = value
            End Set
        End Property
        
        Public Property Descuento_P As Double
            Get
                Return CType(Me(Me.tablearticulos_comprados.Descuento_PColumn),Double)
            End Get
            Set
                Me(Me.tablearticulos_comprados.Descuento_PColumn) = value
            End Set
        End Property
        
        Public Property Descuento As Double
            Get
                Return CType(Me(Me.tablearticulos_comprados.DescuentoColumn),Double)
            End Get
            Set
                Me(Me.tablearticulos_comprados.DescuentoColumn) = value
            End Set
        End Property
        
        Public Property Impuesto_P As Double
            Get
                Return CType(Me(Me.tablearticulos_comprados.Impuesto_PColumn),Double)
            End Get
            Set
                Me(Me.tablearticulos_comprados.Impuesto_PColumn) = value
            End Set
        End Property
        
        Public Property Impuesto As Double
            Get
                Return CType(Me(Me.tablearticulos_comprados.ImpuestoColumn),Double)
            End Get
            Set
                Me(Me.tablearticulos_comprados.ImpuestoColumn) = value
            End Set
        End Property
        
        Public Property Total As Double
            Get
                Return CType(Me(Me.tablearticulos_comprados.TotalColumn),Double)
            End Get
            Set
                Me(Me.tablearticulos_comprados.TotalColumn) = value
            End Set
        End Property
        
        Public Property Devoluciones As Double
            Get
                Return CType(Me(Me.tablearticulos_comprados.DevolucionesColumn),Double)
            End Get
            Set
                Me(Me.tablearticulos_comprados.DevolucionesColumn) = value
            End Set
        End Property
        
        Public Property NuevoCostoBase As Double
            Get
                Return CType(Me(Me.tablearticulos_comprados.NuevoCostoBaseColumn),Double)
            End Get
            Set
                Me(Me.tablearticulos_comprados.NuevoCostoBaseColumn) = value
            End Set
        End Property
        
        Public Property Barras As String
            Get
                Return CType(Me(Me.tablearticulos_comprados.BarrasColumn),String)
            End Get
            Set
                Me(Me.tablearticulos_comprados.BarrasColumn) = value
            End Set
        End Property
        
        Public Property bodega_id As Integer
            Get
                Return CType(Me(Me.tablearticulos_comprados.bodega_idColumn),Integer)
            End Get
            Set
                Me(Me.tablearticulos_comprados.bodega_idColumn) = value
            End Set
        End Property
        
        Public Property PorcFactor As Single
            Get
                Return CType(Me(Me.tablearticulos_comprados.PorcFactorColumn),Single)
            End Get
            Set
                Me(Me.tablearticulos_comprados.PorcFactorColumn) = value
            End Set
        End Property
        
        Public Property MontoFactor As Single
            Get
                Return CType(Me(Me.tablearticulos_comprados.MontoFactorColumn),Single)
            End Get
            Set
                Me(Me.tablearticulos_comprados.MontoFactorColumn) = value
            End Set
        End Property
        
        Public Property comprasRow As comprasRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("comprasarticulos_comprados")),comprasRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("comprasarticulos_comprados"))
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class articulos_compradosRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As articulos_compradosRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As articulos_compradosRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As articulos_compradosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class comprasDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFactura As DataColumn
        
        Private columnCodigoProv As DataColumn
        
        Private columnSubTotalGravado As DataColumn
        
        Private columnSubTotalExento As DataColumn
        
        Private columnDescuento As DataColumn
        
        Private columnImpuesto As DataColumn
        
        Private columnTotalFactura As DataColumn
        
        Private columnFecha As DataColumn
        
        Private columnVence As DataColumn
        
        Private columnFechaIngreso As DataColumn
        
        Private columnMotivoGasto As DataColumn
        
        Private columnCompra As DataColumn
        
        Private columnContabilizado As DataColumn
        
        Private columnConsignacion As DataColumn
        
        Private columnAsiento As DataColumn
        
        Private columnContaInve As DataColumn
        
        Private columnAsientoInve As DataColumn
        
        Private columnTipoCompra As DataColumn
        
        Private columnCedulaUsuario As DataColumn
        
        Private columnCod_MonedaCompra As DataColumn
        
        Private columnId_Compra As DataColumn
        
        Private columnTipoCambio As DataColumn
        
        Private columnMontoFactor As DataColumn
        
        Friend Sub New()
            MyBase.New("compras")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property FacturaColumn As DataColumn
            Get
                Return Me.columnFactura
            End Get
        End Property
        
        Friend ReadOnly Property CodigoProvColumn As DataColumn
            Get
                Return Me.columnCodigoProv
            End Get
        End Property
        
        Friend ReadOnly Property SubTotalGravadoColumn As DataColumn
            Get
                Return Me.columnSubTotalGravado
            End Get
        End Property
        
        Friend ReadOnly Property SubTotalExentoColumn As DataColumn
            Get
                Return Me.columnSubTotalExento
            End Get
        End Property
        
        Friend ReadOnly Property DescuentoColumn As DataColumn
            Get
                Return Me.columnDescuento
            End Get
        End Property
        
        Friend ReadOnly Property ImpuestoColumn As DataColumn
            Get
                Return Me.columnImpuesto
            End Get
        End Property
        
        Friend ReadOnly Property TotalFacturaColumn As DataColumn
            Get
                Return Me.columnTotalFactura
            End Get
        End Property
        
        Friend ReadOnly Property FechaColumn As DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        Friend ReadOnly Property VenceColumn As DataColumn
            Get
                Return Me.columnVence
            End Get
        End Property
        
        Friend ReadOnly Property FechaIngresoColumn As DataColumn
            Get
                Return Me.columnFechaIngreso
            End Get
        End Property
        
        Friend ReadOnly Property MotivoGastoColumn As DataColumn
            Get
                Return Me.columnMotivoGasto
            End Get
        End Property
        
        Friend ReadOnly Property CompraColumn As DataColumn
            Get
                Return Me.columnCompra
            End Get
        End Property
        
        Friend ReadOnly Property ContabilizadoColumn As DataColumn
            Get
                Return Me.columnContabilizado
            End Get
        End Property
        
        Friend ReadOnly Property ConsignacionColumn As DataColumn
            Get
                Return Me.columnConsignacion
            End Get
        End Property
        
        Friend ReadOnly Property AsientoColumn As DataColumn
            Get
                Return Me.columnAsiento
            End Get
        End Property
        
        Friend ReadOnly Property ContaInveColumn As DataColumn
            Get
                Return Me.columnContaInve
            End Get
        End Property
        
        Friend ReadOnly Property AsientoInveColumn As DataColumn
            Get
                Return Me.columnAsientoInve
            End Get
        End Property
        
        Friend ReadOnly Property TipoCompraColumn As DataColumn
            Get
                Return Me.columnTipoCompra
            End Get
        End Property
        
        Friend ReadOnly Property CedulaUsuarioColumn As DataColumn
            Get
                Return Me.columnCedulaUsuario
            End Get
        End Property
        
        Friend ReadOnly Property Cod_MonedaCompraColumn As DataColumn
            Get
                Return Me.columnCod_MonedaCompra
            End Get
        End Property
        
        Friend ReadOnly Property Id_CompraColumn As DataColumn
            Get
                Return Me.columnId_Compra
            End Get
        End Property
        
        Friend ReadOnly Property TipoCambioColumn As DataColumn
            Get
                Return Me.columnTipoCambio
            End Get
        End Property
        
        Friend ReadOnly Property MontoFactorColumn As DataColumn
            Get
                Return Me.columnMontoFactor
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As comprasRow
            Get
                Return CType(Me.Rows(index),comprasRow)
            End Get
        End Property
        
        Public Event comprasRowChanged As comprasRowChangeEventHandler
        
        Public Event comprasRowChanging As comprasRowChangeEventHandler
        
        Public Event comprasRowDeleted As comprasRowChangeEventHandler
        
        Public Event comprasRowDeleting As comprasRowChangeEventHandler
        
        Public Overloads Sub AddcomprasRow(ByVal row As comprasRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddcomprasRow( _
                    ByVal Factura As Double,  _
                    ByVal parentProveedoresRowByProveedorescompras As ProveedoresRow,  _
                    ByVal SubTotalGravado As Double,  _
                    ByVal SubTotalExento As Double,  _
                    ByVal Descuento As Double,  _
                    ByVal Impuesto As Double,  _
                    ByVal TotalFactura As Double,  _
                    ByVal Fecha As Date,  _
                    ByVal Vence As Date,  _
                    ByVal FechaIngreso As Date,  _
                    ByVal MotivoGasto As String,  _
                    ByVal Compra As Boolean,  _
                    ByVal Contabilizado As Boolean,  _
                    ByVal Consignacion As Boolean,  _
                    ByVal Asiento As String,  _
                    ByVal ContaInve As Boolean,  _
                    ByVal AsientoInve As Double,  _
                    ByVal TipoCompra As String,  _
                    ByVal parentUsuariosRowByUsuarioscompras As UsuariosRow,  _
                    ByVal parentMonedaRowByMonedacompras As MonedaRow,  _
                    ByVal TipoCambio As Double,  _
                    ByVal MontoFactor As Single) As comprasRow
            Dim rowcomprasRow As comprasRow = CType(Me.NewRow,comprasRow)
            rowcomprasRow.ItemArray = New Object() {Factura, parentProveedoresRowByProveedorescompras(0), SubTotalGravado, SubTotalExento, Descuento, Impuesto, TotalFactura, Fecha, Vence, FechaIngreso, MotivoGasto, Compra, Contabilizado, Consignacion, Asiento, ContaInve, AsientoInve, TipoCompra, parentUsuariosRowByUsuarioscompras(7), parentMonedaRowByMonedacompras(0), Nothing, TipoCambio, MontoFactor}
            Me.Rows.Add(rowcomprasRow)
            Return rowcomprasRow
        End Function
        
        Public Function FindById_Compra(ByVal Id_Compra As Long) As comprasRow
            Return CType(Me.Rows.Find(New Object() {Id_Compra}),comprasRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As comprasDataTable = CType(MyBase.Clone,comprasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New comprasDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnFactura = Me.Columns("Factura")
            Me.columnCodigoProv = Me.Columns("CodigoProv")
            Me.columnSubTotalGravado = Me.Columns("SubTotalGravado")
            Me.columnSubTotalExento = Me.Columns("SubTotalExento")
            Me.columnDescuento = Me.Columns("Descuento")
            Me.columnImpuesto = Me.Columns("Impuesto")
            Me.columnTotalFactura = Me.Columns("TotalFactura")
            Me.columnFecha = Me.Columns("Fecha")
            Me.columnVence = Me.Columns("Vence")
            Me.columnFechaIngreso = Me.Columns("FechaIngreso")
            Me.columnMotivoGasto = Me.Columns("MotivoGasto")
            Me.columnCompra = Me.Columns("Compra")
            Me.columnContabilizado = Me.Columns("Contabilizado")
            Me.columnConsignacion = Me.Columns("Consignacion")
            Me.columnAsiento = Me.Columns("Asiento")
            Me.columnContaInve = Me.Columns("ContaInve")
            Me.columnAsientoInve = Me.Columns("AsientoInve")
            Me.columnTipoCompra = Me.Columns("TipoCompra")
            Me.columnCedulaUsuario = Me.Columns("CedulaUsuario")
            Me.columnCod_MonedaCompra = Me.Columns("Cod_MonedaCompra")
            Me.columnId_Compra = Me.Columns("Id_Compra")
            Me.columnTipoCambio = Me.Columns("TipoCambio")
            Me.columnMontoFactor = Me.Columns("MontoFactor")
        End Sub
        
        Private Sub InitClass()
            Me.columnFactura = New DataColumn("Factura", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFactura)
            Me.columnCodigoProv = New DataColumn("CodigoProv", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodigoProv)
            Me.columnSubTotalGravado = New DataColumn("SubTotalGravado", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSubTotalGravado)
            Me.columnSubTotalExento = New DataColumn("SubTotalExento", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSubTotalExento)
            Me.columnDescuento = New DataColumn("Descuento", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescuento)
            Me.columnImpuesto = New DataColumn("Impuesto", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnImpuesto)
            Me.columnTotalFactura = New DataColumn("TotalFactura", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotalFactura)
            Me.columnFecha = New DataColumn("Fecha", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha)
            Me.columnVence = New DataColumn("Vence", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVence)
            Me.columnFechaIngreso = New DataColumn("FechaIngreso", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaIngreso)
            Me.columnMotivoGasto = New DataColumn("MotivoGasto", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMotivoGasto)
            Me.columnCompra = New DataColumn("Compra", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCompra)
            Me.columnContabilizado = New DataColumn("Contabilizado", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnContabilizado)
            Me.columnConsignacion = New DataColumn("Consignacion", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnConsignacion)
            Me.columnAsiento = New DataColumn("Asiento", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAsiento)
            Me.columnContaInve = New DataColumn("ContaInve", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnContaInve)
            Me.columnAsientoInve = New DataColumn("AsientoInve", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAsientoInve)
            Me.columnTipoCompra = New DataColumn("TipoCompra", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipoCompra)
            Me.columnCedulaUsuario = New DataColumn("CedulaUsuario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCedulaUsuario)
            Me.columnCod_MonedaCompra = New DataColumn("Cod_MonedaCompra", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCod_MonedaCompra)
            Me.columnId_Compra = New DataColumn("Id_Compra", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Compra)
            Me.columnTipoCambio = New DataColumn("TipoCambio", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTipoCambio)
            Me.columnMontoFactor = New DataColumn("MontoFactor", GetType(System.Single), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMontoFactor)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId_Compra}, true))
            Me.columnFactura.AllowDBNull = false
            Me.columnCodigoProv.AllowDBNull = false
            Me.columnSubTotalGravado.AllowDBNull = false
            Me.columnSubTotalExento.AllowDBNull = false
            Me.columnDescuento.AllowDBNull = false
            Me.columnImpuesto.AllowDBNull = false
            Me.columnTotalFactura.AllowDBNull = false
            Me.columnFecha.AllowDBNull = false
            Me.columnVence.AllowDBNull = false
            Me.columnFechaIngreso.AllowDBNull = false
            Me.columnMotivoGasto.AllowDBNull = false
            Me.columnCompra.AllowDBNull = false
            Me.columnContabilizado.AllowDBNull = false
            Me.columnConsignacion.AllowDBNull = false
            Me.columnAsiento.AllowDBNull = false
            Me.columnContaInve.AllowDBNull = false
            Me.columnAsientoInve.AllowDBNull = false
            Me.columnTipoCompra.AllowDBNull = false
            Me.columnCedulaUsuario.AllowDBNull = false
            Me.columnCod_MonedaCompra.AllowDBNull = false
            Me.columnId_Compra.AutoIncrement = true
            Me.columnId_Compra.AllowDBNull = false
            Me.columnId_Compra.ReadOnly = true
            Me.columnId_Compra.Unique = true
            Me.columnTipoCambio.AllowDBNull = false
            Me.columnMontoFactor.AllowDBNull = false
        End Sub
        
        Public Function NewcomprasRow() As comprasRow
            Return CType(Me.NewRow,comprasRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New comprasRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(comprasRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.comprasRowChangedEvent) Is Nothing) Then
                RaiseEvent comprasRowChanged(Me, New comprasRowChangeEvent(CType(e.Row,comprasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.comprasRowChangingEvent) Is Nothing) Then
                RaiseEvent comprasRowChanging(Me, New comprasRowChangeEvent(CType(e.Row,comprasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.comprasRowDeletedEvent) Is Nothing) Then
                RaiseEvent comprasRowDeleted(Me, New comprasRowChangeEvent(CType(e.Row,comprasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.comprasRowDeletingEvent) Is Nothing) Then
                RaiseEvent comprasRowDeleting(Me, New comprasRowChangeEvent(CType(e.Row,comprasRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovecomprasRow(ByVal row As comprasRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class comprasRow
        Inherits DataRow
        
        Private tablecompras As comprasDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablecompras = CType(Me.Table,comprasDataTable)
        End Sub
        
        Public Property Factura As Double
            Get
                Return CType(Me(Me.tablecompras.FacturaColumn),Double)
            End Get
            Set
                Me(Me.tablecompras.FacturaColumn) = value
            End Set
        End Property
        
        Public Property CodigoProv As Integer
            Get
                Return CType(Me(Me.tablecompras.CodigoProvColumn),Integer)
            End Get
            Set
                Me(Me.tablecompras.CodigoProvColumn) = value
            End Set
        End Property
        
        Public Property SubTotalGravado As Double
            Get
                Return CType(Me(Me.tablecompras.SubTotalGravadoColumn),Double)
            End Get
            Set
                Me(Me.tablecompras.SubTotalGravadoColumn) = value
            End Set
        End Property
        
        Public Property SubTotalExento As Double
            Get
                Return CType(Me(Me.tablecompras.SubTotalExentoColumn),Double)
            End Get
            Set
                Me(Me.tablecompras.SubTotalExentoColumn) = value
            End Set
        End Property
        
        Public Property Descuento As Double
            Get
                Return CType(Me(Me.tablecompras.DescuentoColumn),Double)
            End Get
            Set
                Me(Me.tablecompras.DescuentoColumn) = value
            End Set
        End Property
        
        Public Property Impuesto As Double
            Get
                Return CType(Me(Me.tablecompras.ImpuestoColumn),Double)
            End Get
            Set
                Me(Me.tablecompras.ImpuestoColumn) = value
            End Set
        End Property
        
        Public Property TotalFactura As Double
            Get
                Return CType(Me(Me.tablecompras.TotalFacturaColumn),Double)
            End Get
            Set
                Me(Me.tablecompras.TotalFacturaColumn) = value
            End Set
        End Property
        
        Public Property Fecha As Date
            Get
                Return CType(Me(Me.tablecompras.FechaColumn),Date)
            End Get
            Set
                Me(Me.tablecompras.FechaColumn) = value
            End Set
        End Property
        
        Public Property Vence As Date
            Get
                Return CType(Me(Me.tablecompras.VenceColumn),Date)
            End Get
            Set
                Me(Me.tablecompras.VenceColumn) = value
            End Set
        End Property
        
        Public Property FechaIngreso As Date
            Get
                Return CType(Me(Me.tablecompras.FechaIngresoColumn),Date)
            End Get
            Set
                Me(Me.tablecompras.FechaIngresoColumn) = value
            End Set
        End Property
        
        Public Property MotivoGasto As String
            Get
                Return CType(Me(Me.tablecompras.MotivoGastoColumn),String)
            End Get
            Set
                Me(Me.tablecompras.MotivoGastoColumn) = value
            End Set
        End Property
        
        Public Property Compra As Boolean
            Get
                Return CType(Me(Me.tablecompras.CompraColumn),Boolean)
            End Get
            Set
                Me(Me.tablecompras.CompraColumn) = value
            End Set
        End Property
        
        Public Property Contabilizado As Boolean
            Get
                Return CType(Me(Me.tablecompras.ContabilizadoColumn),Boolean)
            End Get
            Set
                Me(Me.tablecompras.ContabilizadoColumn) = value
            End Set
        End Property
        
        Public Property Consignacion As Boolean
            Get
                Return CType(Me(Me.tablecompras.ConsignacionColumn),Boolean)
            End Get
            Set
                Me(Me.tablecompras.ConsignacionColumn) = value
            End Set
        End Property
        
        Public Property Asiento As String
            Get
                Return CType(Me(Me.tablecompras.AsientoColumn),String)
            End Get
            Set
                Me(Me.tablecompras.AsientoColumn) = value
            End Set
        End Property
        
        Public Property ContaInve As Boolean
            Get
                Return CType(Me(Me.tablecompras.ContaInveColumn),Boolean)
            End Get
            Set
                Me(Me.tablecompras.ContaInveColumn) = value
            End Set
        End Property
        
        Public Property AsientoInve As Double
            Get
                Return CType(Me(Me.tablecompras.AsientoInveColumn),Double)
            End Get
            Set
                Me(Me.tablecompras.AsientoInveColumn) = value
            End Set
        End Property
        
        Public Property TipoCompra As String
            Get
                Return CType(Me(Me.tablecompras.TipoCompraColumn),String)
            End Get
            Set
                Me(Me.tablecompras.TipoCompraColumn) = value
            End Set
        End Property
        
        Public Property CedulaUsuario As String
            Get
                Return CType(Me(Me.tablecompras.CedulaUsuarioColumn),String)
            End Get
            Set
                Me(Me.tablecompras.CedulaUsuarioColumn) = value
            End Set
        End Property
        
        Public Property Cod_MonedaCompra As Integer
            Get
                Return CType(Me(Me.tablecompras.Cod_MonedaCompraColumn),Integer)
            End Get
            Set
                Me(Me.tablecompras.Cod_MonedaCompraColumn) = value
            End Set
        End Property
        
        Public Property Id_Compra As Long
            Get
                Return CType(Me(Me.tablecompras.Id_CompraColumn),Long)
            End Get
            Set
                Me(Me.tablecompras.Id_CompraColumn) = value
            End Set
        End Property
        
        Public Property TipoCambio As Double
            Get
                Return CType(Me(Me.tablecompras.TipoCambioColumn),Double)
            End Get
            Set
                Me(Me.tablecompras.TipoCambioColumn) = value
            End Set
        End Property
        
        Public Property MontoFactor As Single
            Get
                Return CType(Me(Me.tablecompras.MontoFactorColumn),Single)
            End Get
            Set
                Me(Me.tablecompras.MontoFactorColumn) = value
            End Set
        End Property
        
        Public Property UsuariosRow As UsuariosRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Usuarioscompras")),UsuariosRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Usuarioscompras"))
            End Set
        End Property
        
        Public Property MonedaRow As MonedaRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Monedacompras")),MonedaRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Monedacompras"))
            End Set
        End Property
        
        Public Property ProveedoresRow As ProveedoresRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Proveedorescompras")),ProveedoresRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Proveedorescompras"))
            End Set
        End Property
        
        Public Function Getarticulos_compradosRows() As articulos_compradosRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("comprasarticulos_comprados")),articulos_compradosRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class comprasRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As comprasRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As comprasRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As comprasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
