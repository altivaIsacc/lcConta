'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsCuentas
    Inherits DataSet
    
    Private tableCuentas_bancarias As Cuentas_bancariasDataTable
    
    Private tableDeposito As DepositoDataTable
    
    Private tableDeposito_Detalle As Deposito_DetalleDataTable
    
    Private relationDepositoDeposito_Detalle As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Cuentas_bancarias")) Is Nothing) Then
                Me.Tables.Add(New Cuentas_bancariasDataTable(ds.Tables("Cuentas_bancarias")))
            End If
            If (Not (ds.Tables("Deposito")) Is Nothing) Then
                Me.Tables.Add(New DepositoDataTable(ds.Tables("Deposito")))
            End If
            If (Not (ds.Tables("Deposito_Detalle")) Is Nothing) Then
                Me.Tables.Add(New Deposito_DetalleDataTable(ds.Tables("Deposito_Detalle")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Cuentas_bancarias As Cuentas_bancariasDataTable
        Get
            Return Me.tableCuentas_bancarias
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Deposito As DepositoDataTable
        Get
            Return Me.tableDeposito
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Deposito_Detalle As Deposito_DetalleDataTable
        Get
            Return Me.tableDeposito_Detalle
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsCuentas = CType(MyBase.Clone,dsCuentas)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Cuentas_bancarias")) Is Nothing) Then
            Me.Tables.Add(New Cuentas_bancariasDataTable(ds.Tables("Cuentas_bancarias")))
        End If
        If (Not (ds.Tables("Deposito")) Is Nothing) Then
            Me.Tables.Add(New DepositoDataTable(ds.Tables("Deposito")))
        End If
        If (Not (ds.Tables("Deposito_Detalle")) Is Nothing) Then
            Me.Tables.Add(New Deposito_DetalleDataTable(ds.Tables("Deposito_Detalle")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableCuentas_bancarias = CType(Me.Tables("Cuentas_bancarias"),Cuentas_bancariasDataTable)
        If (Not (Me.tableCuentas_bancarias) Is Nothing) Then
            Me.tableCuentas_bancarias.InitVars
        End If
        Me.tableDeposito = CType(Me.Tables("Deposito"),DepositoDataTable)
        If (Not (Me.tableDeposito) Is Nothing) Then
            Me.tableDeposito.InitVars
        End If
        Me.tableDeposito_Detalle = CType(Me.Tables("Deposito_Detalle"),Deposito_DetalleDataTable)
        If (Not (Me.tableDeposito_Detalle) Is Nothing) Then
            Me.tableDeposito_Detalle.InitVars
        End If
        Me.relationDepositoDeposito_Detalle = Me.Relations("DepositoDeposito_Detalle")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsCuentas"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/dsCuentas.xsd"
        Me.Locale = New System.Globalization.CultureInfo("es-CR")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableCuentas_bancarias = New Cuentas_bancariasDataTable
        Me.Tables.Add(Me.tableCuentas_bancarias)
        Me.tableDeposito = New DepositoDataTable
        Me.Tables.Add(Me.tableDeposito)
        Me.tableDeposito_Detalle = New Deposito_DetalleDataTable
        Me.Tables.Add(Me.tableDeposito_Detalle)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("DepositoDeposito_Detalle", New DataColumn() {Me.tableDeposito.Id_DepositoColumn}, New DataColumn() {Me.tableDeposito_Detalle.Id_DepositoColumn})
        Me.tableDeposito_Detalle.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationDepositoDeposito_Detalle = New DataRelation("DepositoDeposito_Detalle", New DataColumn() {Me.tableDeposito.Id_DepositoColumn}, New DataColumn() {Me.tableDeposito_Detalle.Id_DepositoColumn}, false)
        Me.Relations.Add(Me.relationDepositoDeposito_Detalle)
    End Sub
    
    Private Function ShouldSerializeCuentas_bancarias() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeDeposito() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeDeposito_Detalle() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub Cuentas_bancariasRowChangeEventHandler(ByVal sender As Object, ByVal e As Cuentas_bancariasRowChangeEvent)
    
    Public Delegate Sub DepositoRowChangeEventHandler(ByVal sender As Object, ByVal e As DepositoRowChangeEvent)
    
    Public Delegate Sub Deposito_DetalleRowChangeEventHandler(ByVal sender As Object, ByVal e As Deposito_DetalleRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Cuentas_bancariasDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCuenta As DataColumn
        
        Private columnCodigo_banco As DataColumn
        
        Private columntipoCuenta As DataColumn
        
        Private columnNombreCuenta As DataColumn
        
        Private columnId_CuentaBancaria As DataColumn
        
        Private columnSaldoInicial As DataColumn
        
        Private columnCuentaContable As DataColumn
        
        Private columnChequeInicial As DataColumn
        
        Private columnChequeFinal As DataColumn
        
        Private columnCod_Moneda As DataColumn
        
        Private columnNombreCuentaContable As DataColumn
        
        Friend Sub New()
            MyBase.New("Cuentas_bancarias")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CuentaColumn As DataColumn
            Get
                Return Me.columnCuenta
            End Get
        End Property
        
        Friend ReadOnly Property Codigo_bancoColumn As DataColumn
            Get
                Return Me.columnCodigo_banco
            End Get
        End Property
        
        Friend ReadOnly Property tipoCuentaColumn As DataColumn
            Get
                Return Me.columntipoCuenta
            End Get
        End Property
        
        Friend ReadOnly Property NombreCuentaColumn As DataColumn
            Get
                Return Me.columnNombreCuenta
            End Get
        End Property
        
        Friend ReadOnly Property Id_CuentaBancariaColumn As DataColumn
            Get
                Return Me.columnId_CuentaBancaria
            End Get
        End Property
        
        Friend ReadOnly Property SaldoInicialColumn As DataColumn
            Get
                Return Me.columnSaldoInicial
            End Get
        End Property
        
        Friend ReadOnly Property CuentaContableColumn As DataColumn
            Get
                Return Me.columnCuentaContable
            End Get
        End Property
        
        Friend ReadOnly Property ChequeInicialColumn As DataColumn
            Get
                Return Me.columnChequeInicial
            End Get
        End Property
        
        Friend ReadOnly Property ChequeFinalColumn As DataColumn
            Get
                Return Me.columnChequeFinal
            End Get
        End Property
        
        Friend ReadOnly Property Cod_MonedaColumn As DataColumn
            Get
                Return Me.columnCod_Moneda
            End Get
        End Property
        
        Friend ReadOnly Property NombreCuentaContableColumn As DataColumn
            Get
                Return Me.columnNombreCuentaContable
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Cuentas_bancariasRow
            Get
                Return CType(Me.Rows(index),Cuentas_bancariasRow)
            End Get
        End Property
        
        Public Event Cuentas_bancariasRowChanged As Cuentas_bancariasRowChangeEventHandler
        
        Public Event Cuentas_bancariasRowChanging As Cuentas_bancariasRowChangeEventHandler
        
        Public Event Cuentas_bancariasRowDeleted As Cuentas_bancariasRowChangeEventHandler
        
        Public Event Cuentas_bancariasRowDeleting As Cuentas_bancariasRowChangeEventHandler
        
        Public Overloads Sub AddCuentas_bancariasRow(ByVal row As Cuentas_bancariasRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCuentas_bancariasRow(ByVal Cuenta As String, ByVal Codigo_banco As Long, ByVal tipoCuenta As String, ByVal NombreCuenta As String, ByVal SaldoInicial As Double, ByVal CuentaContable As String, ByVal ChequeInicial As Integer, ByVal ChequeFinal As Integer, ByVal Cod_Moneda As Integer, ByVal NombreCuentaContable As String) As Cuentas_bancariasRow
            Dim rowCuentas_bancariasRow As Cuentas_bancariasRow = CType(Me.NewRow,Cuentas_bancariasRow)
            rowCuentas_bancariasRow.ItemArray = New Object() {Cuenta, Codigo_banco, tipoCuenta, NombreCuenta, Nothing, SaldoInicial, CuentaContable, ChequeInicial, ChequeFinal, Cod_Moneda, NombreCuentaContable}
            Me.Rows.Add(rowCuentas_bancariasRow)
            Return rowCuentas_bancariasRow
        End Function
        
        Public Function FindById_CuentaBancaria(ByVal Id_CuentaBancaria As Integer) As Cuentas_bancariasRow
            Return CType(Me.Rows.Find(New Object() {Id_CuentaBancaria}),Cuentas_bancariasRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Cuentas_bancariasDataTable = CType(MyBase.Clone,Cuentas_bancariasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Cuentas_bancariasDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCuenta = Me.Columns("Cuenta")
            Me.columnCodigo_banco = Me.Columns("Codigo_banco")
            Me.columntipoCuenta = Me.Columns("tipoCuenta")
            Me.columnNombreCuenta = Me.Columns("NombreCuenta")
            Me.columnId_CuentaBancaria = Me.Columns("Id_CuentaBancaria")
            Me.columnSaldoInicial = Me.Columns("SaldoInicial")
            Me.columnCuentaContable = Me.Columns("CuentaContable")
            Me.columnChequeInicial = Me.Columns("ChequeInicial")
            Me.columnChequeFinal = Me.Columns("ChequeFinal")
            Me.columnCod_Moneda = Me.Columns("Cod_Moneda")
            Me.columnNombreCuentaContable = Me.Columns("NombreCuentaContable")
        End Sub
        
        Private Sub InitClass()
            Me.columnCuenta = New DataColumn("Cuenta", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuenta)
            Me.columnCodigo_banco = New DataColumn("Codigo_banco", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCodigo_banco)
            Me.columntipoCuenta = New DataColumn("tipoCuenta", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntipoCuenta)
            Me.columnNombreCuenta = New DataColumn("NombreCuenta", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombreCuenta)
            Me.columnId_CuentaBancaria = New DataColumn("Id_CuentaBancaria", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_CuentaBancaria)
            Me.columnSaldoInicial = New DataColumn("SaldoInicial", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaldoInicial)
            Me.columnCuentaContable = New DataColumn("CuentaContable", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuentaContable)
            Me.columnChequeInicial = New DataColumn("ChequeInicial", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChequeInicial)
            Me.columnChequeFinal = New DataColumn("ChequeFinal", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnChequeFinal)
            Me.columnCod_Moneda = New DataColumn("Cod_Moneda", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCod_Moneda)
            Me.columnNombreCuentaContable = New DataColumn("NombreCuentaContable", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombreCuentaContable)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId_CuentaBancaria}, true))
            Me.columnCuenta.AllowDBNull = false
            Me.columnCodigo_banco.AllowDBNull = false
            Me.columntipoCuenta.AllowDBNull = false
            Me.columnNombreCuenta.AllowDBNull = false
            Me.columnId_CuentaBancaria.AutoIncrement = true
            Me.columnId_CuentaBancaria.AllowDBNull = false
            Me.columnId_CuentaBancaria.ReadOnly = true
            Me.columnId_CuentaBancaria.Unique = true
            Me.columnSaldoInicial.AllowDBNull = false
            Me.columnCuentaContable.AllowDBNull = false
            Me.columnChequeInicial.AllowDBNull = false
            Me.columnChequeFinal.AllowDBNull = false
            Me.columnCod_Moneda.AllowDBNull = false
            Me.columnNombreCuentaContable.AllowDBNull = false
        End Sub
        
        Public Function NewCuentas_bancariasRow() As Cuentas_bancariasRow
            Return CType(Me.NewRow,Cuentas_bancariasRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Cuentas_bancariasRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Cuentas_bancariasRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Cuentas_bancariasRowChangedEvent) Is Nothing) Then
                RaiseEvent Cuentas_bancariasRowChanged(Me, New Cuentas_bancariasRowChangeEvent(CType(e.Row,Cuentas_bancariasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Cuentas_bancariasRowChangingEvent) Is Nothing) Then
                RaiseEvent Cuentas_bancariasRowChanging(Me, New Cuentas_bancariasRowChangeEvent(CType(e.Row,Cuentas_bancariasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Cuentas_bancariasRowDeletedEvent) Is Nothing) Then
                RaiseEvent Cuentas_bancariasRowDeleted(Me, New Cuentas_bancariasRowChangeEvent(CType(e.Row,Cuentas_bancariasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Cuentas_bancariasRowDeletingEvent) Is Nothing) Then
                RaiseEvent Cuentas_bancariasRowDeleting(Me, New Cuentas_bancariasRowChangeEvent(CType(e.Row,Cuentas_bancariasRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCuentas_bancariasRow(ByVal row As Cuentas_bancariasRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Cuentas_bancariasRow
        Inherits DataRow
        
        Private tableCuentas_bancarias As Cuentas_bancariasDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCuentas_bancarias = CType(Me.Table,Cuentas_bancariasDataTable)
        End Sub
        
        Public Property Cuenta As String
            Get
                Return CType(Me(Me.tableCuentas_bancarias.CuentaColumn),String)
            End Get
            Set
                Me(Me.tableCuentas_bancarias.CuentaColumn) = value
            End Set
        End Property
        
        Public Property Codigo_banco As Long
            Get
                Return CType(Me(Me.tableCuentas_bancarias.Codigo_bancoColumn),Long)
            End Get
            Set
                Me(Me.tableCuentas_bancarias.Codigo_bancoColumn) = value
            End Set
        End Property
        
        Public Property tipoCuenta As String
            Get
                Return CType(Me(Me.tableCuentas_bancarias.tipoCuentaColumn),String)
            End Get
            Set
                Me(Me.tableCuentas_bancarias.tipoCuentaColumn) = value
            End Set
        End Property
        
        Public Property NombreCuenta As String
            Get
                Return CType(Me(Me.tableCuentas_bancarias.NombreCuentaColumn),String)
            End Get
            Set
                Me(Me.tableCuentas_bancarias.NombreCuentaColumn) = value
            End Set
        End Property
        
        Public Property Id_CuentaBancaria As Integer
            Get
                Return CType(Me(Me.tableCuentas_bancarias.Id_CuentaBancariaColumn),Integer)
            End Get
            Set
                Me(Me.tableCuentas_bancarias.Id_CuentaBancariaColumn) = value
            End Set
        End Property
        
        Public Property SaldoInicial As Double
            Get
                Return CType(Me(Me.tableCuentas_bancarias.SaldoInicialColumn),Double)
            End Get
            Set
                Me(Me.tableCuentas_bancarias.SaldoInicialColumn) = value
            End Set
        End Property
        
        Public Property CuentaContable As String
            Get
                Return CType(Me(Me.tableCuentas_bancarias.CuentaContableColumn),String)
            End Get
            Set
                Me(Me.tableCuentas_bancarias.CuentaContableColumn) = value
            End Set
        End Property
        
        Public Property ChequeInicial As Integer
            Get
                Return CType(Me(Me.tableCuentas_bancarias.ChequeInicialColumn),Integer)
            End Get
            Set
                Me(Me.tableCuentas_bancarias.ChequeInicialColumn) = value
            End Set
        End Property
        
        Public Property ChequeFinal As Integer
            Get
                Return CType(Me(Me.tableCuentas_bancarias.ChequeFinalColumn),Integer)
            End Get
            Set
                Me(Me.tableCuentas_bancarias.ChequeFinalColumn) = value
            End Set
        End Property
        
        Public Property Cod_Moneda As Integer
            Get
                Return CType(Me(Me.tableCuentas_bancarias.Cod_MonedaColumn),Integer)
            End Get
            Set
                Me(Me.tableCuentas_bancarias.Cod_MonedaColumn) = value
            End Set
        End Property
        
        Public Property NombreCuentaContable As String
            Get
                Return CType(Me(Me.tableCuentas_bancarias.NombreCuentaContableColumn),String)
            End Get
            Set
                Me(Me.tableCuentas_bancarias.NombreCuentaContableColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Cuentas_bancariasRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Cuentas_bancariasRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Cuentas_bancariasRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Cuentas_bancariasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DepositoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnNumeroDocumento As DataColumn
        
        Private columnId_CuentaBancaria As DataColumn
        
        Private columnId_Deposito As DataColumn
        
        Private columnFecha As DataColumn
        
        Private columnMonto As DataColumn
        
        Private columnConcepto As DataColumn
        
        Private columnAnulado As DataColumn
        
        Private columnConciliado As DataColumn
        
        Private columnContabilizado As DataColumn
        
        Private columnCed_Usuario As DataColumn
        
        Private columnAsiento As DataColumn
        
        Private columnNum_Conciliacion As DataColumn
        
        Friend Sub New()
            MyBase.New("Deposito")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property NumeroDocumentoColumn As DataColumn
            Get
                Return Me.columnNumeroDocumento
            End Get
        End Property
        
        Friend ReadOnly Property Id_CuentaBancariaColumn As DataColumn
            Get
                Return Me.columnId_CuentaBancaria
            End Get
        End Property
        
        Friend ReadOnly Property Id_DepositoColumn As DataColumn
            Get
                Return Me.columnId_Deposito
            End Get
        End Property
        
        Friend ReadOnly Property FechaColumn As DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        Friend ReadOnly Property MontoColumn As DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        Friend ReadOnly Property ConceptoColumn As DataColumn
            Get
                Return Me.columnConcepto
            End Get
        End Property
        
        Friend ReadOnly Property AnuladoColumn As DataColumn
            Get
                Return Me.columnAnulado
            End Get
        End Property
        
        Friend ReadOnly Property ConciliadoColumn As DataColumn
            Get
                Return Me.columnConciliado
            End Get
        End Property
        
        Friend ReadOnly Property ContabilizadoColumn As DataColumn
            Get
                Return Me.columnContabilizado
            End Get
        End Property
        
        Friend ReadOnly Property Ced_UsuarioColumn As DataColumn
            Get
                Return Me.columnCed_Usuario
            End Get
        End Property
        
        Friend ReadOnly Property AsientoColumn As DataColumn
            Get
                Return Me.columnAsiento
            End Get
        End Property
        
        Friend ReadOnly Property Num_ConciliacionColumn As DataColumn
            Get
                Return Me.columnNum_Conciliacion
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DepositoRow
            Get
                Return CType(Me.Rows(index),DepositoRow)
            End Get
        End Property
        
        Public Event DepositoRowChanged As DepositoRowChangeEventHandler
        
        Public Event DepositoRowChanging As DepositoRowChangeEventHandler
        
        Public Event DepositoRowDeleted As DepositoRowChangeEventHandler
        
        Public Event DepositoRowDeleting As DepositoRowChangeEventHandler
        
        Public Overloads Sub AddDepositoRow(ByVal row As DepositoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDepositoRow(ByVal NumeroDocumento As Long, ByVal Id_CuentaBancaria As Integer, ByVal Fecha As Date, ByVal Monto As Double, ByVal Concepto As String, ByVal Anulado As Boolean, ByVal Conciliado As Boolean, ByVal Contabilizado As Boolean, ByVal Ced_Usuario As String, ByVal Asiento As Long, ByVal Num_Conciliacion As Long) As DepositoRow
            Dim rowDepositoRow As DepositoRow = CType(Me.NewRow,DepositoRow)
            rowDepositoRow.ItemArray = New Object() {NumeroDocumento, Id_CuentaBancaria, Nothing, Fecha, Monto, Concepto, Anulado, Conciliado, Contabilizado, Ced_Usuario, Asiento, Num_Conciliacion}
            Me.Rows.Add(rowDepositoRow)
            Return rowDepositoRow
        End Function
        
        Public Function FindById_Deposito(ByVal Id_Deposito As Long) As DepositoRow
            Return CType(Me.Rows.Find(New Object() {Id_Deposito}),DepositoRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DepositoDataTable = CType(MyBase.Clone,DepositoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DepositoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnNumeroDocumento = Me.Columns("NumeroDocumento")
            Me.columnId_CuentaBancaria = Me.Columns("Id_CuentaBancaria")
            Me.columnId_Deposito = Me.Columns("Id_Deposito")
            Me.columnFecha = Me.Columns("Fecha")
            Me.columnMonto = Me.Columns("Monto")
            Me.columnConcepto = Me.Columns("Concepto")
            Me.columnAnulado = Me.Columns("Anulado")
            Me.columnConciliado = Me.Columns("Conciliado")
            Me.columnContabilizado = Me.Columns("Contabilizado")
            Me.columnCed_Usuario = Me.Columns("Ced_Usuario")
            Me.columnAsiento = Me.Columns("Asiento")
            Me.columnNum_Conciliacion = Me.Columns("Num_Conciliacion")
        End Sub
        
        Private Sub InitClass()
            Me.columnNumeroDocumento = New DataColumn("NumeroDocumento", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNumeroDocumento)
            Me.columnId_CuentaBancaria = New DataColumn("Id_CuentaBancaria", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_CuentaBancaria)
            Me.columnId_Deposito = New DataColumn("Id_Deposito", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Deposito)
            Me.columnFecha = New DataColumn("Fecha", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha)
            Me.columnMonto = New DataColumn("Monto", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto)
            Me.columnConcepto = New DataColumn("Concepto", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnConcepto)
            Me.columnAnulado = New DataColumn("Anulado", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAnulado)
            Me.columnConciliado = New DataColumn("Conciliado", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnConciliado)
            Me.columnContabilizado = New DataColumn("Contabilizado", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnContabilizado)
            Me.columnCed_Usuario = New DataColumn("Ced_Usuario", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCed_Usuario)
            Me.columnAsiento = New DataColumn("Asiento", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAsiento)
            Me.columnNum_Conciliacion = New DataColumn("Num_Conciliacion", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNum_Conciliacion)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId_Deposito}, true))
            Me.Constraints.Add(New UniqueConstraint("Constraint2", New DataColumn() {Me.columnId_CuentaBancaria}, false))
            Me.columnNumeroDocumento.AllowDBNull = false
            Me.columnId_CuentaBancaria.Unique = true
            Me.columnId_Deposito.AutoIncrement = true
            Me.columnId_Deposito.AllowDBNull = false
            Me.columnId_Deposito.ReadOnly = true
            Me.columnId_Deposito.Unique = true
            Me.columnFecha.AllowDBNull = false
            Me.columnMonto.AllowDBNull = false
            Me.columnConcepto.AllowDBNull = false
            Me.columnAnulado.AllowDBNull = false
            Me.columnConciliado.AllowDBNull = false
            Me.columnContabilizado.AllowDBNull = false
            Me.columnCed_Usuario.AllowDBNull = false
            Me.columnAsiento.AllowDBNull = false
            Me.columnNum_Conciliacion.AllowDBNull = false
        End Sub
        
        Public Function NewDepositoRow() As DepositoRow
            Return CType(Me.NewRow,DepositoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DepositoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DepositoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DepositoRowChangedEvent) Is Nothing) Then
                RaiseEvent DepositoRowChanged(Me, New DepositoRowChangeEvent(CType(e.Row,DepositoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DepositoRowChangingEvent) Is Nothing) Then
                RaiseEvent DepositoRowChanging(Me, New DepositoRowChangeEvent(CType(e.Row,DepositoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DepositoRowDeletedEvent) Is Nothing) Then
                RaiseEvent DepositoRowDeleted(Me, New DepositoRowChangeEvent(CType(e.Row,DepositoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DepositoRowDeletingEvent) Is Nothing) Then
                RaiseEvent DepositoRowDeleting(Me, New DepositoRowChangeEvent(CType(e.Row,DepositoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDepositoRow(ByVal row As DepositoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DepositoRow
        Inherits DataRow
        
        Private tableDeposito As DepositoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDeposito = CType(Me.Table,DepositoDataTable)
        End Sub
        
        Public Property NumeroDocumento As Long
            Get
                Return CType(Me(Me.tableDeposito.NumeroDocumentoColumn),Long)
            End Get
            Set
                Me(Me.tableDeposito.NumeroDocumentoColumn) = value
            End Set
        End Property
        
        Public Property Id_CuentaBancaria As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDeposito.Id_CuentaBancariaColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeposito.Id_CuentaBancariaColumn) = value
            End Set
        End Property
        
        Public Property Id_Deposito As Long
            Get
                Return CType(Me(Me.tableDeposito.Id_DepositoColumn),Long)
            End Get
            Set
                Me(Me.tableDeposito.Id_DepositoColumn) = value
            End Set
        End Property
        
        Public Property Fecha As Date
            Get
                Return CType(Me(Me.tableDeposito.FechaColumn),Date)
            End Get
            Set
                Me(Me.tableDeposito.FechaColumn) = value
            End Set
        End Property
        
        Public Property Monto As Double
            Get
                Return CType(Me(Me.tableDeposito.MontoColumn),Double)
            End Get
            Set
                Me(Me.tableDeposito.MontoColumn) = value
            End Set
        End Property
        
        Public Property Concepto As String
            Get
                Return CType(Me(Me.tableDeposito.ConceptoColumn),String)
            End Get
            Set
                Me(Me.tableDeposito.ConceptoColumn) = value
            End Set
        End Property
        
        Public Property Anulado As Boolean
            Get
                Return CType(Me(Me.tableDeposito.AnuladoColumn),Boolean)
            End Get
            Set
                Me(Me.tableDeposito.AnuladoColumn) = value
            End Set
        End Property
        
        Public Property Conciliado As Boolean
            Get
                Return CType(Me(Me.tableDeposito.ConciliadoColumn),Boolean)
            End Get
            Set
                Me(Me.tableDeposito.ConciliadoColumn) = value
            End Set
        End Property
        
        Public Property Contabilizado As Boolean
            Get
                Return CType(Me(Me.tableDeposito.ContabilizadoColumn),Boolean)
            End Get
            Set
                Me(Me.tableDeposito.ContabilizadoColumn) = value
            End Set
        End Property
        
        Public Property Ced_Usuario As String
            Get
                Return CType(Me(Me.tableDeposito.Ced_UsuarioColumn),String)
            End Get
            Set
                Me(Me.tableDeposito.Ced_UsuarioColumn) = value
            End Set
        End Property
        
        Public Property Asiento As Long
            Get
                Return CType(Me(Me.tableDeposito.AsientoColumn),Long)
            End Get
            Set
                Me(Me.tableDeposito.AsientoColumn) = value
            End Set
        End Property
        
        Public Property Num_Conciliacion As Long
            Get
                Return CType(Me(Me.tableDeposito.Num_ConciliacionColumn),Long)
            End Get
            Set
                Me(Me.tableDeposito.Num_ConciliacionColumn) = value
            End Set
        End Property
        
        Public Function IsId_CuentaBancariaNull() As Boolean
            Return Me.IsNull(Me.tableDeposito.Id_CuentaBancariaColumn)
        End Function
        
        Public Sub SetId_CuentaBancariaNull()
            Me(Me.tableDeposito.Id_CuentaBancariaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetDeposito_DetalleRows() As Deposito_DetalleRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("DepositoDeposito_Detalle")),Deposito_DetalleRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DepositoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DepositoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DepositoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DepositoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Deposito_DetalleDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId_DepositoDet As DataColumn
        
        Private columnId_Deposito As DataColumn
        
        Private columnCuentaContable As DataColumn
        
        Private columnDescripcionMov As DataColumn
        
        Private columnMonto As DataColumn
        
        Private columnNombreCuenta As DataColumn
        
        Friend Sub New()
            MyBase.New("Deposito_Detalle")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Id_DepositoDetColumn As DataColumn
            Get
                Return Me.columnId_DepositoDet
            End Get
        End Property
        
        Friend ReadOnly Property Id_DepositoColumn As DataColumn
            Get
                Return Me.columnId_Deposito
            End Get
        End Property
        
        Friend ReadOnly Property CuentaContableColumn As DataColumn
            Get
                Return Me.columnCuentaContable
            End Get
        End Property
        
        Friend ReadOnly Property DescripcionMovColumn As DataColumn
            Get
                Return Me.columnDescripcionMov
            End Get
        End Property
        
        Friend ReadOnly Property MontoColumn As DataColumn
            Get
                Return Me.columnMonto
            End Get
        End Property
        
        Friend ReadOnly Property NombreCuentaColumn As DataColumn
            Get
                Return Me.columnNombreCuenta
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Deposito_DetalleRow
            Get
                Return CType(Me.Rows(index),Deposito_DetalleRow)
            End Get
        End Property
        
        Public Event Deposito_DetalleRowChanged As Deposito_DetalleRowChangeEventHandler
        
        Public Event Deposito_DetalleRowChanging As Deposito_DetalleRowChangeEventHandler
        
        Public Event Deposito_DetalleRowDeleted As Deposito_DetalleRowChangeEventHandler
        
        Public Event Deposito_DetalleRowDeleting As Deposito_DetalleRowChangeEventHandler
        
        Public Overloads Sub AddDeposito_DetalleRow(ByVal row As Deposito_DetalleRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDeposito_DetalleRow(ByVal parentDepositoRowByDepositoDeposito_Detalle As DepositoRow, ByVal CuentaContable As String, ByVal DescripcionMov As String, ByVal Monto As Double, ByVal NombreCuenta As String) As Deposito_DetalleRow
            Dim rowDeposito_DetalleRow As Deposito_DetalleRow = CType(Me.NewRow,Deposito_DetalleRow)
            rowDeposito_DetalleRow.ItemArray = New Object() {Nothing, parentDepositoRowByDepositoDeposito_Detalle(2), CuentaContable, DescripcionMov, Monto, NombreCuenta}
            Me.Rows.Add(rowDeposito_DetalleRow)
            Return rowDeposito_DetalleRow
        End Function
        
        Public Function FindById_DepositoDet(ByVal Id_DepositoDet As Long) As Deposito_DetalleRow
            Return CType(Me.Rows.Find(New Object() {Id_DepositoDet}),Deposito_DetalleRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Deposito_DetalleDataTable = CType(MyBase.Clone,Deposito_DetalleDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Deposito_DetalleDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId_DepositoDet = Me.Columns("Id_DepositoDet")
            Me.columnId_Deposito = Me.Columns("Id_Deposito")
            Me.columnCuentaContable = Me.Columns("CuentaContable")
            Me.columnDescripcionMov = Me.Columns("DescripcionMov")
            Me.columnMonto = Me.Columns("Monto")
            Me.columnNombreCuenta = Me.Columns("NombreCuenta")
        End Sub
        
        Private Sub InitClass()
            Me.columnId_DepositoDet = New DataColumn("Id_DepositoDet", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_DepositoDet)
            Me.columnId_Deposito = New DataColumn("Id_Deposito", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Deposito)
            Me.columnCuentaContable = New DataColumn("CuentaContable", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuentaContable)
            Me.columnDescripcionMov = New DataColumn("DescripcionMov", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcionMov)
            Me.columnMonto = New DataColumn("Monto", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonto)
            Me.columnNombreCuenta = New DataColumn("NombreCuenta", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNombreCuenta)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnId_DepositoDet}, true))
            Me.columnId_DepositoDet.AutoIncrement = true
            Me.columnId_DepositoDet.AllowDBNull = false
            Me.columnId_DepositoDet.ReadOnly = true
            Me.columnId_DepositoDet.Unique = true
            Me.columnId_Deposito.AllowDBNull = false
            Me.columnCuentaContable.AllowDBNull = false
            Me.columnDescripcionMov.AllowDBNull = false
            Me.columnMonto.AllowDBNull = false
            Me.columnNombreCuenta.AllowDBNull = false
        End Sub
        
        Public Function NewDeposito_DetalleRow() As Deposito_DetalleRow
            Return CType(Me.NewRow,Deposito_DetalleRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Deposito_DetalleRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Deposito_DetalleRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Deposito_DetalleRowChangedEvent) Is Nothing) Then
                RaiseEvent Deposito_DetalleRowChanged(Me, New Deposito_DetalleRowChangeEvent(CType(e.Row,Deposito_DetalleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Deposito_DetalleRowChangingEvent) Is Nothing) Then
                RaiseEvent Deposito_DetalleRowChanging(Me, New Deposito_DetalleRowChangeEvent(CType(e.Row,Deposito_DetalleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Deposito_DetalleRowDeletedEvent) Is Nothing) Then
                RaiseEvent Deposito_DetalleRowDeleted(Me, New Deposito_DetalleRowChangeEvent(CType(e.Row,Deposito_DetalleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Deposito_DetalleRowDeletingEvent) Is Nothing) Then
                RaiseEvent Deposito_DetalleRowDeleting(Me, New Deposito_DetalleRowChangeEvent(CType(e.Row,Deposito_DetalleRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDeposito_DetalleRow(ByVal row As Deposito_DetalleRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Deposito_DetalleRow
        Inherits DataRow
        
        Private tableDeposito_Detalle As Deposito_DetalleDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDeposito_Detalle = CType(Me.Table,Deposito_DetalleDataTable)
        End Sub
        
        Public Property Id_DepositoDet As Long
            Get
                Return CType(Me(Me.tableDeposito_Detalle.Id_DepositoDetColumn),Long)
            End Get
            Set
                Me(Me.tableDeposito_Detalle.Id_DepositoDetColumn) = value
            End Set
        End Property
        
        Public Property Id_Deposito As Long
            Get
                Return CType(Me(Me.tableDeposito_Detalle.Id_DepositoColumn),Long)
            End Get
            Set
                Me(Me.tableDeposito_Detalle.Id_DepositoColumn) = value
            End Set
        End Property
        
        Public Property CuentaContable As String
            Get
                Return CType(Me(Me.tableDeposito_Detalle.CuentaContableColumn),String)
            End Get
            Set
                Me(Me.tableDeposito_Detalle.CuentaContableColumn) = value
            End Set
        End Property
        
        Public Property DescripcionMov As String
            Get
                Return CType(Me(Me.tableDeposito_Detalle.DescripcionMovColumn),String)
            End Get
            Set
                Me(Me.tableDeposito_Detalle.DescripcionMovColumn) = value
            End Set
        End Property
        
        Public Property Monto As Double
            Get
                Return CType(Me(Me.tableDeposito_Detalle.MontoColumn),Double)
            End Get
            Set
                Me(Me.tableDeposito_Detalle.MontoColumn) = value
            End Set
        End Property
        
        Public Property NombreCuenta As String
            Get
                Return CType(Me(Me.tableDeposito_Detalle.NombreCuentaColumn),String)
            End Get
            Set
                Me(Me.tableDeposito_Detalle.NombreCuentaColumn) = value
            End Set
        End Property
        
        Public Property DepositoRow As DepositoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("DepositoDeposito_Detalle")),DepositoRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("DepositoDeposito_Detalle"))
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Deposito_DetalleRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Deposito_DetalleRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Deposito_DetalleRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Deposito_DetalleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
