'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dtsPresupuesto
    Inherits DataSet
    
    Private tablePresupuestos As PresupuestosDataTable
    
    Private tableCuentaContable As CuentaContableDataTable
    
    Private tableCuentaContable_Presupuestaria As CuentaContable_PresupuestariaDataTable
    
    Private tablePeriodoFiscal As PeriodoFiscalDataTable
    
    Private tabledatos As datosDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Presupuestos")) Is Nothing) Then
                Me.Tables.Add(New PresupuestosDataTable(ds.Tables("Presupuestos")))
            End If
            If (Not (ds.Tables("CuentaContable")) Is Nothing) Then
                Me.Tables.Add(New CuentaContableDataTable(ds.Tables("CuentaContable")))
            End If
            If (Not (ds.Tables("CuentaContable_Presupuestaria")) Is Nothing) Then
                Me.Tables.Add(New CuentaContable_PresupuestariaDataTable(ds.Tables("CuentaContable_Presupuestaria")))
            End If
            If (Not (ds.Tables("PeriodoFiscal")) Is Nothing) Then
                Me.Tables.Add(New PeriodoFiscalDataTable(ds.Tables("PeriodoFiscal")))
            End If
            If (Not (ds.Tables("datos")) Is Nothing) Then
                Me.Tables.Add(New datosDataTable(ds.Tables("datos")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Presupuestos As PresupuestosDataTable
        Get
            Return Me.tablePresupuestos
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CuentaContable As CuentaContableDataTable
        Get
            Return Me.tableCuentaContable
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CuentaContable_Presupuestaria As CuentaContable_PresupuestariaDataTable
        Get
            Return Me.tableCuentaContable_Presupuestaria
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PeriodoFiscal As PeriodoFiscalDataTable
        Get
            Return Me.tablePeriodoFiscal
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property datos As datosDataTable
        Get
            Return Me.tabledatos
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dtsPresupuesto = CType(MyBase.Clone,dtsPresupuesto)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Presupuestos")) Is Nothing) Then
            Me.Tables.Add(New PresupuestosDataTable(ds.Tables("Presupuestos")))
        End If
        If (Not (ds.Tables("CuentaContable")) Is Nothing) Then
            Me.Tables.Add(New CuentaContableDataTable(ds.Tables("CuentaContable")))
        End If
        If (Not (ds.Tables("CuentaContable_Presupuestaria")) Is Nothing) Then
            Me.Tables.Add(New CuentaContable_PresupuestariaDataTable(ds.Tables("CuentaContable_Presupuestaria")))
        End If
        If (Not (ds.Tables("PeriodoFiscal")) Is Nothing) Then
            Me.Tables.Add(New PeriodoFiscalDataTable(ds.Tables("PeriodoFiscal")))
        End If
        If (Not (ds.Tables("datos")) Is Nothing) Then
            Me.Tables.Add(New datosDataTable(ds.Tables("datos")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablePresupuestos = CType(Me.Tables("Presupuestos"),PresupuestosDataTable)
        If (Not (Me.tablePresupuestos) Is Nothing) Then
            Me.tablePresupuestos.InitVars
        End If
        Me.tableCuentaContable = CType(Me.Tables("CuentaContable"),CuentaContableDataTable)
        If (Not (Me.tableCuentaContable) Is Nothing) Then
            Me.tableCuentaContable.InitVars
        End If
        Me.tableCuentaContable_Presupuestaria = CType(Me.Tables("CuentaContable_Presupuestaria"),CuentaContable_PresupuestariaDataTable)
        If (Not (Me.tableCuentaContable_Presupuestaria) Is Nothing) Then
            Me.tableCuentaContable_Presupuestaria.InitVars
        End If
        Me.tablePeriodoFiscal = CType(Me.Tables("PeriodoFiscal"),PeriodoFiscalDataTable)
        If (Not (Me.tablePeriodoFiscal) Is Nothing) Then
            Me.tablePeriodoFiscal.InitVars
        End If
        Me.tabledatos = CType(Me.Tables("datos"),datosDataTable)
        If (Not (Me.tabledatos) Is Nothing) Then
            Me.tabledatos.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dtsPresupuesto"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dtsPresupuesto.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablePresupuestos = New PresupuestosDataTable
        Me.Tables.Add(Me.tablePresupuestos)
        Me.tableCuentaContable = New CuentaContableDataTable
        Me.Tables.Add(Me.tableCuentaContable)
        Me.tableCuentaContable_Presupuestaria = New CuentaContable_PresupuestariaDataTable
        Me.Tables.Add(Me.tableCuentaContable_Presupuestaria)
        Me.tablePeriodoFiscal = New PeriodoFiscalDataTable
        Me.Tables.Add(Me.tablePeriodoFiscal)
        Me.tabledatos = New datosDataTable
        Me.Tables.Add(Me.tabledatos)
    End Sub
    
    Private Function ShouldSerializePresupuestos() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCuentaContable() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCuentaContable_Presupuestaria() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePeriodoFiscal() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializedatos() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub PresupuestosRowChangeEventHandler(ByVal sender As Object, ByVal e As PresupuestosRowChangeEvent)
    
    Public Delegate Sub CuentaContableRowChangeEventHandler(ByVal sender As Object, ByVal e As CuentaContableRowChangeEvent)
    
    Public Delegate Sub CuentaContable_PresupuestariaRowChangeEventHandler(ByVal sender As Object, ByVal e As CuentaContable_PresupuestariaRowChangeEvent)
    
    Public Delegate Sub PeriodoFiscalRowChangeEventHandler(ByVal sender As Object, ByVal e As PeriodoFiscalRowChangeEvent)
    
    Public Delegate Sub datosRowChangeEventHandler(ByVal sender As Object, ByVal e As datosRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PresupuestosDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId_Presupuesto As DataColumn
        
        Private columnId_Periodo_Fiscal As DataColumn
        
        Private columnCuenta_Contable As DataColumn
        
        Private columnDescripcion As DataColumn
        
        Private columnNivel As DataColumn
        
        Private columnParentId As DataColumn
        
        Private columnId_Cuenta As DataColumn
        
        Private columnOCTUBRE As DataColumn
        
        Private columnNOVIEMBRE As DataColumn
        
        Private columnDICIEMBRE As DataColumn
        
        Private columnENERO As DataColumn
        
        Private columnFEBRERO As DataColumn
        
        Private columnMARZO As DataColumn
        
        Private columnABRIL As DataColumn
        
        Private columnMAYO As DataColumn
        
        Private columnJUNIO As DataColumn
        
        Private columnJULIO As DataColumn
        
        Private columnAGOSTO As DataColumn
        
        Private columnSEPTIEMBRE As DataColumn
        
        Private columnTOTAL As DataColumn
        
        Friend Sub New()
            MyBase.New("Presupuestos")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Id_PresupuestoColumn As DataColumn
            Get
                Return Me.columnId_Presupuesto
            End Get
        End Property
        
        Friend ReadOnly Property Id_Periodo_FiscalColumn As DataColumn
            Get
                Return Me.columnId_Periodo_Fiscal
            End Get
        End Property
        
        Friend ReadOnly Property Cuenta_ContableColumn As DataColumn
            Get
                Return Me.columnCuenta_Contable
            End Get
        End Property
        
        Friend ReadOnly Property DescripcionColumn As DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        Friend ReadOnly Property NivelColumn As DataColumn
            Get
                Return Me.columnNivel
            End Get
        End Property
        
        Friend ReadOnly Property ParentIdColumn As DataColumn
            Get
                Return Me.columnParentId
            End Get
        End Property
        
        Friend ReadOnly Property Id_CuentaColumn As DataColumn
            Get
                Return Me.columnId_Cuenta
            End Get
        End Property
        
        Friend ReadOnly Property OCTUBREColumn As DataColumn
            Get
                Return Me.columnOCTUBRE
            End Get
        End Property
        
        Friend ReadOnly Property NOVIEMBREColumn As DataColumn
            Get
                Return Me.columnNOVIEMBRE
            End Get
        End Property
        
        Friend ReadOnly Property DICIEMBREColumn As DataColumn
            Get
                Return Me.columnDICIEMBRE
            End Get
        End Property
        
        Friend ReadOnly Property ENEROColumn As DataColumn
            Get
                Return Me.columnENERO
            End Get
        End Property
        
        Friend ReadOnly Property FEBREROColumn As DataColumn
            Get
                Return Me.columnFEBRERO
            End Get
        End Property
        
        Friend ReadOnly Property MARZOColumn As DataColumn
            Get
                Return Me.columnMARZO
            End Get
        End Property
        
        Friend ReadOnly Property ABRILColumn As DataColumn
            Get
                Return Me.columnABRIL
            End Get
        End Property
        
        Friend ReadOnly Property MAYOColumn As DataColumn
            Get
                Return Me.columnMAYO
            End Get
        End Property
        
        Friend ReadOnly Property JUNIOColumn As DataColumn
            Get
                Return Me.columnJUNIO
            End Get
        End Property
        
        Friend ReadOnly Property JULIOColumn As DataColumn
            Get
                Return Me.columnJULIO
            End Get
        End Property
        
        Friend ReadOnly Property AGOSTOColumn As DataColumn
            Get
                Return Me.columnAGOSTO
            End Get
        End Property
        
        Friend ReadOnly Property SEPTIEMBREColumn As DataColumn
            Get
                Return Me.columnSEPTIEMBRE
            End Get
        End Property
        
        Friend ReadOnly Property TOTALColumn As DataColumn
            Get
                Return Me.columnTOTAL
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PresupuestosRow
            Get
                Return CType(Me.Rows(index),PresupuestosRow)
            End Get
        End Property
        
        Public Event PresupuestosRowChanged As PresupuestosRowChangeEventHandler
        
        Public Event PresupuestosRowChanging As PresupuestosRowChangeEventHandler
        
        Public Event PresupuestosRowDeleted As PresupuestosRowChangeEventHandler
        
        Public Event PresupuestosRowDeleting As PresupuestosRowChangeEventHandler
        
        Public Overloads Sub AddPresupuestosRow(ByVal row As PresupuestosRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPresupuestosRow( _
                    ByVal Id_Periodo_Fiscal As Integer,  _
                    ByVal Cuenta_Contable As String,  _
                    ByVal Descripcion As String,  _
                    ByVal Nivel As Short,  _
                    ByVal ParentId As Integer,  _
                    ByVal Id_Cuenta As Integer,  _
                    ByVal OCTUBRE As Double,  _
                    ByVal NOVIEMBRE As Double,  _
                    ByVal DICIEMBRE As Double,  _
                    ByVal ENERO As Double,  _
                    ByVal FEBRERO As Double,  _
                    ByVal MARZO As Double,  _
                    ByVal ABRIL As Double,  _
                    ByVal MAYO As Double,  _
                    ByVal JUNIO As Double,  _
                    ByVal JULIO As Double,  _
                    ByVal AGOSTO As Double,  _
                    ByVal SEPTIEMBRE As Double,  _
                    ByVal TOTAL As Double) As PresupuestosRow
            Dim rowPresupuestosRow As PresupuestosRow = CType(Me.NewRow,PresupuestosRow)
            rowPresupuestosRow.ItemArray = New Object() {Nothing, Id_Periodo_Fiscal, Cuenta_Contable, Descripcion, Nivel, ParentId, Id_Cuenta, OCTUBRE, NOVIEMBRE, DICIEMBRE, ENERO, FEBRERO, MARZO, ABRIL, MAYO, JUNIO, JULIO, AGOSTO, SEPTIEMBRE, TOTAL}
            Me.Rows.Add(rowPresupuestosRow)
            Return rowPresupuestosRow
        End Function
        
        Public Function FindById_Presupuesto(ByVal Id_Presupuesto As Long) As PresupuestosRow
            Return CType(Me.Rows.Find(New Object() {Id_Presupuesto}),PresupuestosRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PresupuestosDataTable = CType(MyBase.Clone,PresupuestosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PresupuestosDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId_Presupuesto = Me.Columns("Id_Presupuesto")
            Me.columnId_Periodo_Fiscal = Me.Columns("Id_Periodo_Fiscal")
            Me.columnCuenta_Contable = Me.Columns("Cuenta_Contable")
            Me.columnDescripcion = Me.Columns("Descripcion")
            Me.columnNivel = Me.Columns("Nivel")
            Me.columnParentId = Me.Columns("ParentId")
            Me.columnId_Cuenta = Me.Columns("Id_Cuenta")
            Me.columnOCTUBRE = Me.Columns("OCTUBRE")
            Me.columnNOVIEMBRE = Me.Columns("NOVIEMBRE")
            Me.columnDICIEMBRE = Me.Columns("DICIEMBRE")
            Me.columnENERO = Me.Columns("ENERO")
            Me.columnFEBRERO = Me.Columns("FEBRERO")
            Me.columnMARZO = Me.Columns("MARZO")
            Me.columnABRIL = Me.Columns("ABRIL")
            Me.columnMAYO = Me.Columns("MAYO")
            Me.columnJUNIO = Me.Columns("JUNIO")
            Me.columnJULIO = Me.Columns("JULIO")
            Me.columnAGOSTO = Me.Columns("AGOSTO")
            Me.columnSEPTIEMBRE = Me.Columns("SEPTIEMBRE")
            Me.columnTOTAL = Me.Columns("TOTAL")
        End Sub
        
        Private Sub InitClass()
            Me.columnId_Presupuesto = New DataColumn("Id_Presupuesto", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Presupuesto)
            Me.columnId_Periodo_Fiscal = New DataColumn("Id_Periodo_Fiscal", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Periodo_Fiscal)
            Me.columnCuenta_Contable = New DataColumn("Cuenta_Contable", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuenta_Contable)
            Me.columnDescripcion = New DataColumn("Descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcion)
            Me.columnNivel = New DataColumn("Nivel", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNivel)
            Me.columnParentId = New DataColumn("ParentId", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnParentId)
            Me.columnId_Cuenta = New DataColumn("Id_Cuenta", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Cuenta)
            Me.columnOCTUBRE = New DataColumn("OCTUBRE", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCTUBRE)
            Me.columnNOVIEMBRE = New DataColumn("NOVIEMBRE", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNOVIEMBRE)
            Me.columnDICIEMBRE = New DataColumn("DICIEMBRE", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDICIEMBRE)
            Me.columnENERO = New DataColumn("ENERO", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnENERO)
            Me.columnFEBRERO = New DataColumn("FEBRERO", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFEBRERO)
            Me.columnMARZO = New DataColumn("MARZO", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMARZO)
            Me.columnABRIL = New DataColumn("ABRIL", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnABRIL)
            Me.columnMAYO = New DataColumn("MAYO", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMAYO)
            Me.columnJUNIO = New DataColumn("JUNIO", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnJUNIO)
            Me.columnJULIO = New DataColumn("JULIO", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnJULIO)
            Me.columnAGOSTO = New DataColumn("AGOSTO", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAGOSTO)
            Me.columnSEPTIEMBRE = New DataColumn("SEPTIEMBRE", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSEPTIEMBRE)
            Me.columnTOTAL = New DataColumn("TOTAL", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTAL)
            Me.Constraints.Add(New UniqueConstraint("dtsPresupuestoKey1", New DataColumn() {Me.columnId_Presupuesto}, true))
            Me.columnId_Presupuesto.AutoIncrement = true
            Me.columnId_Presupuesto.AllowDBNull = false
            Me.columnId_Presupuesto.ReadOnly = true
            Me.columnId_Presupuesto.Unique = true
            Me.columnId_Periodo_Fiscal.AllowDBNull = false
            Me.columnCuenta_Contable.AllowDBNull = false
            Me.columnDescripcion.AllowDBNull = false
            Me.columnNivel.AllowDBNull = false
            Me.columnParentId.AllowDBNull = false
            Me.columnId_Cuenta.AllowDBNull = false
            Me.columnOCTUBRE.AllowDBNull = false
            Me.columnNOVIEMBRE.AllowDBNull = false
            Me.columnDICIEMBRE.AllowDBNull = false
            Me.columnENERO.AllowDBNull = false
            Me.columnFEBRERO.AllowDBNull = false
            Me.columnMARZO.AllowDBNull = false
            Me.columnABRIL.AllowDBNull = false
            Me.columnMAYO.AllowDBNull = false
            Me.columnJUNIO.AllowDBNull = false
            Me.columnJULIO.AllowDBNull = false
            Me.columnAGOSTO.AllowDBNull = false
            Me.columnSEPTIEMBRE.AllowDBNull = false
            Me.columnTOTAL.AllowDBNull = false
        End Sub
        
        Public Function NewPresupuestosRow() As PresupuestosRow
            Return CType(Me.NewRow,PresupuestosRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PresupuestosRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PresupuestosRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PresupuestosRowChangedEvent) Is Nothing) Then
                RaiseEvent PresupuestosRowChanged(Me, New PresupuestosRowChangeEvent(CType(e.Row,PresupuestosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PresupuestosRowChangingEvent) Is Nothing) Then
                RaiseEvent PresupuestosRowChanging(Me, New PresupuestosRowChangeEvent(CType(e.Row,PresupuestosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PresupuestosRowDeletedEvent) Is Nothing) Then
                RaiseEvent PresupuestosRowDeleted(Me, New PresupuestosRowChangeEvent(CType(e.Row,PresupuestosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PresupuestosRowDeletingEvent) Is Nothing) Then
                RaiseEvent PresupuestosRowDeleting(Me, New PresupuestosRowChangeEvent(CType(e.Row,PresupuestosRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePresupuestosRow(ByVal row As PresupuestosRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PresupuestosRow
        Inherits DataRow
        
        Private tablePresupuestos As PresupuestosDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePresupuestos = CType(Me.Table,PresupuestosDataTable)
        End Sub
        
        Public Property Id_Presupuesto As Long
            Get
                Return CType(Me(Me.tablePresupuestos.Id_PresupuestoColumn),Long)
            End Get
            Set
                Me(Me.tablePresupuestos.Id_PresupuestoColumn) = value
            End Set
        End Property
        
        Public Property Id_Periodo_Fiscal As Integer
            Get
                Return CType(Me(Me.tablePresupuestos.Id_Periodo_FiscalColumn),Integer)
            End Get
            Set
                Me(Me.tablePresupuestos.Id_Periodo_FiscalColumn) = value
            End Set
        End Property
        
        Public Property Cuenta_Contable As String
            Get
                Return CType(Me(Me.tablePresupuestos.Cuenta_ContableColumn),String)
            End Get
            Set
                Me(Me.tablePresupuestos.Cuenta_ContableColumn) = value
            End Set
        End Property
        
        Public Property Descripcion As String
            Get
                Return CType(Me(Me.tablePresupuestos.DescripcionColumn),String)
            End Get
            Set
                Me(Me.tablePresupuestos.DescripcionColumn) = value
            End Set
        End Property
        
        Public Property Nivel As Short
            Get
                Return CType(Me(Me.tablePresupuestos.NivelColumn),Short)
            End Get
            Set
                Me(Me.tablePresupuestos.NivelColumn) = value
            End Set
        End Property
        
        Public Property ParentId As Integer
            Get
                Return CType(Me(Me.tablePresupuestos.ParentIdColumn),Integer)
            End Get
            Set
                Me(Me.tablePresupuestos.ParentIdColumn) = value
            End Set
        End Property
        
        Public Property Id_Cuenta As Integer
            Get
                Return CType(Me(Me.tablePresupuestos.Id_CuentaColumn),Integer)
            End Get
            Set
                Me(Me.tablePresupuestos.Id_CuentaColumn) = value
            End Set
        End Property
        
        Public Property OCTUBRE As Double
            Get
                Return CType(Me(Me.tablePresupuestos.OCTUBREColumn),Double)
            End Get
            Set
                Me(Me.tablePresupuestos.OCTUBREColumn) = value
            End Set
        End Property
        
        Public Property NOVIEMBRE As Double
            Get
                Return CType(Me(Me.tablePresupuestos.NOVIEMBREColumn),Double)
            End Get
            Set
                Me(Me.tablePresupuestos.NOVIEMBREColumn) = value
            End Set
        End Property
        
        Public Property DICIEMBRE As Double
            Get
                Return CType(Me(Me.tablePresupuestos.DICIEMBREColumn),Double)
            End Get
            Set
                Me(Me.tablePresupuestos.DICIEMBREColumn) = value
            End Set
        End Property
        
        Public Property ENERO As Double
            Get
                Return CType(Me(Me.tablePresupuestos.ENEROColumn),Double)
            End Get
            Set
                Me(Me.tablePresupuestos.ENEROColumn) = value
            End Set
        End Property
        
        Public Property FEBRERO As Double
            Get
                Return CType(Me(Me.tablePresupuestos.FEBREROColumn),Double)
            End Get
            Set
                Me(Me.tablePresupuestos.FEBREROColumn) = value
            End Set
        End Property
        
        Public Property MARZO As Double
            Get
                Return CType(Me(Me.tablePresupuestos.MARZOColumn),Double)
            End Get
            Set
                Me(Me.tablePresupuestos.MARZOColumn) = value
            End Set
        End Property
        
        Public Property ABRIL As Double
            Get
                Return CType(Me(Me.tablePresupuestos.ABRILColumn),Double)
            End Get
            Set
                Me(Me.tablePresupuestos.ABRILColumn) = value
            End Set
        End Property
        
        Public Property MAYO As Double
            Get
                Return CType(Me(Me.tablePresupuestos.MAYOColumn),Double)
            End Get
            Set
                Me(Me.tablePresupuestos.MAYOColumn) = value
            End Set
        End Property
        
        Public Property JUNIO As Double
            Get
                Return CType(Me(Me.tablePresupuestos.JUNIOColumn),Double)
            End Get
            Set
                Me(Me.tablePresupuestos.JUNIOColumn) = value
            End Set
        End Property
        
        Public Property JULIO As Double
            Get
                Return CType(Me(Me.tablePresupuestos.JULIOColumn),Double)
            End Get
            Set
                Me(Me.tablePresupuestos.JULIOColumn) = value
            End Set
        End Property
        
        Public Property AGOSTO As Double
            Get
                Return CType(Me(Me.tablePresupuestos.AGOSTOColumn),Double)
            End Get
            Set
                Me(Me.tablePresupuestos.AGOSTOColumn) = value
            End Set
        End Property
        
        Public Property SEPTIEMBRE As Double
            Get
                Return CType(Me(Me.tablePresupuestos.SEPTIEMBREColumn),Double)
            End Get
            Set
                Me(Me.tablePresupuestos.SEPTIEMBREColumn) = value
            End Set
        End Property
        
        Public Property TOTAL As Double
            Get
                Return CType(Me(Me.tablePresupuestos.TOTALColumn),Double)
            End Get
            Set
                Me(Me.tablePresupuestos.TOTALColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PresupuestosRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PresupuestosRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PresupuestosRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PresupuestosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CuentaContableDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCuentaContable As DataColumn
        
        Private columnDescripcion As DataColumn
        
        Private columnNivel As DataColumn
        
        Private columnPARENTID As DataColumn
        
        Private columnid As DataColumn
        
        Friend Sub New()
            MyBase.New("CuentaContable")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CuentaContableColumn As DataColumn
            Get
                Return Me.columnCuentaContable
            End Get
        End Property
        
        Friend ReadOnly Property DescripcionColumn As DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        Friend ReadOnly Property NivelColumn As DataColumn
            Get
                Return Me.columnNivel
            End Get
        End Property
        
        Friend ReadOnly Property PARENTIDColumn As DataColumn
            Get
                Return Me.columnPARENTID
            End Get
        End Property
        
        Friend ReadOnly Property idColumn As DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CuentaContableRow
            Get
                Return CType(Me.Rows(index),CuentaContableRow)
            End Get
        End Property
        
        Public Event CuentaContableRowChanged As CuentaContableRowChangeEventHandler
        
        Public Event CuentaContableRowChanging As CuentaContableRowChangeEventHandler
        
        Public Event CuentaContableRowDeleted As CuentaContableRowChangeEventHandler
        
        Public Event CuentaContableRowDeleting As CuentaContableRowChangeEventHandler
        
        Public Overloads Sub AddCuentaContableRow(ByVal row As CuentaContableRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCuentaContableRow(ByVal CuentaContable As String, ByVal Descripcion As String, ByVal Nivel As Short, ByVal PARENTID As Integer) As CuentaContableRow
            Dim rowCuentaContableRow As CuentaContableRow = CType(Me.NewRow,CuentaContableRow)
            rowCuentaContableRow.ItemArray = New Object() {CuentaContable, Descripcion, Nivel, PARENTID, Nothing}
            Me.Rows.Add(rowCuentaContableRow)
            Return rowCuentaContableRow
        End Function
        
        Public Function FindByCuentaContable(ByVal CuentaContable As String) As CuentaContableRow
            Return CType(Me.Rows.Find(New Object() {CuentaContable}),CuentaContableRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CuentaContableDataTable = CType(MyBase.Clone,CuentaContableDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CuentaContableDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCuentaContable = Me.Columns("CuentaContable")
            Me.columnDescripcion = Me.Columns("Descripcion")
            Me.columnNivel = Me.Columns("Nivel")
            Me.columnPARENTID = Me.Columns("PARENTID")
            Me.columnid = Me.Columns("id")
        End Sub
        
        Private Sub InitClass()
            Me.columnCuentaContable = New DataColumn("CuentaContable", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuentaContable)
            Me.columnDescripcion = New DataColumn("Descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcion)
            Me.columnNivel = New DataColumn("Nivel", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNivel)
            Me.columnPARENTID = New DataColumn("PARENTID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARENTID)
            Me.columnid = New DataColumn("id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid)
            Me.Constraints.Add(New UniqueConstraint("dtsPresupuestoKey2", New DataColumn() {Me.columnCuentaContable}, true))
            Me.columnCuentaContable.AllowDBNull = false
            Me.columnCuentaContable.Unique = true
            Me.columnDescripcion.AllowDBNull = false
            Me.columnNivel.AllowDBNull = false
            Me.columnPARENTID.AllowDBNull = false
            Me.columnid.AutoIncrement = true
            Me.columnid.AllowDBNull = false
            Me.columnid.ReadOnly = true
        End Sub
        
        Public Function NewCuentaContableRow() As CuentaContableRow
            Return CType(Me.NewRow,CuentaContableRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CuentaContableRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CuentaContableRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CuentaContableRowChangedEvent) Is Nothing) Then
                RaiseEvent CuentaContableRowChanged(Me, New CuentaContableRowChangeEvent(CType(e.Row,CuentaContableRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CuentaContableRowChangingEvent) Is Nothing) Then
                RaiseEvent CuentaContableRowChanging(Me, New CuentaContableRowChangeEvent(CType(e.Row,CuentaContableRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CuentaContableRowDeletedEvent) Is Nothing) Then
                RaiseEvent CuentaContableRowDeleted(Me, New CuentaContableRowChangeEvent(CType(e.Row,CuentaContableRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CuentaContableRowDeletingEvent) Is Nothing) Then
                RaiseEvent CuentaContableRowDeleting(Me, New CuentaContableRowChangeEvent(CType(e.Row,CuentaContableRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCuentaContableRow(ByVal row As CuentaContableRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CuentaContableRow
        Inherits DataRow
        
        Private tableCuentaContable As CuentaContableDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCuentaContable = CType(Me.Table,CuentaContableDataTable)
        End Sub
        
        Public Property CuentaContable As String
            Get
                Return CType(Me(Me.tableCuentaContable.CuentaContableColumn),String)
            End Get
            Set
                Me(Me.tableCuentaContable.CuentaContableColumn) = value
            End Set
        End Property
        
        Public Property Descripcion As String
            Get
                Return CType(Me(Me.tableCuentaContable.DescripcionColumn),String)
            End Get
            Set
                Me(Me.tableCuentaContable.DescripcionColumn) = value
            End Set
        End Property
        
        Public Property Nivel As Short
            Get
                Return CType(Me(Me.tableCuentaContable.NivelColumn),Short)
            End Get
            Set
                Me(Me.tableCuentaContable.NivelColumn) = value
            End Set
        End Property
        
        Public Property PARENTID As Integer
            Get
                Return CType(Me(Me.tableCuentaContable.PARENTIDColumn),Integer)
            End Get
            Set
                Me(Me.tableCuentaContable.PARENTIDColumn) = value
            End Set
        End Property
        
        Public Property id As Integer
            Get
                Return CType(Me(Me.tableCuentaContable.idColumn),Integer)
            End Get
            Set
                Me(Me.tableCuentaContable.idColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CuentaContableRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CuentaContableRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CuentaContableRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CuentaContableRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CuentaContable_PresupuestariaDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCuentaContable As DataColumn
        
        Private columnDescripcion As DataColumn
        
        Private columnNivel As DataColumn
        
        Private columnPARENTID As DataColumn
        
        Private columnid As DataColumn
        
        Friend Sub New()
            MyBase.New("CuentaContable_Presupuestaria")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CuentaContableColumn As DataColumn
            Get
                Return Me.columnCuentaContable
            End Get
        End Property
        
        Friend ReadOnly Property DescripcionColumn As DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        Friend ReadOnly Property NivelColumn As DataColumn
            Get
                Return Me.columnNivel
            End Get
        End Property
        
        Friend ReadOnly Property PARENTIDColumn As DataColumn
            Get
                Return Me.columnPARENTID
            End Get
        End Property
        
        Friend ReadOnly Property idColumn As DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CuentaContable_PresupuestariaRow
            Get
                Return CType(Me.Rows(index),CuentaContable_PresupuestariaRow)
            End Get
        End Property
        
        Public Event CuentaContable_PresupuestariaRowChanged As CuentaContable_PresupuestariaRowChangeEventHandler
        
        Public Event CuentaContable_PresupuestariaRowChanging As CuentaContable_PresupuestariaRowChangeEventHandler
        
        Public Event CuentaContable_PresupuestariaRowDeleted As CuentaContable_PresupuestariaRowChangeEventHandler
        
        Public Event CuentaContable_PresupuestariaRowDeleting As CuentaContable_PresupuestariaRowChangeEventHandler
        
        Public Overloads Sub AddCuentaContable_PresupuestariaRow(ByVal row As CuentaContable_PresupuestariaRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCuentaContable_PresupuestariaRow(ByVal CuentaContable As String, ByVal Descripcion As String, ByVal Nivel As Short, ByVal PARENTID As Integer) As CuentaContable_PresupuestariaRow
            Dim rowCuentaContable_PresupuestariaRow As CuentaContable_PresupuestariaRow = CType(Me.NewRow,CuentaContable_PresupuestariaRow)
            rowCuentaContable_PresupuestariaRow.ItemArray = New Object() {CuentaContable, Descripcion, Nivel, PARENTID, Nothing}
            Me.Rows.Add(rowCuentaContable_PresupuestariaRow)
            Return rowCuentaContable_PresupuestariaRow
        End Function
        
        Public Function FindByCuentaContable(ByVal CuentaContable As String) As CuentaContable_PresupuestariaRow
            Return CType(Me.Rows.Find(New Object() {CuentaContable}),CuentaContable_PresupuestariaRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CuentaContable_PresupuestariaDataTable = CType(MyBase.Clone,CuentaContable_PresupuestariaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CuentaContable_PresupuestariaDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCuentaContable = Me.Columns("CuentaContable")
            Me.columnDescripcion = Me.Columns("Descripcion")
            Me.columnNivel = Me.Columns("Nivel")
            Me.columnPARENTID = Me.Columns("PARENTID")
            Me.columnid = Me.Columns("id")
        End Sub
        
        Private Sub InitClass()
            Me.columnCuentaContable = New DataColumn("CuentaContable", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCuentaContable)
            Me.columnDescripcion = New DataColumn("Descripcion", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescripcion)
            Me.columnNivel = New DataColumn("Nivel", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNivel)
            Me.columnPARENTID = New DataColumn("PARENTID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARENTID)
            Me.columnid = New DataColumn("id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid)
            Me.Constraints.Add(New UniqueConstraint("dtsPresupuestoKey3", New DataColumn() {Me.columnCuentaContable}, true))
            Me.columnCuentaContable.AllowDBNull = false
            Me.columnCuentaContable.Unique = true
            Me.columnDescripcion.AllowDBNull = false
            Me.columnNivel.AllowDBNull = false
            Me.columnPARENTID.AllowDBNull = false
            Me.columnid.AutoIncrement = true
            Me.columnid.AllowDBNull = false
            Me.columnid.ReadOnly = true
        End Sub
        
        Public Function NewCuentaContable_PresupuestariaRow() As CuentaContable_PresupuestariaRow
            Return CType(Me.NewRow,CuentaContable_PresupuestariaRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CuentaContable_PresupuestariaRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CuentaContable_PresupuestariaRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CuentaContable_PresupuestariaRowChangedEvent) Is Nothing) Then
                RaiseEvent CuentaContable_PresupuestariaRowChanged(Me, New CuentaContable_PresupuestariaRowChangeEvent(CType(e.Row,CuentaContable_PresupuestariaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CuentaContable_PresupuestariaRowChangingEvent) Is Nothing) Then
                RaiseEvent CuentaContable_PresupuestariaRowChanging(Me, New CuentaContable_PresupuestariaRowChangeEvent(CType(e.Row,CuentaContable_PresupuestariaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CuentaContable_PresupuestariaRowDeletedEvent) Is Nothing) Then
                RaiseEvent CuentaContable_PresupuestariaRowDeleted(Me, New CuentaContable_PresupuestariaRowChangeEvent(CType(e.Row,CuentaContable_PresupuestariaRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CuentaContable_PresupuestariaRowDeletingEvent) Is Nothing) Then
                RaiseEvent CuentaContable_PresupuestariaRowDeleting(Me, New CuentaContable_PresupuestariaRowChangeEvent(CType(e.Row,CuentaContable_PresupuestariaRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCuentaContable_PresupuestariaRow(ByVal row As CuentaContable_PresupuestariaRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CuentaContable_PresupuestariaRow
        Inherits DataRow
        
        Private tableCuentaContable_Presupuestaria As CuentaContable_PresupuestariaDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCuentaContable_Presupuestaria = CType(Me.Table,CuentaContable_PresupuestariaDataTable)
        End Sub
        
        Public Property CuentaContable As String
            Get
                Return CType(Me(Me.tableCuentaContable_Presupuestaria.CuentaContableColumn),String)
            End Get
            Set
                Me(Me.tableCuentaContable_Presupuestaria.CuentaContableColumn) = value
            End Set
        End Property
        
        Public Property Descripcion As String
            Get
                Return CType(Me(Me.tableCuentaContable_Presupuestaria.DescripcionColumn),String)
            End Get
            Set
                Me(Me.tableCuentaContable_Presupuestaria.DescripcionColumn) = value
            End Set
        End Property
        
        Public Property Nivel As Short
            Get
                Return CType(Me(Me.tableCuentaContable_Presupuestaria.NivelColumn),Short)
            End Get
            Set
                Me(Me.tableCuentaContable_Presupuestaria.NivelColumn) = value
            End Set
        End Property
        
        Public Property PARENTID As Integer
            Get
                Return CType(Me(Me.tableCuentaContable_Presupuestaria.PARENTIDColumn),Integer)
            End Get
            Set
                Me(Me.tableCuentaContable_Presupuestaria.PARENTIDColumn) = value
            End Set
        End Property
        
        Public Property id As Integer
            Get
                Return CType(Me(Me.tableCuentaContable_Presupuestaria.idColumn),Integer)
            End Get
            Set
                Me(Me.tableCuentaContable_Presupuestaria.idColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CuentaContable_PresupuestariaRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CuentaContable_PresupuestariaRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CuentaContable_PresupuestariaRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CuentaContable_PresupuestariaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PeriodoFiscalDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnFechaInicio As DataColumn
        
        Private columnFechaFinal As DataColumn
        
        Private columnEstado As DataColumn
        
        Friend Sub New()
            MyBase.New("PeriodoFiscal")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property FechaInicioColumn As DataColumn
            Get
                Return Me.columnFechaInicio
            End Get
        End Property
        
        Friend ReadOnly Property FechaFinalColumn As DataColumn
            Get
                Return Me.columnFechaFinal
            End Get
        End Property
        
        Friend ReadOnly Property EstadoColumn As DataColumn
            Get
                Return Me.columnEstado
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PeriodoFiscalRow
            Get
                Return CType(Me.Rows(index),PeriodoFiscalRow)
            End Get
        End Property
        
        Public Event PeriodoFiscalRowChanged As PeriodoFiscalRowChangeEventHandler
        
        Public Event PeriodoFiscalRowChanging As PeriodoFiscalRowChangeEventHandler
        
        Public Event PeriodoFiscalRowDeleted As PeriodoFiscalRowChangeEventHandler
        
        Public Event PeriodoFiscalRowDeleting As PeriodoFiscalRowChangeEventHandler
        
        Public Overloads Sub AddPeriodoFiscalRow(ByVal row As PeriodoFiscalRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPeriodoFiscalRow(ByVal FechaInicio As Date, ByVal FechaFinal As Date, ByVal Estado As Boolean) As PeriodoFiscalRow
            Dim rowPeriodoFiscalRow As PeriodoFiscalRow = CType(Me.NewRow,PeriodoFiscalRow)
            rowPeriodoFiscalRow.ItemArray = New Object() {Nothing, FechaInicio, FechaFinal, Estado}
            Me.Rows.Add(rowPeriodoFiscalRow)
            Return rowPeriodoFiscalRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PeriodoFiscalDataTable = CType(MyBase.Clone,PeriodoFiscalDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PeriodoFiscalDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnFechaInicio = Me.Columns("FechaInicio")
            Me.columnFechaFinal = Me.Columns("FechaFinal")
            Me.columnEstado = Me.Columns("Estado")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnFechaInicio = New DataColumn("FechaInicio", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaInicio)
            Me.columnFechaFinal = New DataColumn("FechaFinal", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFechaFinal)
            Me.columnEstado = New DataColumn("Estado", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEstado)
            Me.columnId.AutoIncrement = true
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
            Me.columnFechaInicio.AllowDBNull = false
            Me.columnFechaFinal.AllowDBNull = false
            Me.columnEstado.AllowDBNull = false
        End Sub
        
        Public Function NewPeriodoFiscalRow() As PeriodoFiscalRow
            Return CType(Me.NewRow,PeriodoFiscalRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PeriodoFiscalRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PeriodoFiscalRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PeriodoFiscalRowChangedEvent) Is Nothing) Then
                RaiseEvent PeriodoFiscalRowChanged(Me, New PeriodoFiscalRowChangeEvent(CType(e.Row,PeriodoFiscalRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PeriodoFiscalRowChangingEvent) Is Nothing) Then
                RaiseEvent PeriodoFiscalRowChanging(Me, New PeriodoFiscalRowChangeEvent(CType(e.Row,PeriodoFiscalRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PeriodoFiscalRowDeletedEvent) Is Nothing) Then
                RaiseEvent PeriodoFiscalRowDeleted(Me, New PeriodoFiscalRowChangeEvent(CType(e.Row,PeriodoFiscalRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PeriodoFiscalRowDeletingEvent) Is Nothing) Then
                RaiseEvent PeriodoFiscalRowDeleting(Me, New PeriodoFiscalRowChangeEvent(CType(e.Row,PeriodoFiscalRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePeriodoFiscalRow(ByVal row As PeriodoFiscalRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PeriodoFiscalRow
        Inherits DataRow
        
        Private tablePeriodoFiscal As PeriodoFiscalDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePeriodoFiscal = CType(Me.Table,PeriodoFiscalDataTable)
        End Sub
        
        Public Property Id As Long
            Get
                Return CType(Me(Me.tablePeriodoFiscal.IdColumn),Long)
            End Get
            Set
                Me(Me.tablePeriodoFiscal.IdColumn) = value
            End Set
        End Property
        
        Public Property FechaInicio As Date
            Get
                Return CType(Me(Me.tablePeriodoFiscal.FechaInicioColumn),Date)
            End Get
            Set
                Me(Me.tablePeriodoFiscal.FechaInicioColumn) = value
            End Set
        End Property
        
        Public Property FechaFinal As Date
            Get
                Return CType(Me(Me.tablePeriodoFiscal.FechaFinalColumn),Date)
            End Get
            Set
                Me(Me.tablePeriodoFiscal.FechaFinalColumn) = value
            End Set
        End Property
        
        Public Property Estado As Boolean
            Get
                Return CType(Me(Me.tablePeriodoFiscal.EstadoColumn),Boolean)
            End Get
            Set
                Me(Me.tablePeriodoFiscal.EstadoColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PeriodoFiscalRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PeriodoFiscalRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PeriodoFiscalRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PeriodoFiscalRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class datosDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnn As DataColumn
        
        Private columnm As DataColumn
        
        Private columnch As DataColumn
        
        Private columnid As DataColumn
        
        Private columnma As DataColumn
        
        Friend Sub New()
            MyBase.New("datos")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property nColumn As DataColumn
            Get
                Return Me.columnn
            End Get
        End Property
        
        Friend ReadOnly Property mColumn As DataColumn
            Get
                Return Me.columnm
            End Get
        End Property
        
        Friend ReadOnly Property chColumn As DataColumn
            Get
                Return Me.columnch
            End Get
        End Property
        
        Friend ReadOnly Property idColumn As DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        Friend ReadOnly Property maColumn As DataColumn
            Get
                Return Me.columnma
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As datosRow
            Get
                Return CType(Me.Rows(index),datosRow)
            End Get
        End Property
        
        Public Event datosRowChanged As datosRowChangeEventHandler
        
        Public Event datosRowChanging As datosRowChangeEventHandler
        
        Public Event datosRowDeleted As datosRowChangeEventHandler
        
        Public Event datosRowDeleting As datosRowChangeEventHandler
        
        Public Overloads Sub AdddatosRow(ByVal row As datosRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AdddatosRow(ByVal n As String, ByVal m As Double, ByVal ch As Boolean, ByVal id As Integer, ByVal ma As Double) As datosRow
            Dim rowdatosRow As datosRow = CType(Me.NewRow,datosRow)
            rowdatosRow.ItemArray = New Object() {n, m, ch, id, ma}
            Me.Rows.Add(rowdatosRow)
            Return rowdatosRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As datosDataTable = CType(MyBase.Clone,datosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New datosDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnn = Me.Columns("n")
            Me.columnm = Me.Columns("m")
            Me.columnch = Me.Columns("ch")
            Me.columnid = Me.Columns("id")
            Me.columnma = Me.Columns("ma")
        End Sub
        
        Private Sub InitClass()
            Me.columnn = New DataColumn("n", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnn)
            Me.columnm = New DataColumn("m", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnm)
            Me.columnch = New DataColumn("ch", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnch)
            Me.columnid = New DataColumn("id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid)
            Me.columnma = New DataColumn("ma", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnma)
        End Sub
        
        Public Function NewdatosRow() As datosRow
            Return CType(Me.NewRow,datosRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New datosRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(datosRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.datosRowChangedEvent) Is Nothing) Then
                RaiseEvent datosRowChanged(Me, New datosRowChangeEvent(CType(e.Row,datosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.datosRowChangingEvent) Is Nothing) Then
                RaiseEvent datosRowChanging(Me, New datosRowChangeEvent(CType(e.Row,datosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.datosRowDeletedEvent) Is Nothing) Then
                RaiseEvent datosRowDeleted(Me, New datosRowChangeEvent(CType(e.Row,datosRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.datosRowDeletingEvent) Is Nothing) Then
                RaiseEvent datosRowDeleting(Me, New datosRowChangeEvent(CType(e.Row,datosRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovedatosRow(ByVal row As datosRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class datosRow
        Inherits DataRow
        
        Private tabledatos As datosDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabledatos = CType(Me.Table,datosDataTable)
        End Sub
        
        Public Property n As String
            Get
                Try 
                    Return CType(Me(Me.tabledatos.nColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledatos.nColumn) = value
            End Set
        End Property
        
        Public Property m As Double
            Get
                Try 
                    Return CType(Me(Me.tabledatos.mColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledatos.mColumn) = value
            End Set
        End Property
        
        Public Property ch As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabledatos.chColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledatos.chColumn) = value
            End Set
        End Property
        
        Public Property id As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledatos.idColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledatos.idColumn) = value
            End Set
        End Property
        
        Public Property ma As Double
            Get
                Try 
                    Return CType(Me(Me.tabledatos.maColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledatos.maColumn) = value
            End Set
        End Property
        
        Public Function IsnNull() As Boolean
            Return Me.IsNull(Me.tabledatos.nColumn)
        End Function
        
        Public Sub SetnNull()
            Me(Me.tabledatos.nColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmNull() As Boolean
            Return Me.IsNull(Me.tabledatos.mColumn)
        End Function
        
        Public Sub SetmNull()
            Me(Me.tabledatos.mColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IschNull() As Boolean
            Return Me.IsNull(Me.tabledatos.chColumn)
        End Function
        
        Public Sub SetchNull()
            Me(Me.tabledatos.chColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsidNull() As Boolean
            Return Me.IsNull(Me.tabledatos.idColumn)
        End Function
        
        Public Sub SetidNull()
            Me(Me.tabledatos.idColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmaNull() As Boolean
            Return Me.IsNull(Me.tabledatos.maColumn)
        End Function
        
        Public Sub SetmaNull()
            Me(Me.tabledatos.maColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class datosRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As datosRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As datosRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As datosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
